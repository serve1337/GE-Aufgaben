/* Generated by JSIL v0.8.2 build 17617. See http://jsil.org/ for more information. */ 
'use strict';
var $asm0E = JSIL.DeclareAssembly("protobuf-net, Version=2.0.0.668, Culture=neutral, PublicKeyToken=null");

JSIL.DeclareNamespace("ProtoBuf");
/* enum ProtoBuf.TimeSpanScale */ 

JSIL.MakeEnum(
  {
    FullName: "ProtoBuf.TimeSpanScale", 
    BaseType: $asm14.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Days: 0, 
    Hours: 1, 
    Minutes: 2, 
    Seconds: 3, 
    Milliseconds: 4, 
    Ticks: 5, 
    MinMax: 15, 
  }
);

/* class ProtoBuf.BclHelpers */ 

(function BclHelpers$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm14.System.DateTime)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm14.System.Type)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm14.System.NotSupportedException)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0E.ProtoBuf.ProtoReader)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm14.System.Int64)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm14.System.Int32)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm14.System.UInt64)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm14.System.UInt32)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm0E.ProtoBuf.SubItemToken)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm14.System.Boolean)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm14.System.Decimal)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm14.System.Byte)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm14.System.Guid)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm14.System.Int16)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm14.System.Object)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm0E.ProtoBuf.BclHelpers_NetObjectOptions)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm0E.ProtoBuf.NetObjectCache)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm14.System.String)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm0E.ProtoBuf.ProtoException)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm14.System.InvalidOperationException)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm14.System.Reflection.MemberInfo)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm14.System.TimeSpan)) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm0E.ProtoBuf.TimeSpanScale)) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm0E.ProtoBuf.WireType)) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize($asm0E.ProtoBuf.ProtoWriter)) ();
  };
  var $T19 = function () {
    return ($T19 = JSIL.Memoize($asm14.System.ArgumentNullException)) ();
  };
  var $T1A = function () {
    return ($T1A = JSIL.Memoize(System.Array.Of($asm14.System.Int32))) ();
  };
  var $T1B = function () {
    return ($T1B = JSIL.Memoize(System.Array.Of($asm14.System.Byte))) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm14.TypeRef("System.DateTime"), [
        $asm14.TypeRef("System.Int32"), $asm14.TypeRef("System.Int32"), 
        $asm14.TypeRef("System.Int32"), $asm14.TypeRef("System.Int32"), 
        $asm14.TypeRef("System.Int32"), $asm14.TypeRef("System.Int32"), 
        $asm14.TypeRef("System.Int32")
      ]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm14.TypeRef("System.NotSupportedException"), [$asm14.TypeRef("System.String")]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm14.TypeRef("System.Decimal"), [
        $asm14.TypeRef("System.Int32"), $asm14.TypeRef("System.Int32"), 
        $asm14.TypeRef("System.Int32"), $asm14.TypeRef("System.Boolean"), 
        $asm14.TypeRef("System.Byte")
      ]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm14.TypeRef("System.Guid"), [
        $asm14.TypeRef("System.Int32"), $asm14.TypeRef("System.Int16"), 
        $asm14.TypeRef("System.Int16"), $asm14.TypeRef("System.Byte"), 
        $asm14.TypeRef("System.Byte"), $asm14.TypeRef("System.Byte"), 
        $asm14.TypeRef("System.Byte"), $asm14.TypeRef("System.Byte"), 
        $asm14.TypeRef("System.Byte"), $asm14.TypeRef("System.Byte"), 
        $asm14.TypeRef("System.Byte")
      ]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0E.TypeRef("ProtoBuf.ProtoException"), [$asm14.TypeRef("System.String")]))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.ConstructorSignature($asm14.TypeRef("System.InvalidOperationException"), [$asm14.TypeRef("System.String")]))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(new JSIL.ConstructorSignature($asm14.TypeRef("System.ArgumentNullException"), [$asm14.TypeRef("System.String")]))) ();
  };
  var $S07 = function () {
    return ($S07 = JSIL.Memoize(new JSIL.MethodSignature($asm14.TypeRef("System.TimeSpan"), [$asm14.TypeRef("System.DateTime"), $asm14.TypeRef("System.DateTime")]))) ();
  };


  function BclHelpers_GetUninitializedObject (type) {
    throw $S01().Construct("Constructor-skipping is not supported on this platform");
  }; 

  function BclHelpers_ReadDateTime (source) {
    var ticks = $thisType.ReadTimeSpanTicks(source);
    if ($T04().op_Equality(ticks, $T04().Create(0, 0, 32768))) {
      var result = $T00().MinValue.MemberwiseClone();
    } else {
      if ($T04().op_Equality(ticks, $T04().Create(16777215, 16777215, 32767))) {
        result = $T00().MaxValue.MemberwiseClone();
      } else {
        result = $thisType.EpochOrigin.MemberwiseClone().AddTicks(ticks).MemberwiseClone();
      }
    }
    return result;
  }; 

  function BclHelpers_ReadDecimal (reader) {
    var fieldNumber = 0;
    var low = $T06().Create(0, 0, 0);
    var high = 0;
    var signScale = 0;
    var token = $T03().StartSubItem(reader);

    while ((fieldNumber = (reader.ReadFieldHeader() | 0)) > 0) {
      switch (fieldNumber) {
        case 1: 
          low = reader.ReadUInt64();
          break;

        case 2: 
          high = (reader.ReadUInt32() >>> 0);
          break;

        case 3: 
          signScale = (reader.ReadUInt32() >>> 0);
          break;

        default: 
          reader.SkipField();
          break;

      }
    }
    $T03().EndSubItem(token, reader);
    var flag = !$T06().op_Inequality(low, $T06().Create(0, 0, 0)) && 
    (high === 0);
    if (flag) {
      var result = $T0A().Zero;
    } else {
      var lo = (($T06().op_BitwiseAnd(low, $T06().FromNumber(-1))).ToNumber(4294967295, true) | 0);
      var mid = (($T06().op_BitwiseAnd(
          $T06().op_RightShift(low, 32), 
          $T06().FromNumber(-1)
        )).ToNumber(4294967295, true) | 0);
      var hi = (high | 0);
      var isNeg = (signScale & 1) === 1;
      var scale = ((signScale & 510) >>> 1 & 0xFF);
      result = $S02().Construct(lo, mid, hi, isNeg, scale);
    }
    return result;
  }; 

  function BclHelpers_ReadGuid (source) {
    var fieldNumber = 0;
    var low = $T06().Create(0, 0, 0);
    var high = $T06().Create(0, 0, 0);
    var token = $T03().StartSubItem(source);

    while ((fieldNumber = (source.ReadFieldHeader() | 0)) > 0) {
      var num = fieldNumber;
      if (num !== 1) {
        if (num !== 2) {
          source.SkipField();
        } else {
          high = source.ReadUInt64();
        }
      } else {
        low = source.ReadUInt64();
      }
    }
    $T03().EndSubItem(token, source);
    var flag = !$T06().op_Inequality(low, $T06().Create(0, 0, 0)) && 
    $T06().op_Equality(high, $T06().Create(0, 0, 0));
    if (flag) {
      var result = $T0C().Empty.MemberwiseClone();
    } else {
      var a = (($T06().op_RightShift(low, 32)).ToNumber(4294967295, false) >>> 0);
      var b = (low.ToNumber(4294967295, false) >>> 0);
      var c = (($T06().op_RightShift(high, 32)).ToNumber(4294967295, false) >>> 0);
      var d = (high.ToNumber(4294967295, false) >>> 0);
      result = $S03().Construct((b | 0), ((a + 0x8000 & 0xFFFF) - 0x8000), ((a >>> 16 + 0x8000 & 0xFFFF) - 0x8000), (d & 0xFF), (d >>> 8 & 0xFF), (d >>> 16 & 0xFF), (d >>> 24 & 0xFF), (c & 0xFF), (c >>> 8 & 0xFF), (c >>> 16 & 0xFF), (c >>> 24 & 0xFF));
    }
    return result;
  }; 

  function BclHelpers_ReadNetObject (value, source, key, $type, options) {
    var type = new JSIL.BoxedVariable($type);
    var fieldNumber = 0;
    var token = $T03().StartSubItem(source);
    var newObjectKey = -1;
    var newTypeKey = -1;

  $loop0: 
    while ((fieldNumber = (source.ReadFieldHeader() | 0)) > 0) {

      var $label0 = 0;
    $labelgroup0: 
      while (true) {
        switch ($label0) {
          case 0: /* $entry0 */ 
            switch (fieldNumber) {
              case 1: 
                var tmp = (source.ReadInt32() | 0);
                value = (source.get_NetCache()).GetKeyedObject(tmp);
                break;

              case 2: 
                newObjectKey = (source.ReadInt32() | 0);
                break;

              case 3: 
                tmp = (source.ReadInt32() | 0);
                type.set($T01().$Cast((source.get_NetCache()).GetKeyedObject(tmp)));
                key = (source.GetTypeKey(/* ref */ type) | 0);
                break;

              case 4: 
                newTypeKey = (source.ReadInt32() | 0);
                break;

              case 5: 
              case 6: 
              case 7: 
              case 9: 
                $label0 = 1 /* goto IL_27E */ ;
                continue $labelgroup0;

              case 8: 
                var typeName = source.ReadString();
                type.set(source.DeserializeType(typeName));
                var flag = type.get() === null;
                if (flag) {
                  throw $S04().Construct(("Unable to resolve type: " + typeName + " (you can use the TypeModel.DynamicTypeFormatting event to provide a custom mapping)"));
                }
                var flag2 = type.get() === $T11().__Type__;
                if (flag2) {
                  key = -1;
                } else {
                  key = (source.GetTypeKey(/* ref */ type) | 0);
                  var flag3 = (key | 0) < 0;
                  if (flag3) {
                    throw $S05().Construct(JSIL.ConcatString("Dynamic type is not a contract-type: ", (type.get()).get_Name()));
                  }
                }
                break;

              case 10: 
                var isString = type.get() === $T11().__Type__;
                var wasNull = value === null;
                var lateSet = wasNull && 
                (isString || 
                  ($T0F().$Cast(options & $T0F().LateSet) > $T0F().None));
                var flag4 = (newObjectKey >= 0) && 
                !lateSet;
                if (flag4) {
                  var flag5 = value === null;
                  if (flag5) {
                    source.TrapNextObject(newObjectKey);
                  } else {
                    (source.get_NetCache()).SetKeyedObject(newObjectKey, value);
                  }
                  var flag6 = newTypeKey >= 0;
                  if (flag6) {
                    (source.get_NetCache()).SetKeyedObject(newTypeKey, type.get());
                  }
                }
                var oldValue = value;
                if (isString) {
                  value = source.ReadString();
                } else {
                  value = $T03().ReadTypedObject(oldValue, key, source, type.get());
                }
                var flag8 = newObjectKey >= 0;
                if (flag8) {
                  var flag9 = wasNull && 
                  !lateSet;
                  if (flag9) {
                    oldValue = (source.get_NetCache()).GetKeyedObject(newObjectKey);
                  }
                  var flag10 = lateSet;
                  if (flag10) {
                    (source.get_NetCache()).SetKeyedObject(newObjectKey, value);
                    var flag11 = newTypeKey >= 0;
                    if (flag11) {
                      (source.get_NetCache()).SetKeyedObject(newTypeKey, type.get());
                    }
                  }
                }
                var flag12 = !((newObjectKey < 0) || 
                  lateSet) && 
                (oldValue !== value);
                if (flag12) {
                  throw $S04().Construct("A reference-tracked object changed reference during deserialization");
                }
                var flag13 = (newObjectKey < 0) && 
                (newTypeKey >= 0);
                if (flag13) {
                  (source.get_NetCache()).SetKeyedObject(newTypeKey, type.get());
                }
                break;

              default: 
                $label0 = 1 /* goto IL_27E */ ;
                continue $labelgroup0;

            }
            continue $loop0;

          case 1: /* IL_27E */ 
            source.SkipField();

            break $labelgroup0;
        }
      }
    }
    var flag14 = (newObjectKey >= 0) && 
    ($T0F().$Cast(options & $T0F().AsReference) === $T0F().None);
    if (flag14) {
      throw $S04().Construct("Object key in input stream, but reference-tracking was not expected");
    }
    $T03().EndSubItem(token, source);
    return value;
  }; 

  function BclHelpers_ReadTimeSpan (source) {
    var ticks = $thisType.ReadTimeSpanTicks(source);
    if ($T04().op_Equality(ticks, $T04().Create(0, 0, 32768))) {
      var result = $T15().MinValue.MemberwiseClone();
    } else {
      if ($T04().op_Equality(ticks, $T04().Create(16777215, 16777215, 32767))) {
        result = $T15().MaxValue.MemberwiseClone();
      } else {
        result = $T15().FromTicks(ticks).MemberwiseClone();
      }
    }
    return result;
  }; 

  function BclHelpers_ReadTimeSpanTicks (source) {
    var fieldNumber = 0;
    switch ((source.get_WireType()).valueOf()) {
      case 1: 
        var result = source.ReadInt64();
        break;

      case 2: 
      case 3: 
        var token = $T03().StartSubItem(source);
        var scale = $T16().Days;
        var value = $T04().Create(0, 0, 0);

        while ((fieldNumber = (source.ReadFieldHeader() | 0)) > 0) {
          var num = fieldNumber;
          if (num !== 1) {
            if (num !== 2) {
              source.SkipField();
            } else {
              scale = $T16().$Cast(source.ReadInt32());
            }
          } else {
            source.Assert($T17().SignedVariant);
            value = source.ReadInt64();
          }
        }
        $T03().EndSubItem(token, source);
        var timeSpanScale = scale;
        switch (timeSpanScale.valueOf()) {
          case 0: 
            result = $T04().op_Multiplication(value, $T04().Create(6930432, 51498, 0));
            break;

          case 1: 
            result = $T04().op_Multiplication(value, $T04().Create(12871680, 2145, 0));
            break;

          case 2: 
            result = $T04().op_Multiplication(value, $T04().Create(12797440, 35, 0));
            break;

          case 3: 
            result = $T04().op_Multiplication(value, $T04().Create(10000000, 0, 0));
            break;

          case 4: 
            result = $T04().op_Multiplication(value, $T04().Create(10000, 0, 0));
            break;

          case 5: 
            result = value;
            break;

          default: 
            if (timeSpanScale !== $T16().MinMax) {
              throw $S04().Construct(JSIL.ConcatString("Unknown timescale: ", scale.toString()));
            }
            var num2 = value;
            if (!$T04().op_Equality(num2, $T04().Create(16777215, 16777215, 65535))) {
              if (!$T04().op_Equality(num2, $T04().Create(1, 0, 0))) {
                throw $S04().Construct(JSIL.ConcatString("Unknown min/max value: ", (value).toString()));
              }
              result = $T04().Create(16777215, 16777215, 32767);
            } else {
              result = $T04().Create(0, 0, 32768);
            }
            break;

        }
        break;

      default: 
        throw $S04().Construct(JSIL.ConcatString("Unexpected wire-type: ", (source.get_WireType()).toString()));

    }
    return result;
  }; 

  function BclHelpers_WriteDateTime (value, dest) {
    var flag = dest === null;
    if (flag) {
      throw $S06().Construct("dest");
    }
    var wireType = dest.get_WireType();
    if (!((wireType === $T17().String) || (wireType === $T17().StartGroup))) {
      var delta = $S07().CallStatic($T00(), "op_Subtraction", null, value, $thisType.EpochOrigin).MemberwiseClone();
    } else {
      var flag2 = $T00().op_Equality(value.MemberwiseClone(), $T00().MaxValue.MemberwiseClone());
      if (flag2) {
        delta = $T15().MaxValue.MemberwiseClone();
      } else {
        var flag3 = $T00().op_Equality(value.MemberwiseClone(), $T00().MinValue.MemberwiseClone());
        if (flag3) {
          delta = $T15().MinValue.MemberwiseClone();
        } else {
          delta = $S07().CallStatic($T00(), "op_Subtraction", null, value, $thisType.EpochOrigin).MemberwiseClone();
        }
      }
    }
    $thisType.WriteTimeSpan(delta.MemberwiseClone(), dest);
  }; 

  function BclHelpers_WriteDecimal (value, writer) {
    var bits = $T0A().GetBits(value);
    var a = $T06().op_LeftShift(($T04().FromNumber(bits[1])).ToUInt64(), 32);
    var b = ($T04().op_BitwiseAnd(
        $T04().FromNumber(bits[0]), 
        ($T06().FromNumber(-1)).ToInt64()
      )).ToUInt64();
    var low = $T06().op_BitwiseOr(a, b);
    var high = (bits[2] >>> 0);
    var signScale = ((((bits[3] | 0) >> 15) & 510) | (((bits[3] | 0) >> 31) & 1) >>> 0);
    var token = $T18().StartSubItem(null, writer);
    if ($T06().op_GreaterThan(low, $T06().Create(0, 0, 0))) {
      $T18().WriteFieldHeader(1, $T17().Variant, writer);
      $T18().WriteUInt64(low, writer);
    }
    if (high > 0) {
      $T18().WriteFieldHeader(2, $T17().Variant, writer);
      $T18().WriteUInt32(high, writer);
    }
    if (signScale > 0) {
      $T18().WriteFieldHeader(3, $T17().Variant, writer);
      $T18().WriteUInt32(signScale, writer);
    }
    $T18().EndSubItem(token, writer);
  }; 

  function BclHelpers_WriteGuid (value, dest) {
    var blob = value.ToByteArray();
    var token = $T18().StartSubItem(null, dest);
    var flag = $T0C().op_Inequality(value.MemberwiseClone(), $T0C().Empty.MemberwiseClone());
    if (flag) {
      $T18().WriteFieldHeader(1, $T17().Fixed64, dest);
      $T18().WriteBytes(blob, 0, 8, dest);
      $T18().WriteFieldHeader(2, $T17().Fixed64, dest);
      $T18().WriteBytes(blob, 8, 8, dest);
    }
    $T18().EndSubItem(token, dest);
  }; 

  function BclHelpers_WriteNetObject (value, dest, key, options) {
    var existing = new JSIL.BoxedVariable(false);
    var existing2 = new JSIL.BoxedVariable(false);
    var flag = dest === null;
    if (flag) {
      throw $S06().Construct("dest");
    }
    var asReference = $T0F().$Cast(options & $T0F().AsReference) > $T0F().None;
    var wireType = dest.get_WireType();
    var token = $T18().StartSubItem(null, dest);
    var writeObject = true;
    var flag2 = asReference;
    if (flag2) {
      var objectKey = ((dest.get_NetCache()).AddObjectKey(value, /* ref */ existing) | 0);
      $T18().WriteFieldHeader((
          existing.get()
             ? 1
             : 2)
        , $T17().Variant, dest);
      $T18().WriteInt32(objectKey, dest);
      var flag3 = existing.get();
      if (flag3) {
        writeObject = false;
      }
    }
    var flag4 = writeObject;
    var type = new JSIL.BoxedVariable(null);
    if (flag4) {
      var flag5 = $T0F().$Cast(options & $T0F().DynamicType) > $T0F().None;
      if (flag5) {
        type.set(JSIL.GetType(value));
        var flag6 = !$T11().$Is(value);
        if (flag6) {
          key = (dest.GetTypeKey(/* ref */ type) | 0);
          var flag7 = (key | 0) < 0;
          if (flag7) {
            throw $S05().Construct(JSIL.ConcatString("Dynamic type is not a contract-type: ", (type.get()).get_Name()));
          }
        }
        var typeKey = ((dest.get_NetCache()).AddObjectKey(type.get(), /* ref */ existing2) | 0);
        $T18().WriteFieldHeader((
            existing2.get()
               ? 3
               : 4)
          , $T17().Variant, dest);
        $T18().WriteInt32(typeKey, dest);
        var flag8 = !existing2.get();
        if (flag8) {
          $T18().WriteFieldHeader(8, $T17().String, dest);
          $T18().WriteString(dest.SerializeType(type.get()), dest);
        }
      }
      $T18().WriteFieldHeader(10, wireType, dest);
      var flag9 = $T11().$Is(value);
      if (flag9) {
        $T18().WriteString($T11().$Cast(value), dest);
      } else {
        $T18().WriteObject(value, key, dest);
      }
    }
    $T18().EndSubItem(token, dest);
  }; 

  function BclHelpers_WriteTimeSpan (timeSpan, dest) {
    var flag = dest === null;
    if (flag) {
      throw $S06().Construct("dest");
    }
    switch ((dest.get_WireType()).valueOf()) {
      case 1: 
        $T18().WriteInt64(timeSpan.get_Ticks(), dest);
        break;

      case 2: 
      case 3: 
        var value = timeSpan.get_Ticks();
        var flag2 = $T15().op_Equality(timeSpan.MemberwiseClone(), $T15().MaxValue.MemberwiseClone());
        if (flag2) {
          value = $T04().Create(1, 0, 0);
          var scale = $T16().MinMax;
        } else {
          var flag3 = $T15().op_Equality(timeSpan.MemberwiseClone(), $T15().MinValue.MemberwiseClone());
          if (flag3) {
            value = $T04().Create(16777215, 16777215, 65535);
            scale = $T16().MinMax;
          } else {
            var flag4 = $T04().op_Equality(
              $T04().op_Modulus(value, $T04().Create(6930432, 51498, 0)), 
              $T04().Create(0, 0, 0)
            );
            if (flag4) {
              scale = $T16().Days;
              value = $T04().op_Division(value, $T04().Create(6930432, 51498, 0));
            } else {
              var flag5 = $T04().op_Equality(
                $T04().op_Modulus(value, $T04().Create(12871680, 2145, 0)), 
                $T04().Create(0, 0, 0)
              );
              if (flag5) {
                scale = $T16().Hours;
                value = $T04().op_Division(value, $T04().Create(12871680, 2145, 0));
              } else {
                var flag6 = $T04().op_Equality(
                  $T04().op_Modulus(value, $T04().Create(12797440, 35, 0)), 
                  $T04().Create(0, 0, 0)
                );
                if (flag6) {
                  scale = $T16().Minutes;
                  value = $T04().op_Division(value, $T04().Create(12797440, 35, 0));
                } else {
                  var flag7 = $T04().op_Equality(
                    $T04().op_Modulus(value, $T04().Create(10000000, 0, 0)), 
                    $T04().Create(0, 0, 0)
                  );
                  if (flag7) {
                    scale = $T16().Seconds;
                    value = $T04().op_Division(value, $T04().Create(10000000, 0, 0));
                  } else {
                    var flag8 = $T04().op_Equality(
                      $T04().op_Modulus(value, $T04().Create(10000, 0, 0)), 
                      $T04().Create(0, 0, 0)
                    );
                    if (flag8) {
                      scale = $T16().Milliseconds;
                      value = $T04().op_Division(value, $T04().Create(10000, 0, 0));
                    } else {
                      scale = $T16().Ticks;
                    }
                  }
                }
              }
            }
          }
        }
        var token = $T18().StartSubItem(null, dest);
        var flag9 = $T04().op_GreaterThan(value, $T04().Create(0, 0, 0));
        if (flag9) {
          $T18().WriteFieldHeader(1, $T17().SignedVariant, dest);
          $T18().WriteInt64(value, dest);
        }
        var flag10 = scale > $T16().Days;
        if (flag10) {
          $T18().WriteFieldHeader(2, $T17().Variant, dest);
          $T18().WriteInt32(scale.valueOf(), dest);
        }
        $T18().EndSubItem(token, dest);
        break;

      default: 
        throw $S04().Construct(JSIL.ConcatString("Unexpected wire-type: ", (dest.get_WireType()).toString()));

    }
  }; 

  JSIL.MakeStaticClass("ProtoBuf.BclHelpers", true, [], function ($ib) {
    $ = $ib;

    $.Method({Static:true , Public:true }, "GetUninitializedObject", 
      new JSIL.MethodSignature($.Object, [$asm14.TypeRef("System.Type")]), 
      BclHelpers_GetUninitializedObject
    );

    $.Method({Static:true , Public:true }, "ReadDateTime", 
      new JSIL.MethodSignature($asm14.TypeRef("System.DateTime"), [$asm0E.TypeRef("ProtoBuf.ProtoReader")]), 
      BclHelpers_ReadDateTime
    );

    $.Method({Static:true , Public:true }, "ReadDecimal", 
      new JSIL.MethodSignature($asm14.TypeRef("System.Decimal"), [$asm0E.TypeRef("ProtoBuf.ProtoReader")]), 
      BclHelpers_ReadDecimal
    );

    $.Method({Static:true , Public:true }, "ReadGuid", 
      new JSIL.MethodSignature($asm14.TypeRef("System.Guid"), [$asm0E.TypeRef("ProtoBuf.ProtoReader")]), 
      BclHelpers_ReadGuid
    );

    $.Method({Static:true , Public:true }, "ReadNetObject", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $asm0E.TypeRef("ProtoBuf.ProtoReader"), 
          $.Int32, $asm14.TypeRef("System.Type"), 
          $asm0E.TypeRef("ProtoBuf.BclHelpers+NetObjectOptions")
        ]), 
      BclHelpers_ReadNetObject
    );

    $.Method({Static:true , Public:true }, "ReadTimeSpan", 
      new JSIL.MethodSignature($asm14.TypeRef("System.TimeSpan"), [$asm0E.TypeRef("ProtoBuf.ProtoReader")]), 
      BclHelpers_ReadTimeSpan
    );

    $.Method({Static:true , Public:false}, "ReadTimeSpanTicks", 
      new JSIL.MethodSignature($.Int64, [$asm0E.TypeRef("ProtoBuf.ProtoReader")]), 
      BclHelpers_ReadTimeSpanTicks
    );

    $.Method({Static:true , Public:true }, "WriteDateTime", 
      new JSIL.MethodSignature(null, [$asm14.TypeRef("System.DateTime"), $asm0E.TypeRef("ProtoBuf.ProtoWriter")]), 
      BclHelpers_WriteDateTime
    );

    $.Method({Static:true , Public:true }, "WriteDecimal", 
      new JSIL.MethodSignature(null, [$asm14.TypeRef("System.Decimal"), $asm0E.TypeRef("ProtoBuf.ProtoWriter")]), 
      BclHelpers_WriteDecimal
    );

    $.Method({Static:true , Public:true }, "WriteGuid", 
      new JSIL.MethodSignature(null, [$asm14.TypeRef("System.Guid"), $asm0E.TypeRef("ProtoBuf.ProtoWriter")]), 
      BclHelpers_WriteGuid
    );

    $.Method({Static:true , Public:true }, "WriteNetObject", 
      new JSIL.MethodSignature(null, [
          $.Object, $asm0E.TypeRef("ProtoBuf.ProtoWriter"), 
          $.Int32, $asm0E.TypeRef("ProtoBuf.BclHelpers+NetObjectOptions")
        ]), 
      BclHelpers_WriteNetObject
    );

    $.Method({Static:true , Public:true }, "WriteTimeSpan", 
      new JSIL.MethodSignature(null, [$asm14.TypeRef("System.TimeSpan"), $asm0E.TypeRef("ProtoBuf.ProtoWriter")]), 
      BclHelpers_WriteTimeSpan
    );

    $.Constant({Static:true , Public:false}, "FieldTimeSpanValue", $.Int32, 1);

    $.Constant({Static:true , Public:false}, "FieldTimeSpanScale", $.Int32, 2);

    $.Field({Static:true , Public:false, ReadOnly:true }, "EpochOrigin", $asm14.TypeRef("System.DateTime"));

    $.Constant({Static:true , Public:false}, "FieldDecimalLow", $.Int32, 1);

    $.Constant({Static:true , Public:false}, "FieldDecimalHigh", $.Int32, 2);

    $.Constant({Static:true , Public:false}, "FieldDecimalSignScale", $.Int32, 3);

    $.Constant({Static:true , Public:false}, "FieldGuidLow", $.Int32, 1);

    $.Constant({Static:true , Public:false}, "FieldGuidHigh", $.Int32, 2);

    $.Constant({Static:true , Public:false}, "FieldExistingObjectKey", $.Int32, 1);

    $.Constant({Static:true , Public:false}, "FieldNewObjectKey", $.Int32, 2);

    $.Constant({Static:true , Public:false}, "FieldExistingTypeKey", $.Int32, 3);

    $.Constant({Static:true , Public:false}, "FieldNewTypeKey", $.Int32, 4);

    $.Constant({Static:true , Public:false}, "FieldTypeName", $.Int32, 8);

    $.Constant({Static:true , Public:false}, "FieldObject", $.Int32, 10);


    function BclHelpers__cctor () {
      $thisType.EpochOrigin = new $asm14.System.DateTime();
      $thisType.EpochOrigin = $S00().Construct(1970, 1, 1, 0, 0, 0, 0);
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      BclHelpers__cctor
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum ProtoBuf.BclHelpers+NetObjectOptions */ 

JSIL.MakeEnum(
  {
    FullName: "ProtoBuf.BclHelpers+NetObjectOptions", 
    BaseType: $asm14.TypeRef("System.Byte"), 
    IsPublic: false, 
    IsFlags: true, 
  }, 
  {
    None: 0, 
    AsReference: 1, 
    DynamicType: 2, 
    UseConstructor: 4, 
    LateSet: 8, 
  }
);

/* class ProtoBuf.BufferExtension */ 

(function BufferExtension$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm14.System.IO.MemoryStream)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize(System.Array.Of($asm14.System.Byte))) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm14.System.IO.Stream)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm14.System.Boolean)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm14.System.Int32)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm14.System.Int64)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm14.System.Byte)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm0E.ProtoBuf.Helpers)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm14.System.IO.EndOfStreamException)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm14.System.IDisposable)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm14.TypeRef("System.IO.MemoryStream"), null))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm14.TypeRef("System.IO.MemoryStream"), [$jsilcore.TypeRef("System.Array", [$asm14.TypeRef("System.Byte")])]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm14.TypeRef("System.IO.EndOfStreamException"), null))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm14.System.IDisposable.Dispose)) ();
  };


  function BufferExtension__ctor () {
  }; 

  function BufferExtension_ProtoBuf_IExtension_BeginAppend () {
    return $S00().Construct();
  }; 

  function BufferExtension_ProtoBuf_IExtension_BeginQuery () {
    return (
      (this.buffer === null)
         ? $T02().Null
         : $S01().Construct(this.buffer))
    ;
  }; 

  function BufferExtension_ProtoBuf_IExtension_EndAppend (stream, commit) {
    var len = 0, bytesRead = 0;
    try {
      var flag = commit && 
      ((len = ((stream.get_Length()).ToNumber(4294967295, true) | 0)) > 0);
      if (flag) {
        var ms = $T00().$Cast(stream);
        if (this.buffer === null) {
          this.buffer = ms.ToArray();
        } else {
          var offset = (this.buffer.length | 0);
          var tmp = JSIL.Array.New($T06(), ((offset + len) | 0));
          $T07().BlockCopy(
            this.buffer, 
            0, 
            tmp, 
            0, 
            offset
          );
          var oldPos = ms.get_Position();
          ms.set_Position($T05().Create(0, 0, 0));

          for (; (len > 0) && ((bytesRead = (ms.Read(tmp, offset, len) | 0)) > 0); offset = ((offset + bytesRead) | 0)) {
            len = ((len - bytesRead) | 0);
          }
          var flag3 = len > 0;
          if (flag3) {
            throw $S02().Construct();
          }
          ms.set_Position(oldPos);
          this.buffer = tmp;
        }
      }
    } finally {
      if (stream !== null) {
        $IM00().Call(stream, null);
      }
    }
  }; 

  function BufferExtension_ProtoBuf_IExtension_EndQuery (stream) {
    try {
    } finally {
      if (stream !== null) {
        $IM00().Call(stream, null);
      }
    }
  }; 

  function BufferExtension_ProtoBuf_IExtension_GetLength () {
    return (
      (this.buffer === null)
         ? 0
         : this.buffer.length)
    ;
  }; 

  JSIL.MakeType({
      BaseType: $asm14.TypeRef("System.Object"), 
      Name: "ProtoBuf.BufferExtension", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      BufferExtension__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.IExtension.BeginAppend", 
      JSIL.MethodSignature.Return($asm14.TypeRef("System.IO.Stream")), 
      BufferExtension_ProtoBuf_IExtension_BeginAppend
    )
      .Overrides($asm0E.TypeRef("ProtoBuf.IExtension"), "BeginAppend");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.IExtension.BeginQuery", 
      JSIL.MethodSignature.Return($asm14.TypeRef("System.IO.Stream")), 
      BufferExtension_ProtoBuf_IExtension_BeginQuery
    )
      .Overrides($asm0E.TypeRef("ProtoBuf.IExtension"), "BeginQuery");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.IExtension.EndAppend", 
      new JSIL.MethodSignature(null, [$asm14.TypeRef("System.IO.Stream"), $.Boolean]), 
      BufferExtension_ProtoBuf_IExtension_EndAppend
    )
      .Overrides($asm0E.TypeRef("ProtoBuf.IExtension"), "EndAppend");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.IExtension.EndQuery", 
      JSIL.MethodSignature.Action($asm14.TypeRef("System.IO.Stream")), 
      BufferExtension_ProtoBuf_IExtension_EndQuery
    )
      .Overrides($asm0E.TypeRef("ProtoBuf.IExtension"), "EndQuery");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.IExtension.GetLength", 
      JSIL.MethodSignature.Return($.Int32), 
      BufferExtension_ProtoBuf_IExtension_GetLength
    )
      .Overrides($asm0E.TypeRef("ProtoBuf.IExtension"), "GetLength");

    $.Field({Static:false, Public:false}, "buffer", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.ImplementInterfaces(
      /* 0 */ $asm0E.TypeRef("ProtoBuf.IExtension")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ProtoBuf.BufferPool */ 

(function BufferPool$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm14.System.Object)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm14.System.Int32)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize(System.Array.Of($asm14.System.Object))) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm14.System.Boolean)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize(System.Array.Of($asm14.System.Byte))) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm14.System.Byte)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm0E.ProtoBuf.Helpers)) ();
  };


  function BufferPool__ctor () {
  }; 

  function BufferPool_Flush () {

    for (var i = 0; i < ($thisType.pool.length | 0); ) {
      $thisType.pool[i] = null;
      var num = i;
      i = ((num + 1) | 0);
    }
  }; 

  function BufferPool_GetBuffer () {
    var tmp = null;

    for (var i = 0; i < ($thisType.pool.length | 0); ) {
      var flag = (tmp = $thisType.pool[i]) !== null;
      if (flag) {
        var result = $T04().$Cast(tmp);
        return result;
      }
      var num = i;
      i = ((num + 1) | 0);
    }
    result = JSIL.Array.New($T05(), 1024);
    return result;
  }; 

  function BufferPool_ReleaseBufferToPool (/* ref */ buffer) {
    var flag = buffer.get() === null;
    if (!flag) {
      var flag2 = (buffer.get().length | 0) === 1024;
      if (flag2) {

      $loop0: 
        for (var i = 0; i < ($thisType.pool.length | 0); ) {
          var flag3 = $thisType.pool[i] === null;
          if (flag3) {
            $thisType.pool[i] = buffer.get();
          }
          var flag4 = $thisType.pool[i] === null;
          if (flag4) {
            break $loop0;
          }
          var num = i;
          i = ((num + 1) | 0);
        }
      }
      buffer.set(null);
    }
  }; 

  function BufferPool_ResizeAndFlushLeft (/* ref */ buffer, toFitAtLeastBytes, copyFromIndex, copyBytes) {
    var newLength = Math.imul(buffer.get().length, 2);
    var flag = newLength < (toFitAtLeastBytes | 0);
    if (flag) {
      newLength = (toFitAtLeastBytes | 0);
    }
    var newBuffer = JSIL.Array.New($T05(), newLength);
    if ((copyBytes | 0) > 0) {
      $T06().BlockCopy(
        buffer.get(), 
        copyFromIndex, 
        newBuffer, 
        0, 
        copyBytes
      );
    }
    var flag3 = (buffer.get().length | 0) === 1024;
    if (flag3) {
      $thisType.ReleaseBufferToPool(/* ref */ buffer);
    }
    buffer.set(newBuffer);
  }; 

  JSIL.MakeType({
      BaseType: $asm14.TypeRef("System.Object"), 
      Name: "ProtoBuf.BufferPool", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void, 
      BufferPool__ctor
    );

    $.Method({Static:true , Public:false}, "Flush", 
      JSIL.MethodSignature.Void, 
      BufferPool_Flush
    );

    $.Method({Static:true , Public:false}, "GetBuffer", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte])), 
      BufferPool_GetBuffer
    );

    $.Method({Static:true , Public:false}, "ReleaseBufferToPool", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$.Byte])])), 
      BufferPool_ReleaseBufferToPool
    );

    $.Method({Static:true , Public:false}, "ResizeAndFlushLeft", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$.Byte])]), $.Int32, 
          $.Int32, $.Int32
        ]), 
      BufferPool_ResizeAndFlushLeft
    );

    $.Constant({Static:true , Public:false}, "PoolSize", $.Int32, 20);

    $.Constant({Static:true , Public:false}, "BufferLength", $.Int32, 1024);

    $.Field({Static:true , Public:false, ReadOnly:true }, "pool", $jsilcore.TypeRef("System.Array", [$.Object]), function ($pi) {
        return JSIL.Array.New($asm14.System.Object, 20);
      });


    function BufferPool__cctor () {
      $thisType.pool = JSIL.Array.New($T00(), 20);
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      BufferPool__cctor
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ProtoBuf.ProtoBeforeSerializationAttribute */ 

(function ProtoBeforeSerializationAttribute$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm14.System.Attribute)) ();
  };


  function ProtoBeforeSerializationAttribute__ctor () {
    $T00().prototype._ctor.call(this);
  }; 

  JSIL.MakeType({
      BaseType: $asm14.TypeRef("System.Attribute"), 
      Name: "ProtoBuf.ProtoBeforeSerializationAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      ProtoBeforeSerializationAttribute__ctor
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm14.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm14.System.AttributeTargets.Method]; });

})();

/* class ProtoBuf.ProtoAfterSerializationAttribute */ 

(function ProtoAfterSerializationAttribute$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm14.System.Attribute)) ();
  };


  function ProtoAfterSerializationAttribute__ctor () {
    $T00().prototype._ctor.call(this);
  }; 

  JSIL.MakeType({
      BaseType: $asm14.TypeRef("System.Attribute"), 
      Name: "ProtoBuf.ProtoAfterSerializationAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      ProtoAfterSerializationAttribute__ctor
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm14.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm14.System.AttributeTargets.Method]; });

})();

/* class ProtoBuf.ProtoBeforeDeserializationAttribute */ 

(function ProtoBeforeDeserializationAttribute$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm14.System.Attribute)) ();
  };


  function ProtoBeforeDeserializationAttribute__ctor () {
    $T00().prototype._ctor.call(this);
  }; 

  JSIL.MakeType({
      BaseType: $asm14.TypeRef("System.Attribute"), 
      Name: "ProtoBuf.ProtoBeforeDeserializationAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      ProtoBeforeDeserializationAttribute__ctor
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm14.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm14.System.AttributeTargets.Method]; });

})();

/* class ProtoBuf.ProtoAfterDeserializationAttribute */ 

(function ProtoAfterDeserializationAttribute$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm14.System.Attribute)) ();
  };


  function ProtoAfterDeserializationAttribute__ctor () {
    $T00().prototype._ctor.call(this);
  }; 

  JSIL.MakeType({
      BaseType: $asm14.TypeRef("System.Attribute"), 
      Name: "ProtoBuf.ProtoAfterDeserializationAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      ProtoAfterDeserializationAttribute__ctor
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm14.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm14.System.AttributeTargets.Method]; });

})();

/* enum ProtoBuf.DataFormat */ 

JSIL.MakeEnum(
  {
    FullName: "ProtoBuf.DataFormat", 
    BaseType: $asm14.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Default: 0, 
    ZigZag: 1, 
    TwosComplement: 2, 
    FixedSize: 3, 
    Group: 4, 
  }
);

/* class ProtoBuf.Extensible */ 

(function Extensible$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm14.System.Type)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0E.ProtoBuf.IExtensible)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm14.System.Int32)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0E.ProtoBuf.DataFormat)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm0E.ProtoBuf.ExtensibleUtil)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm0E.ProtoBuf.Meta.RuntimeTypeModel)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm0E.ProtoBuf.Meta.TypeModel)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm14.System.Object)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm14.System.Boolean)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm0E.ProtoBuf.IExtension)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm0E.ProtoBuf.BufferExtension)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm14.System.Collections.IEnumerator)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm14.System.IDisposable)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm14.System.Collections.IEnumerable)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm0E.TypeRef("ProtoBuf.IExtensible"), $asm14.TypeRef("System.Int32"), 
        $asm0E.TypeRef("ProtoBuf.DataFormat"), "!!0"
      ], ["TValue"]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature("!!0", [
        $asm0E.TypeRef("ProtoBuf.IExtensible"), $asm14.TypeRef("System.Int32"), 
        $asm0E.TypeRef("ProtoBuf.DataFormat")
      ], ["TValue"]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.MethodSignature($asm14.TypeRef("System.Boolean"), [
        $asm0E.TypeRef("ProtoBuf.IExtensible"), $asm14.TypeRef("System.Int32"), 
        $asm0E.TypeRef("ProtoBuf.DataFormat"), $jsilcore.TypeRef("JSIL.Reference", ["!!0"])
      ], ["TValue"]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.MethodSignature($asm14.TypeRef("System.Boolean"), [
        $asm0E.TypeRef("ProtoBuf.IExtensible"), $asm14.TypeRef("System.Int32"), 
        $asm0E.TypeRef("ProtoBuf.DataFormat"), $asm14.TypeRef("System.Boolean"), 
        $jsilcore.TypeRef("JSIL.Reference", ["!!0"])
      ], ["TValue"]))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm14.System.Collections.IEnumerator.MoveNext)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm14.System.IDisposable.Dispose)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm14.System.Collections.IEnumerable.GetEnumerator)) ();
  };
  var $IM03 = function () {
    return ($IM03 = JSIL.Memoize($asm14.System.Collections.IEnumerator.get_Current)) ();
  };


  function Extensible__ctor () {
  }; 

  function Extensible_AppendValue$b1$00 (TValue, instance, tag, value) {
    $S00().CallStatic($thisType, "AppendValue$b1", [TValue], instance, tag, $T03().Default, JSIL.CloneParameter(TValue, value));
  }; 

  function Extensible_AppendValue$b1$01 (TValue, instance, tag, format, value) {
    $T04().AppendExtendValue(
      $T05().get_Default(), 
      instance, 
      tag, 
      format, 
      JSIL.CloneParameter(TValue, value)
    );
  }; 

  function Extensible_AppendValue (model, instance, tag, format, value) {
    $T04().AppendExtendValue(
      model, 
      instance, 
      tag, 
      format, 
      value
    );
  }; 

  function Extensible_GetExtensionObject$02 (createIfMissing) {
    return $thisType.GetExtensionObject(/* ref */ new JSIL.MemberReference(this, "extensionObject"), createIfMissing);
  }; 

  function Extensible_GetExtensionObject$03 (/* ref */ extensionObject, createIfMissing) {
    var flag = createIfMissing && 
    (extensionObject.get() === null);
    if (flag) {
      extensionObject.set(new ($T0A())());
    }
    return extensionObject.get();
  }; 

  function Extensible_GetValue$b1$04 (TValue, instance, tag) {
    return $S01().CallStatic($thisType, "GetValue$b1", [TValue], instance, tag, $T03().Default);
  }; 

  function Extensible_GetValue$b1$05 (TValue, instance, tag, format) {
    var value = new JSIL.BoxedVariable((
        TValue.IsValueType
           ? JSIL.CreateInstanceOfType(TValue)
           : null)
    );
    $S02().CallStatic($thisType, "TryGetValue$b1", [TValue], instance, tag, format, /* ref */ value);
    return value.get();
  }; 

  function Extensible_GetValues$b1$06 (TValue, instance, tag) {
    return $T04().GetExtendedValues$b1(TValue)(
      instance, 
      tag, 
      $T03().Default, 
      false, 
      false
    );
  }; 

  function Extensible_GetValues$b1$07 (TValue, instance, tag, format) {
    return $T04().GetExtendedValues$b1(TValue)(
      instance, 
      tag, 
      format, 
      false, 
      false
    );
  }; 

  function Extensible_GetValues (model, type, instance, tag, format) {
    return $T04().GetExtendedValues(
      model, 
      type, 
      instance, 
      tag, 
      format, 
      false, 
      false
    );
  }; 

  function Extensible_ProtoBuf_IExtensible_GetExtensionObject (createIfMissing) {
    return this.GetExtensionObject(createIfMissing);
  }; 

  function Extensible_TryGetValue$b1$08 (TValue, instance, tag, /* ref */ value) {
    return $S02().CallStatic($thisType, "TryGetValue$b1", [TValue], instance, tag, $T03().Default, /* ref */ value);
  }; 

  function Extensible_TryGetValue$b1$09 (TValue, instance, tag, format, /* ref */ value) {
    return $S03().CallStatic($thisType, "TryGetValue$b1", [TValue], 
      instance, 
      tag, 
      format, 
      false, 
      /* ref */ value
    );
  }; 

  function Extensible_TryGetValue$b1$0A (TValue, instance, tag, format, allowDefinedTag, /* ref */ value) {
    var $im00 = $asm14.System.Collections.Generic.IEnumerable$b1.Of(TValue).GetEnumerator;
    var $im01 = $asm14.System.Collections.Generic.IEnumerator$b1.Of(TValue).get_Current;
    value.set((
        TValue.IsValueType
           ? JSIL.CreateInstanceOfType(TValue)
           : null)
    );
    var set = false;
    var enumerator = $im00.Call($T04().GetExtendedValues$b1(TValue)(
        instance, 
        tag, 
        format, 
        true, 
        allowDefinedTag
      ), null);
    try {

      while ($IM00().Call(enumerator, null)) {
        var val = $im01.Call(enumerator, null);
        value.set(val);
        set = true;
      }
    } finally {
      if (enumerator !== null) {
        $IM01().Call(enumerator, null);
      }
    }
    return set;
  }; 

  function Extensible_TryGetValue (model, type, instance, tag, format, allowDefinedTag, /* ref */ value) {
    value.set(null);
    var set = false;
    var enumerator = $IM02().Call($T04().GetExtendedValues(
        model, 
        type, 
        instance, 
        tag, 
        format, 
        true, 
        allowDefinedTag
      ), null);
    try {

      while ($IM00().Call(enumerator, null)) {
        var val = $IM03().Call(enumerator, null);
        value.set(val);
        set = true;
      }
    } finally {
      var disposable = $T0C().$As(enumerator);
      if (disposable !== null) {
        $IM01().Call(disposable, null);
      }
    }
    return set;
  }; 

  JSIL.MakeType({
      BaseType: $asm14.TypeRef("System.Object"), 
      Name: "ProtoBuf.Extensible", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void, 
      Extensible__ctor
    );

    $.Method({Static:true , Public:true }, "AppendValue", 
      new JSIL.MethodSignature(null, [
          $asm0E.TypeRef("ProtoBuf.IExtensible"), $.Int32, 
          "!!0"
        ], ["TValue"]), 
      Extensible_AppendValue$b1$00
    );

    $.Method({Static:true , Public:true }, "AppendValue", 
      new JSIL.MethodSignature(null, [
          $asm0E.TypeRef("ProtoBuf.IExtensible"), $.Int32, 
          $asm0E.TypeRef("ProtoBuf.DataFormat"), "!!0"
        ], ["TValue"]), 
      Extensible_AppendValue$b1$01
    );

    $.Method({Static:true , Public:true }, "AppendValue", 
      new JSIL.MethodSignature(null, [
          $asm0E.TypeRef("ProtoBuf.Meta.TypeModel"), $asm0E.TypeRef("ProtoBuf.IExtensible"), 
          $.Int32, $asm0E.TypeRef("ProtoBuf.DataFormat"), 
          $.Object
        ]), 
      Extensible_AppendValue
    );

    $.Method({Static:false, Public:false, Virtual:true }, "GetExtensionObject", 
      new JSIL.MethodSignature($asm0E.TypeRef("ProtoBuf.IExtension"), [$.Boolean]), 
      Extensible_GetExtensionObject$02
    );

    $.Method({Static:true , Public:true }, "GetExtensionObject", 
      new JSIL.MethodSignature($asm0E.TypeRef("ProtoBuf.IExtension"), [$jsilcore.TypeRef("JSIL.Reference", [$asm0E.TypeRef("ProtoBuf.IExtension")]), $.Boolean]), 
      Extensible_GetExtensionObject$03
    );

    $.Method({Static:true , Public:true }, "GetValue", 
      new JSIL.MethodSignature("!!0", [$asm0E.TypeRef("ProtoBuf.IExtensible"), $.Int32], ["TValue"]), 
      Extensible_GetValue$b1$04
    );

    $.Method({Static:true , Public:true }, "GetValue", 
      new JSIL.MethodSignature("!!0", [
          $asm0E.TypeRef("ProtoBuf.IExtensible"), $.Int32, 
          $asm0E.TypeRef("ProtoBuf.DataFormat")
        ], ["TValue"]), 
      Extensible_GetValue$b1$05
    );

    $.Method({Static:true , Public:true }, "GetValues", 
      new JSIL.MethodSignature($asm14.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm0E.TypeRef("ProtoBuf.IExtensible"), $.Int32], ["TValue"]), 
      Extensible_GetValues$b1$06
    );

    $.Method({Static:true , Public:true }, "GetValues", 
      new JSIL.MethodSignature($asm14.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [
          $asm0E.TypeRef("ProtoBuf.IExtensible"), $.Int32, 
          $asm0E.TypeRef("ProtoBuf.DataFormat")
        ], ["TValue"]), 
      Extensible_GetValues$b1$07
    );

    $.Method({Static:true , Public:true }, "GetValues", 
      new JSIL.MethodSignature($asm14.TypeRef("System.Collections.IEnumerable"), [
          $asm0E.TypeRef("ProtoBuf.Meta.TypeModel"), $asm14.TypeRef("System.Type"), 
          $asm0E.TypeRef("ProtoBuf.IExtensible"), $.Int32, 
          $asm0E.TypeRef("ProtoBuf.DataFormat")
        ]), 
      Extensible_GetValues
    );

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.IExtensible.GetExtensionObject", 
      new JSIL.MethodSignature($asm0E.TypeRef("ProtoBuf.IExtension"), [$.Boolean]), 
      Extensible_ProtoBuf_IExtensible_GetExtensionObject
    )
      .Overrides($asm0E.TypeRef("ProtoBuf.IExtensible"), "GetExtensionObject");

    $.Method({Static:true , Public:true }, "TryGetValue", 
      new JSIL.MethodSignature($.Boolean, [
          $asm0E.TypeRef("ProtoBuf.IExtensible"), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", ["!!0"])
        ], ["TValue"]), 
      Extensible_TryGetValue$b1$08
    );

    $.Method({Static:true , Public:true }, "TryGetValue", 
      new JSIL.MethodSignature($.Boolean, [
          $asm0E.TypeRef("ProtoBuf.IExtensible"), $.Int32, 
          $asm0E.TypeRef("ProtoBuf.DataFormat"), $jsilcore.TypeRef("JSIL.Reference", ["!!0"])
        ], ["TValue"]), 
      Extensible_TryGetValue$b1$09
    );

    $.Method({Static:true , Public:true }, "TryGetValue", 
      new JSIL.MethodSignature($.Boolean, [
          $asm0E.TypeRef("ProtoBuf.IExtensible"), $.Int32, 
          $asm0E.TypeRef("ProtoBuf.DataFormat"), $.Boolean, 
          $jsilcore.TypeRef("JSIL.Reference", ["!!0"])
        ], ["TValue"]), 
      Extensible_TryGetValue$b1$0A
    );

    $.Method({Static:true , Public:true }, "TryGetValue", 
      new JSIL.MethodSignature($.Boolean, [
          $asm0E.TypeRef("ProtoBuf.Meta.TypeModel"), $asm14.TypeRef("System.Type"), 
          $asm0E.TypeRef("ProtoBuf.IExtensible"), $.Int32, 
          $asm0E.TypeRef("ProtoBuf.DataFormat"), $.Boolean, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ]), 
      Extensible_TryGetValue
    );

    $.Field({Static:false, Public:false}, "extensionObject", $asm0E.TypeRef("ProtoBuf.IExtension"));

    $.ImplementInterfaces(
      /* 0 */ $asm0E.TypeRef("ProtoBuf.IExtensible")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ProtoBuf.ExtensibleUtil */ 

(function ExtensibleUtil$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0E.ProtoBuf.Meta.TypeModel)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0E.ProtoBuf.IExtensible)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm14.System.Int32)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0E.ProtoBuf.DataFormat)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm14.System.Object)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm14.System.Boolean)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm14.System.ArgumentNullException)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm0E.ProtoBuf.IExtension)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm14.System.InvalidOperationException)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm14.System.IO.Stream)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm0E.ProtoBuf.ProtoWriter)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm14.System.IDisposable)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm14.System.Type)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm0E.ProtoBuf.ExtensibleUtil_$lGetExtendedValues$gd__1)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm14.TypeRef("System.ArgumentNullException"), [$asm14.TypeRef("System.String")]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm14.TypeRef("System.InvalidOperationException"), [$asm14.TypeRef("System.String")]))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm0E.ProtoBuf.IExtensible.GetExtensionObject)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm0E.ProtoBuf.IExtension.BeginAppend)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm14.System.IDisposable.Dispose)) ();
  };
  var $IM03 = function () {
    return ($IM03 = JSIL.Memoize($asm0E.ProtoBuf.IExtension.EndAppend)) ();
  };


  function ExtensibleUtil_AppendExtendValue (model, instance, tag, format, value) {
    var flag = instance === null;
    if (flag) {
      throw $S00().Construct("instance");
    }
    if (value === null) {
      throw $S00().Construct("value");
    }
    var extn = $IM00().Call(instance, null, true);
    var flag3 = extn === null;
    if (flag3) {
      throw $S01().Construct("No extension object available; appended data would be lost.");
    }
    var commit = false;
    var stream = $IM01().Call(extn, null);
    try {
      var writer = new ($T0A())(stream, model, null);
      try {
        model.TrySerializeAuxiliaryType(
          writer, 
          null, 
          format, 
          tag, 
          value, 
          false
        );
        writer.Close();
      } finally {
        if (writer !== null) {
          $IM02().Call(writer, null);
        }
      }
      commit = true;
    } finally {
      $IM03().Call(extn, null, stream, commit);
    }
  }; 

  function ExtensibleUtil_GetExtendedValues$b1 (TValue, instance, tag, format, singleton, allowDefinedTag) {
    var expr_07 = new ($asm0E.ProtoBuf.ExtensibleUtil_$lGetExtendedValues$gd__0$b1.Of(TValue)) (-2);
    expr_07.$l$g3__instance = instance;
    expr_07.$l$g3__tag = (tag | 0);
    expr_07.$l$g3__format = format;
    expr_07.$l$g3__singleton = singleton;
    expr_07.$l$g3__allowDefinedTag = allowDefinedTag;
    return expr_07;
  }; 

  function ExtensibleUtil_GetExtendedValues (model, type, instance, tag, format, singleton, allowDefinedTag) {
    var expr_07 = new ($T0D())(-2);
    expr_07.$l$g3__model = model;
    expr_07.$l$g3__type = type;
    expr_07.$l$g3__instance = instance;
    expr_07.$l$g3__tag = (tag | 0);
    expr_07.$l$g3__format = format;
    expr_07.$l$g3__singleton = singleton;
    expr_07.$l$g3__allowDefinedTag = allowDefinedTag;
    return expr_07;
  }; 

  JSIL.MakeStaticClass("ProtoBuf.ExtensibleUtil", false, [], function ($ib) {
    $ = $ib;

    $.Method({Static:true , Public:false}, "AppendExtendValue", 
      new JSIL.MethodSignature(null, [
          $asm0E.TypeRef("ProtoBuf.Meta.TypeModel"), $asm0E.TypeRef("ProtoBuf.IExtensible"), 
          $.Int32, $asm0E.TypeRef("ProtoBuf.DataFormat"), 
          $.Object
        ]), 
      ExtensibleUtil_AppendExtendValue
    );

    $.Method({Static:true , Public:false}, "GetExtendedValues", 
      new JSIL.MethodSignature($asm14.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [
          $asm0E.TypeRef("ProtoBuf.IExtensible"), $.Int32, 
          $asm0E.TypeRef("ProtoBuf.DataFormat"), $.Boolean, 
          $.Boolean
        ], ["TValue"]), 
      ExtensibleUtil_GetExtendedValues$b1
    );

    $.Method({Static:true , Public:false}, "GetExtendedValues", 
      new JSIL.MethodSignature($asm14.TypeRef("System.Collections.IEnumerable"), [
          $asm0E.TypeRef("ProtoBuf.Meta.TypeModel"), $asm14.TypeRef("System.Type"), 
          $asm0E.TypeRef("ProtoBuf.IExtensible"), $.Int32, 
          $asm0E.TypeRef("ProtoBuf.DataFormat"), $.Boolean, 
          $.Boolean
        ]), 
      ExtensibleUtil_GetExtendedValues
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ProtoBuf.ExtensibleUtil+<GetExtendedValues>d__0`1 */ 

(function $lGetExtendedValues$gd__0$b1$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm14.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm14.System.Threading.Thread)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm14.System.IDisposable)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm14.System.Exception)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm14.System.Boolean)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm14.System.Collections.IEnumerable)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm0E.ProtoBuf.ExtensibleUtil)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm0E.ProtoBuf.Meta.RuntimeTypeModel)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm14.System.Collections.IEnumerator)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm14.System.NotSupportedException)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm14.TypeRef("System.NotSupportedException"), null))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm14.System.IDisposable.Dispose)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm14.System.Collections.IEnumerable.GetEnumerator)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm14.System.Collections.IEnumerator.MoveNext)) ();
  };
  var $IM03 = function () {
    return ($IM03 = JSIL.Memoize($asm14.System.Collections.IEnumerator.get_Current)) ();
  };


  function $lGetExtendedValues$gd__0$b1__ctor ($l$g1__state) {
    this.$l$g1__state = ($l$g1__state | 0);
    this.$l$gl__initialThreadId = ($T01().get_CurrentThread().get_ManagedThreadId() | 0);
  }; 

  function $lGetExtendedValues$gd__0$b1_$l$gm__Finally1 () {
    this.$l$g1__state = -1;
    var disposable = $T02().$As(this.$l$gs__1);
    if (disposable !== null) {
      $IM00().Call(disposable, null);
    }
  }; 

  function $lGetExtendedValues$gd__0$b1_MoveNext ($exception) {
    try {
      var num = (this.$l$g1__state | 0);
      if (num !== 0) {
        if (num !== 1) {
          var result = false;
          return result;
        }
        this.$l$g1__state = -3;
        this.$lvalue$g5__2 = (
          $thisType.TValue.get(this).IsValueType
             ? JSIL.CreateInstanceOfType($thisType.TValue.get(this))
             : null)
        ;
      } else {
        this.$l$g1__state = -1;
        this.$l$gs__1 = $IM01().Call($T06().GetExtendedValues(
            $T07().get_Default(), 
            $thisType.TValue.get(this), 
            this.instance, 
            this.tag, 
            this.format, 
            this.singleton, 
            this.allowDefinedTag
          ), null);
        this.$l$g1__state = -3;
      }
      if (!$IM02().Call(this.$l$gs__1, null)) {
        this.$l$gm__Finally1();
        this.$l$gs__1 = null;
        result = false;
      } else {
        this.$lvalue$g5__2 = JSIL.CloneParameter($thisType.TValue.get(this), $thisType.TValue.get(this).$Cast($IM03().Call(this.$l$gs__1, null)));
        this.$l$g2__current = JSIL.CloneParameter($thisType.TValue.get(this), this.$lvalue$g5__2);
        this.$l$g1__state = 1;
        result = true;
      }
    } catch ($exception) {
      this.System_IDisposable_Dispose();
      throw $exception;
    }
    return result;
  }; 

  function $lGetExtendedValues$gd__0$b1_System_Collections_Generic_IEnumerable$lTValue$g_GetEnumerator () {
    if (!(((this.$l$g1__state | 0) !== -2) || ((this.$l$gl__initialThreadId | 0) !== ($T01().get_CurrentThread().get_ManagedThreadId() | 0)))) {
      this.$l$g1__state = 0;
      var $lGetExtendedValues$gd__ = this;
    } else {
      $lGetExtendedValues$gd__ = new ($thisType.Of($thisType.TValue.get(this))) (0);
    }
    $lGetExtendedValues$gd__.instance = this.$l$g3__instance;
    $lGetExtendedValues$gd__.tag = (this.$l$g3__tag | 0);
    $lGetExtendedValues$gd__.format = this.$l$g3__format;
    $lGetExtendedValues$gd__.singleton = this.$l$g3__singleton;
    $lGetExtendedValues$gd__.allowDefinedTag = this.$l$g3__allowDefinedTag;
    return $lGetExtendedValues$gd__;
  }; 

  function $lGetExtendedValues$gd__0$b1_System_Collections_Generic_IEnumerator$lTValue$g_get_Current () {
    return this.$l$g2__current;
  }; 

  function $lGetExtendedValues$gd__0$b1_System_Collections_IEnumerable_GetEnumerator () {
    return this.System_Collections_Generic_IEnumerable$lTValue$g_GetEnumerator();
  }; 

  function $lGetExtendedValues$gd__0$b1_System_Collections_IEnumerator_get_Current () {
    return this.$l$g2__current;
  }; 

  function $lGetExtendedValues$gd__0$b1_System_Collections_IEnumerator_Reset () {
    throw $S00().Construct();
  }; 

  function $lGetExtendedValues$gd__0$b1_System_IDisposable_Dispose () {
    var num = (this.$l$g1__state | 0);
    if ((num === -3) || (num === 1)) {
      try {
      } finally {
        this.$l$gm__Finally1();
      }
    }
  }; 

  JSIL.MakeType({
      BaseType: $asm14.TypeRef("System.Object"), 
      Name: "ProtoBuf.ExtensibleUtil+<GetExtendedValues>d__0`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TValue"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32), 
      $lGetExtendedValues$gd__0$b1__ctor
    )
      .Attribute($asm14.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false}, "$l$gm__Finally1", 
      JSIL.MethodSignature.Void, 
      $lGetExtendedValues$gd__0$b1_$l$gm__Finally1
    );

    $.Method({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean), 
      $lGetExtendedValues$gd__0$b1_MoveNext
    )
      .Overrides($asm14.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTValue$g.GetEnumerator", 
      new JSIL.MethodSignature($asm14.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TValue")]), null), 
      $lGetExtendedValues$gd__0$b1_System_Collections_Generic_IEnumerable$lTValue$g_GetEnumerator
    )
      .Overrides($asm14.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TValue")]), "GetEnumerator")
      .Attribute($asm14.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTValue$g.get_Current", 
      new JSIL.MethodSignature($.GenericParameter("TValue"), null), 
      $lGetExtendedValues$gd__0$b1_System_Collections_Generic_IEnumerator$lTValue$g_get_Current
    )
      .Overrides($asm14.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TValue")]), "get_Current")
      .Attribute($asm14.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm14.TypeRef("System.Collections.IEnumerator")), 
      $lGetExtendedValues$gd__0$b1_System_Collections_IEnumerable_GetEnumerator
    )
      .Overrides($asm14.TypeRef("System.Collections.IEnumerable"), "GetEnumerator")
      .Attribute($asm14.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object), 
      $lGetExtendedValues$gd__0$b1_System_Collections_IEnumerator_get_Current
    )
      .Overrides($asm14.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm14.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void, 
      $lGetExtendedValues$gd__0$b1_System_Collections_IEnumerator_Reset
    )
      .Overrides($asm14.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm14.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void, 
      $lGetExtendedValues$gd__0$b1_System_IDisposable_Dispose
    )
      .Overrides($asm14.TypeRef("System.IDisposable"), "Dispose")
      .Attribute($asm14.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $.GenericParameter("TValue"));

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:false}, "instance", $asm0E.TypeRef("ProtoBuf.IExtensible"));

    $.Field({Static:false, Public:true }, "$l$g3__instance", $asm0E.TypeRef("ProtoBuf.IExtensible"));

    $.Field({Static:false, Public:false}, "tag", $.Int32);

    $.Field({Static:false, Public:true }, "$l$g3__tag", $.Int32);

    $.Field({Static:false, Public:false}, "format", $asm0E.TypeRef("ProtoBuf.DataFormat"));

    $.Field({Static:false, Public:true }, "$l$g3__format", $asm0E.TypeRef("ProtoBuf.DataFormat"));

    $.Field({Static:false, Public:false}, "singleton", $.Boolean);

    $.Field({Static:false, Public:true }, "$l$g3__singleton", $.Boolean);

    $.Field({Static:false, Public:false}, "allowDefinedTag", $.Boolean);

    $.Field({Static:false, Public:true }, "$l$g3__allowDefinedTag", $.Boolean);

    $.Field({Static:false, Public:false}, "$l$gs__1", $asm14.TypeRef("System.Collections.IEnumerator"));

    $.Field({Static:false, Public:false}, "$lvalue$g5__2", $.GenericParameter("TValue"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTValue$g.Current", $.GenericParameter("TValue"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm14.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TValue")]), 
      /* 1 */ $asm14.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm14.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TValue")]), 
      /* 3 */ $asm14.TypeRef("System.Collections.IEnumerator"), 
      /* 4 */ $asm14.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm14.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class ProtoBuf.ExtensibleUtil+<GetExtendedValues>d__1 */ 

(function $lGetExtendedValues$gd__1$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm14.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm14.System.Threading.Thread)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0E.ProtoBuf.ProtoReader)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0E.ProtoBuf.IExtension)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm14.System.Exception)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm14.System.ArgumentNullException)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm14.System.ArgumentOutOfRangeException)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm0E.ProtoBuf.IExtensible)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm14.System.Boolean)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm0E.ProtoBuf.SerializationContext)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm0E.ProtoBuf.Meta.TypeModel)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm14.System.NotSupportedException)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm14.TypeRef("System.ArgumentNullException"), [$asm14.TypeRef("System.String")]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm14.TypeRef("System.ArgumentOutOfRangeException"), [$asm14.TypeRef("System.String")]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm14.TypeRef("System.NotSupportedException"), null))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm0E.ProtoBuf.IExtension.EndQuery)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm0E.ProtoBuf.IExtensible.GetExtensionObject)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm0E.ProtoBuf.IExtension.BeginQuery)) ();
  };


  function $lGetExtendedValues$gd__1__ctor ($l$g1__state) {
    this.$l$g1__state = ($l$g1__state | 0);
    this.$l$gl__initialThreadId = ($T01().get_CurrentThread().get_ManagedThreadId() | 0);
  }; 

  function $lGetExtendedValues$gd__1_$l$gm__Finally1 () {
    this.$l$g1__state = -1;
    $T02().Recycle(this.$lreader$g5__4);
    $IM00().Call(this.$lextn$g5__1, null, this.$lstream$g5__2);
  }; 

  function $lGetExtendedValues$gd__1_MoveNext ($exception) {
    try {

      var $label0 = 0;
    $labelgroup0: 
      while (true) {
        switch ($label0) {
          case 0: /* $entry0 */ 
            switch (this.$l$g1__state) {
              case 0: 
                this.$l$g1__state = -1;
                if (this.instance === null) {
                  throw $S00().Construct("instance");
                }
                if ((this.tag | 0) <= 0) {
                  throw $S01().Construct("tag");
                }
                this.$lextn$g5__1 = $IM01().Call(this.instance, null, false);
                if (this.$lextn$g5__1 === null) {
                  var result = false;
                  return result;
                }
                this.$lstream$g5__2 = $IM02().Call(this.$lextn$g5__1, null);
                this.$lvalue$g5__3 = null;
                this.$lreader$g5__4 = null;
                this.$l$g1__state = -3;
                this.$lctx$g5__5 = new ($T09())();
                this.$lreader$g5__4 = $T02().Create(this.$lstream$g5__2, this.model, this.$lctx$g5__5, -1);
                break;

              case 1: 
                this.$l$g1__state = -3;
                this.$lvalue$g5__3 = null;
                break;

              case 2: 
                this.$l$g1__state = -3;
                $label0 = 2 /* goto IL_19D */ ;
                continue $labelgroup0;

              default: 
                result = false;
                return result;

            }

            $label0 = 1 /* goto IL_120 */ ;
            continue $labelgroup0;
          case 1: /* IL_120 */ 
            if (!((this.model).TryDeserializeAuxiliaryType(
                  this.$lreader$g5__4, 
                  this.format, 
                  this.tag, 
                  this.type, 
                  /* ref */ new JSIL.MemberReference(this, "$lvalue$g5__3"), 
                  true, 
                  false, 
                  false, 
                  false
                ) && (this.$lvalue$g5__3 !== null))) {
              if (this.singleton && (this.$lvalue$g5__3 !== null)) {
                this.$l$g2__current = this.$lvalue$g5__3;
                this.$l$g1__state = 2;
                result = true;
                return result;
              }
            } else {
              if (!this.singleton) {
                this.$l$g2__current = this.$lvalue$g5__3;
                this.$l$g1__state = 1;
                result = true;
                return result;
              }
              $label0 = 1 /* goto IL_120 */ ;
              continue $labelgroup0;
            }

            $label0 = 2 /* goto IL_19D */ ;
            continue $labelgroup0;
          case 2: /* IL_19D */ 
            this.$lctx$g5__5 = null;
            this.$l$gm__Finally1();
            result = false;

            break $labelgroup0;
        }
      }
    } catch ($exception) {
      this.System_IDisposable_Dispose();
      throw $exception;
    }
    return result;
  }; 

  function $lGetExtendedValues$gd__1_System_Collections_Generic_IEnumerable$lSystem_Object$g_GetEnumerator () {
    if (!(((this.$l$g1__state | 0) !== -2) || ((this.$l$gl__initialThreadId | 0) !== ($T01().get_CurrentThread().get_ManagedThreadId() | 0)))) {
      this.$l$g1__state = 0;
      var $lGetExtendedValues$gd__ = this;
    } else {
      $lGetExtendedValues$gd__ = new $thisType(0);
    }
    $lGetExtendedValues$gd__.model = this.$l$g3__model;
    $lGetExtendedValues$gd__.type = this.$l$g3__type;
    $lGetExtendedValues$gd__.instance = this.$l$g3__instance;
    $lGetExtendedValues$gd__.tag = (this.$l$g3__tag | 0);
    $lGetExtendedValues$gd__.format = this.$l$g3__format;
    $lGetExtendedValues$gd__.singleton = this.$l$g3__singleton;
    $lGetExtendedValues$gd__.allowDefinedTag = this.$l$g3__allowDefinedTag;
    return $lGetExtendedValues$gd__;
  }; 

  function $lGetExtendedValues$gd__1_System_Collections_Generic_IEnumerator$lSystem_Object$g_get_Current () {
    return this.$l$g2__current;
  }; 

  function $lGetExtendedValues$gd__1_System_Collections_IEnumerable_GetEnumerator () {
    return this.System_Collections_Generic_IEnumerable$lSystem_Object$g_GetEnumerator();
  }; 

  function $lGetExtendedValues$gd__1_System_Collections_IEnumerator_get_Current () {
    return this.$l$g2__current;
  }; 

  function $lGetExtendedValues$gd__1_System_Collections_IEnumerator_Reset () {
    throw $S02().Construct();
  }; 

  function $lGetExtendedValues$gd__1_System_IDisposable_Dispose () {
    var num = (this.$l$g1__state | 0);
    if ((num === -3) || 
      (num === 1) || (num === 2)) {
      try {
      } finally {
        this.$l$gm__Finally1();
      }
    }
  }; 

  JSIL.MakeType({
      BaseType: $asm14.TypeRef("System.Object"), 
      Name: "ProtoBuf.ExtensibleUtil+<GetExtendedValues>d__1", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32), 
      $lGetExtendedValues$gd__1__ctor
    )
      .Attribute($asm14.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false}, "$l$gm__Finally1", 
      JSIL.MethodSignature.Void, 
      $lGetExtendedValues$gd__1_$l$gm__Finally1
    );

    $.Method({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean), 
      $lGetExtendedValues$gd__1_MoveNext
    )
      .Overrides($asm14.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lSystem.Object$g.GetEnumerator", 
      JSIL.MethodSignature.Return($asm14.TypeRef("System.Collections.Generic.IEnumerator`1", [$.Object])), 
      $lGetExtendedValues$gd__1_System_Collections_Generic_IEnumerable$lSystem_Object$g_GetEnumerator
    )
      .Overrides($asm14.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm14.TypeRef("System.Object")]), "GetEnumerator")
      .Attribute($asm14.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Object$g.get_Current", 
      JSIL.MethodSignature.Return($.Object), 
      $lGetExtendedValues$gd__1_System_Collections_Generic_IEnumerator$lSystem_Object$g_get_Current
    )
      .Overrides($asm14.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm14.TypeRef("System.Object")]), "get_Current")
      .Attribute($asm14.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm14.TypeRef("System.Collections.IEnumerator")), 
      $lGetExtendedValues$gd__1_System_Collections_IEnumerable_GetEnumerator
    )
      .Overrides($asm14.TypeRef("System.Collections.IEnumerable"), "GetEnumerator")
      .Attribute($asm14.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object), 
      $lGetExtendedValues$gd__1_System_Collections_IEnumerator_get_Current
    )
      .Overrides($asm14.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm14.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void, 
      $lGetExtendedValues$gd__1_System_Collections_IEnumerator_Reset
    )
      .Overrides($asm14.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm14.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void, 
      $lGetExtendedValues$gd__1_System_IDisposable_Dispose
    )
      .Overrides($asm14.TypeRef("System.IDisposable"), "Dispose")
      .Attribute($asm14.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $.Object);

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:false}, "model", $asm0E.TypeRef("ProtoBuf.Meta.TypeModel"));

    $.Field({Static:false, Public:true }, "$l$g3__model", $asm0E.TypeRef("ProtoBuf.Meta.TypeModel"));

    $.Field({Static:false, Public:false}, "type", $asm14.TypeRef("System.Type"));

    $.Field({Static:false, Public:true }, "$l$g3__type", $asm14.TypeRef("System.Type"));

    $.Field({Static:false, Public:false}, "instance", $asm0E.TypeRef("ProtoBuf.IExtensible"));

    $.Field({Static:false, Public:true }, "$l$g3__instance", $asm0E.TypeRef("ProtoBuf.IExtensible"));

    $.Field({Static:false, Public:false}, "tag", $.Int32);

    $.Field({Static:false, Public:true }, "$l$g3__tag", $.Int32);

    $.Field({Static:false, Public:false}, "format", $asm0E.TypeRef("ProtoBuf.DataFormat"));

    $.Field({Static:false, Public:true }, "$l$g3__format", $asm0E.TypeRef("ProtoBuf.DataFormat"));

    $.Field({Static:false, Public:false}, "singleton", $.Boolean);

    $.Field({Static:false, Public:true }, "$l$g3__singleton", $.Boolean);

    $.Field({Static:false, Public:false}, "allowDefinedTag", $.Boolean);

    $.Field({Static:false, Public:true }, "$l$g3__allowDefinedTag", $.Boolean);

    $.Field({Static:false, Public:false}, "$lextn$g5__1", $asm0E.TypeRef("ProtoBuf.IExtension"));

    $.Field({Static:false, Public:false}, "$lstream$g5__2", $asm14.TypeRef("System.IO.Stream"));

    $.Field({Static:false, Public:false}, "$lvalue$g5__3", $.Object);

    $.Field({Static:false, Public:false}, "$lreader$g5__4", $asm0E.TypeRef("ProtoBuf.ProtoReader"));

    $.Field({Static:false, Public:false}, "$lctx$g5__5", $asm0E.TypeRef("ProtoBuf.SerializationContext"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Object$g.Current", $.Object);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm14.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Object]), 
      /* 1 */ $asm14.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm14.TypeRef("System.Collections.Generic.IEnumerator`1", [$.Object]), 
      /* 3 */ $asm14.TypeRef("System.Collections.IEnumerator"), 
      /* 4 */ $asm14.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm14.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class ProtoBuf.Helpers */ 

(function Helpers$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm14.System.Type)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm14.System.Text.StringBuilder)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize(System.Array.Of($asm14.System.Byte))) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm14.System.Int32)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm14.System.Buffer)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm14.System.Boolean)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm14.System.String)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize(System.Array.Of($asm14.System.Object))) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm14.System.Object)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize(System.Array.Of($asm14.System.Type))) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm14.System.Reflection.ConstructorInfo)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm14.System.Reflection.MethodBase)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm14.System.Reflection.BindingFlags)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm14.System.Reflection.PropertyInfo)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm14.System.Reflection.MethodInfo)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize(System.Array.Of($asm14.System.Reflection.PropertyInfo))) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize(System.Array.Of($asm14.System.Reflection.FieldInfo))) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize(System.Array.Of($asm14.System.Reflection.MemberInfo))) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm14.System.Reflection.MemberInfo)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm14.System.Array)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm14.System.Reflection.FieldInfo)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm14.System.TypeCode)) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm0E.ProtoBuf.ProtoTypeCode)) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm14.System.TimeSpan)) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize($asm14.System.Guid)) ();
  };
  var $T19 = function () {
    return ($T19 = JSIL.Memoize($asm0F.System.Uri)) ();
  };
  var $T1A = function () {
    return ($T1A = JSIL.Memoize($asm14.System.Nullable)) ();
  };
  var $T1B = function () {
    return ($T1B = JSIL.Memoize($asm14.System.Single)) ();
  };
  var $T1C = function () {
    return ($T1C = JSIL.Memoize($asm14.System.Double)) ();
  };
  var $T1D = function () {
    return ($T1D = JSIL.Memoize($asm14.System.Enum)) ();
  };
  var $T1E = function () {
    return ($T1E = JSIL.Memoize(System.Array.Of($asm14.System.Int32))) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature($asm14.TypeRef("System.Reflection.MethodInfo"), [$asm14.TypeRef("System.String"), $asm14.TypeRef("System.Reflection.BindingFlags")]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature($asm14.TypeRef("System.Reflection.MethodInfo"), [$asm14.TypeRef("System.String"), $jsilcore.TypeRef("System.Array", [$asm14.TypeRef("System.Type")])]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.MethodSignature($asm14.TypeRef("System.Reflection.PropertyInfo"), [$asm14.TypeRef("System.String"), $asm14.TypeRef("System.Reflection.BindingFlags")]))) ();
  };


  function Helpers__ctor () {
  }; 

  function Helpers_AppendLine (builder) {
    return builder.AppendLine();
  }; 

  function Helpers_BlockCopy (from, fromIndex, to, toIndex, count) {
    $T04().BlockCopy(
      from, 
      fromIndex, 
      to, 
      toIndex, 
      count
    );
  }; 

  function Helpers_DebugAssert$00 (condition, message) {
  }; 

  function Helpers_DebugAssert$01 (condition, message, args) {
  }; 

  function Helpers_DebugAssert$02 (condition) {
  }; 

  function Helpers_DebugWriteLine$03 (message, obj) {
  }; 

  function Helpers_DebugWriteLine$04 (message) {
  }; 

  function Helpers_GetConstructor (type, parameterTypes, nonPublic) {
    var ctor = type.GetConstructor(parameterTypes);
    return (
      ((ctor !== null) && (nonPublic || 
          ctor.get_IsPublic()))
         ? ctor
         : null)
    ;
  }; 

  function Helpers_GetConstructors (type, nonPublic) {
    return type.GetConstructors((
        nonPublic
           ? $T0C().$Flags("Instance", "NonPublic", "Public")
           : $T0C().$Flags("Instance", "Public"))
    );
  }; 

  function Helpers_GetGetMethod (property, nonPublic, allowInternal) {
    var flag = property === null;
    if (flag) {
      var result = null;
    } else {
      var method = property.GetGetMethod(nonPublic);
      var flag2 = ((method === null) && 
        !nonPublic) & allowInternal;
      if (flag2) {
        method = property.GetGetMethod(true);
        var flag3 = (method === null) && 
        !method.get_IsAssembly() && 
        !method.get_IsFamilyOrAssembly();
        if (flag3) {
          method = null;
        }
      }
      result = method;
    }
    return result;
  }; 

  function Helpers_GetInstanceFieldsAndProperties (type, publicOnly) {
    var flags = (
      publicOnly
         ? $T0C().$Flags("Instance", "Public")
         : $T0C().$Flags("Instance", "NonPublic", "Public"))
    ;
    var props = type.GetProperties(flags);
    var fields = type.GetFields(flags);
    var members = JSIL.Array.New($T12(), (((fields.length | 0) + (props.length | 0)) | 0));
    JSIL.Array.CopyTo(props, members, 0);
    JSIL.Array.CopyTo(fields, members, props.length);
    return members;
  }; 

  function Helpers_GetInstanceMethod$05 (declaringType, name) {
    return $S00().CallVirtual("GetMethod", null, declaringType, name, $T0C().$Flags("Instance", "NonPublic", "Public"));
  }; 

  function Helpers_GetInstanceMethod$06 (declaringType, name, types) {
    var flag = types === null;
    if (flag) {
      types = $thisType.EmptyTypes;
    }
    var method = $S01().CallVirtual("GetMethod", null, declaringType, name, types);
    var flag2 = (method !== null) && 
    method.get_IsStatic();
    if (flag2) {
      method = null;
    }
    return method;
  }; 

  function Helpers_GetMemberType (member) {
    var prop = $T0D().$As(member);
    if (prop !== null) {
      var result = prop.get_PropertyType();
    } else {
      var fld = $T14().$As(member);
      result = (
        (fld === null)
           ? null
           : fld.get_FieldType())
      ;
    }
    return result;
  }; 

  function Helpers_GetProperty (type, name, nonPublic) {
    return $S02().CallVirtual("GetProperty", null, type, name, (
        nonPublic
           ? $T0C().$Flags("Instance", "NonPublic", "Public")
           : $T0C().$Flags("Instance", "Public"))
    );
  }; 

  function Helpers_GetSetMethod (property, nonPublic, allowInternal) {
    var flag = property === null;
    if (flag) {
      var result = null;
    } else {
      var method = property.GetSetMethod(nonPublic);
      var flag2 = ((method === null) && 
        !nonPublic) & allowInternal;
      if (flag2) {
        method = property.GetGetMethod(true);
        var flag3 = (method === null) && 
        !method.get_IsAssembly() && 
        !method.get_IsFamilyOrAssembly();
        if (flag3) {
          method = null;
        }
      }
      result = method;
    }
    return result;
  }; 

  function Helpers_GetStaticMethod (declaringType, name) {
    return $S00().CallVirtual("GetMethod", null, declaringType, name, $T0C().$Flags("NonPublic", "Public", "Static"));
  }; 

  function Helpers_GetTypeCode (type) {
    var code = $T00().GetTypeCode(type);
    switch (code.valueOf()) {
      case 0: 
      case 3: 
      case 4: 
      case 5: 
      case 6: 
      case 7: 
      case 8: 
      case 9: 
      case 10: 
      case 11: 
      case 12: 
      case 13: 
      case 14: 
      case 15: 
      case 16: 
      case 18: 
        var result = $T16().$Cast(code);
        return result;

    }
    var flag = type === $T17().__Type__;
    if (flag) {
      result = $T16().TimeSpan;
    } else {
      var flag2 = type === $T18().__Type__;
      if (flag2) {
        result = $T16().Guid;
      } else {
        var flag3 = type === $T19().__Type__;
        if (flag3) {
          result = $T16().Uri;
        } else {
          var flag4 = type === $T02().__Type__;
          if (flag4) {
            result = $T16().ByteArray;
          } else {
            var flag5 = type === $T00().__Type__;
            if (flag5) {
              result = $T16().Type;
            } else {
              result = $T16().Unknown;
            }
          }
        }
      }
    }
    return result;
  }; 

  function Helpers_GetUnderlyingType (type) {
    return $T1A().GetUnderlyingType(type);
  }; 

  function Helpers_IsAssignableFrom (target, type) {
    return target.IsAssignableFrom(type);
  }; 

  function Helpers_IsEnum (type) {
    return type.get_IsEnum();
  }; 

  function Helpers_IsInfinity$07 (value) {
    return $T1B().IsInfinity(value);
  }; 

  function Helpers_IsInfinity$08 (value) {
    return $T1C().IsInfinity(value);
  }; 

  function Helpers_IsNullOrEmpty (value) {
    return ((value === null) || ((value.length | 0) === 0));
  }; 

  function Helpers_IsSubclassOf (type, baseClass) {
    return type.IsSubclassOf(baseClass);
  }; 

  function Helpers_IsValueType (type) {
    return type.get_IsValueType();
  }; 

  function Helpers_ParseEnum (type, value) {
    return $T1D().Parse(type, value, true);
  }; 

  function Helpers_Sort (keys, values) {

    do {
      var swapped = false;

      for (var i = 1; i < (keys.length | 0); ) {
        var flag = (keys[((i - 1) | 0)] | 0) > (keys[i] | 0);
        if (flag) {
          var tmpKey = (keys[i] | 0);
          keys[i] = (keys[((i - 1) | 0)] | 0);
          keys[((i - 1) | 0)] = tmpKey;
          var tmpValue = values[i];
          values[i] = values[((i - 1) | 0)];
          values[((i - 1) | 0)] = tmpValue;
          swapped = true;
        }
        var num = i;
        i = ((num + 1) | 0);
      }
    } while (swapped);
  }; 

  function Helpers_TraceWriteLine (message) {
  }; 

  JSIL.MakeType({
      BaseType: $asm14.TypeRef("System.Object"), 
      Name: "ProtoBuf.Helpers", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void, 
      Helpers__ctor
    );

    $.Method({Static:true , Public:true }, "AppendLine", 
      new JSIL.MethodSignature($asm14.TypeRef("System.Text.StringBuilder"), [$asm14.TypeRef("System.Text.StringBuilder")]), 
      Helpers_AppendLine
    );

    $.Method({Static:true , Public:true }, "BlockCopy", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ]), 
      Helpers_BlockCopy
    );

    $.Method({Static:true , Public:true }, "DebugAssert", 
      new JSIL.MethodSignature(null, [$.Boolean, $.String]), 
      Helpers_DebugAssert$00
    )
      .Attribute($asm14.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

    $.Method({Static:true , Public:true }, "DebugAssert", 
      new JSIL.MethodSignature(null, [
          $.Boolean, $.String, 
          $jsilcore.TypeRef("System.Array", [$.Object])
        ]), 
      Helpers_DebugAssert$01
    )
      .Attribute($asm14.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; })
      .Parameter(2, "args", function (_) {
          _.Attribute($asm14.TypeRef("System.ParamArrayAttribute"))
        });

    $.Method({Static:true , Public:true }, "DebugAssert", 
      JSIL.MethodSignature.Action($.Boolean), 
      Helpers_DebugAssert$02
    )
      .Attribute($asm14.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

    $.Method({Static:true , Public:true }, "DebugWriteLine", 
      new JSIL.MethodSignature(null, [$.String, $.Object]), 
      Helpers_DebugWriteLine$03
    )
      .Attribute($asm14.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

    $.Method({Static:true , Public:true }, "DebugWriteLine", 
      JSIL.MethodSignature.Action($.String), 
      Helpers_DebugWriteLine$04
    )
      .Attribute($asm14.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

    $.Method({Static:true , Public:false}, "GetConstructor", 
      new JSIL.MethodSignature($asm14.TypeRef("System.Reflection.ConstructorInfo"), [
          $asm14.TypeRef("System.Type"), $jsilcore.TypeRef("System.Array", [$asm14.TypeRef("System.Type")]), 
          $.Boolean
        ]), 
      Helpers_GetConstructor
    );

    $.Method({Static:true , Public:false}, "GetConstructors", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm14.TypeRef("System.Reflection.ConstructorInfo")]), [$asm14.TypeRef("System.Type"), $.Boolean]), 
      Helpers_GetConstructors
    );

    $.Method({Static:true , Public:false}, "GetGetMethod", 
      new JSIL.MethodSignature($asm14.TypeRef("System.Reflection.MethodInfo"), [
          $asm14.TypeRef("System.Reflection.PropertyInfo"), $.Boolean, 
          $.Boolean
        ]), 
      Helpers_GetGetMethod
    );

    $.Method({Static:true , Public:false}, "GetInstanceFieldsAndProperties", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm14.TypeRef("System.Reflection.MemberInfo")]), [$asm14.TypeRef("System.Type"), $.Boolean]), 
      Helpers_GetInstanceFieldsAndProperties
    );

    $.Method({Static:true , Public:false}, "GetInstanceMethod", 
      new JSIL.MethodSignature($asm14.TypeRef("System.Reflection.MethodInfo"), [$asm14.TypeRef("System.Type"), $.String]), 
      Helpers_GetInstanceMethod$05
    );

    $.Method({Static:true , Public:false}, "GetInstanceMethod", 
      new JSIL.MethodSignature($asm14.TypeRef("System.Reflection.MethodInfo"), [
          $asm14.TypeRef("System.Type"), $.String, 
          $jsilcore.TypeRef("System.Array", [$asm14.TypeRef("System.Type")])
        ]), 
      Helpers_GetInstanceMethod$06
    );

    $.Method({Static:true , Public:false}, "GetMemberType", 
      new JSIL.MethodSignature($asm14.TypeRef("System.Type"), [$asm14.TypeRef("System.Reflection.MemberInfo")]), 
      Helpers_GetMemberType
    );

    $.Method({Static:true , Public:false}, "GetProperty", 
      new JSIL.MethodSignature($asm14.TypeRef("System.Reflection.PropertyInfo"), [
          $asm14.TypeRef("System.Type"), $.String, 
          $.Boolean
        ]), 
      Helpers_GetProperty
    );

    $.Method({Static:true , Public:false}, "GetSetMethod", 
      new JSIL.MethodSignature($asm14.TypeRef("System.Reflection.MethodInfo"), [
          $asm14.TypeRef("System.Reflection.PropertyInfo"), $.Boolean, 
          $.Boolean
        ]), 
      Helpers_GetSetMethod
    );

    $.Method({Static:true , Public:false}, "GetStaticMethod", 
      new JSIL.MethodSignature($asm14.TypeRef("System.Reflection.MethodInfo"), [$asm14.TypeRef("System.Type"), $.String]), 
      Helpers_GetStaticMethod
    );

    $.Method({Static:true , Public:true }, "GetTypeCode", 
      new JSIL.MethodSignature($asm0E.TypeRef("ProtoBuf.ProtoTypeCode"), [$asm14.TypeRef("System.Type")]), 
      Helpers_GetTypeCode
    );

    $.Method({Static:true , Public:false}, "GetUnderlyingType", 
      new JSIL.MethodSignature($asm14.TypeRef("System.Type"), [$asm14.TypeRef("System.Type")]), 
      Helpers_GetUnderlyingType
    );

    $.Method({Static:true , Public:false}, "IsAssignableFrom", 
      new JSIL.MethodSignature($.Boolean, [$asm14.TypeRef("System.Type"), $asm14.TypeRef("System.Type")]), 
      Helpers_IsAssignableFrom
    );

    $.Method({Static:true , Public:false}, "IsEnum", 
      new JSIL.MethodSignature($.Boolean, [$asm14.TypeRef("System.Type")]), 
      Helpers_IsEnum
    );

    $.Method({Static:true , Public:true }, "IsInfinity", 
      new JSIL.MethodSignature($.Boolean, [$.Single]), 
      Helpers_IsInfinity$07
    );

    $.Method({Static:true , Public:true }, "IsInfinity", 
      new JSIL.MethodSignature($.Boolean, [$.Double]), 
      Helpers_IsInfinity$08
    );

    $.Method({Static:true , Public:true }, "IsNullOrEmpty", 
      new JSIL.MethodSignature($.Boolean, [$.String]), 
      Helpers_IsNullOrEmpty
    );

    $.Method({Static:true , Public:false}, "IsSubclassOf", 
      new JSIL.MethodSignature($.Boolean, [$asm14.TypeRef("System.Type"), $asm14.TypeRef("System.Type")]), 
      Helpers_IsSubclassOf
    );

    $.Method({Static:true , Public:false}, "IsValueType", 
      new JSIL.MethodSignature($.Boolean, [$asm14.TypeRef("System.Type")]), 
      Helpers_IsValueType
    );

    $.Method({Static:true , Public:false}, "ParseEnum", 
      new JSIL.MethodSignature($.Object, [$asm14.TypeRef("System.Type"), $.String]), 
      Helpers_ParseEnum
    );

    $.Method({Static:true , Public:true }, "Sort", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.Int32]), $jsilcore.TypeRef("System.Array", [$.Object])]), 
      Helpers_Sort
    );

    $.Method({Static:true , Public:true }, "TraceWriteLine", 
      JSIL.MethodSignature.Action($.String), 
      Helpers_TraceWriteLine
    )
      .Attribute($asm14.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["TRACE"]; });

    $.Field({Static:true , Public:true , ReadOnly:true }, "EmptyTypes", $jsilcore.TypeRef("System.Array", [$asm14.TypeRef("System.Type")]), function ($pi) {
        return JSIL.Array.New($asm14.System.Type, 0);
      });


    function Helpers__cctor () {
      $thisType.EmptyTypes = JSIL.Array.New($T00(), 0);
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      Helpers__cctor
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum ProtoBuf.ProtoTypeCode */ 

JSIL.MakeEnum(
  {
    FullName: "ProtoBuf.ProtoTypeCode", 
    BaseType: $asm14.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Empty: 0, 
    Unknown: 1, 
    Boolean: 3, 
    Char: 4, 
    SByte: 5, 
    Byte: 6, 
    Int16: 7, 
    UInt16: 8, 
    Int32: 9, 
    UInt32: 10, 
    Int64: 11, 
    UInt64: 12, 
    Single: 13, 
    Double: 14, 
    Decimal: 15, 
    DateTime: 16, 
    String: 18, 
    TimeSpan: 100, 
    ByteArray: 101, 
    Guid: 102, 
    Uri: 103, 
    Type: 104, 
  }
);

/* interface ProtoBuf.IExtensible */ 

JSIL.MakeInterface(
  "ProtoBuf.IExtensible", true, [], function ($) {
    $.Method({}, "GetExtensionObject", new JSIL.MethodSignature($asm0E.TypeRef("ProtoBuf.IExtension"), [$.Boolean]));
  }, []);

/* interface ProtoBuf.IExtension */ 

JSIL.MakeInterface(
  "ProtoBuf.IExtension", true, [], function ($) {
    $.Method({}, "BeginAppend", JSIL.MethodSignature.Return($asm14.TypeRef("System.IO.Stream")));
    $.Method({}, "EndAppend", new JSIL.MethodSignature(null, [$asm14.TypeRef("System.IO.Stream"), $.Boolean]));
    $.Method({}, "BeginQuery", JSIL.MethodSignature.Return($asm14.TypeRef("System.IO.Stream")));
    $.Method({}, "EndQuery", JSIL.MethodSignature.Action($asm14.TypeRef("System.IO.Stream")));
    $.Method({}, "GetLength", JSIL.MethodSignature.Return($.Int32));
  }, []);

/* enum ProtoBuf.ImplicitFields */ 

JSIL.MakeEnum(
  {
    FullName: "ProtoBuf.ImplicitFields", 
    BaseType: $asm14.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    None: 0, 
    AllPublic: 1, 
    AllFields: 2, 
  }
);

/* class ProtoBuf.NetObjectCache */ 

(function NetObjectCache$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm14.System.Object)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm14.System.Boolean)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm14.System.ArgumentNullException)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm14.System.Int32)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm14.System.String)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm0E.ProtoBuf.Meta.BasicList)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm14.System.Collections.Generic.Dictionary$b2.Of($asm14.System.String, $asm14.System.Int32))) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm0E.ProtoBuf.Meta.MutableList)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm0E.ProtoBuf.ProtoException)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm14.TypeRef("System.ArgumentNullException"), [$asm14.TypeRef("System.String")]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm14.TypeRef("System.Collections.Generic.Dictionary`2", [$asm14.TypeRef("System.String"), $asm14.TypeRef("System.Int32")]), null))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0E.TypeRef("ProtoBuf.ProtoException"), [$asm14.TypeRef("System.String")]))) ();
  };


  function NetObjectCache__ctor () {
  }; 

  function NetObjectCache_AddObjectKey (value, /* ref */ existing) {
    if (value === null) {
      throw $S00().Construct("value");
    }
    var flag2 = value === this.rootObject;
    var index = new JSIL.BoxedVariable(0);
    if (flag2) {
      existing.set(true);
      var result = 0;
    } else {
      var s = $T04().$As(value);
      var list = this.get_List();
      if (s === null) {
        index.set(list.IndexOfReference(value));
      } else {
        if (this.stringKeys === null) {
          this.stringKeys = $S01().Construct();
          index.set(-1);
        } else {
          var flag5 = !(this.stringKeys).TryGetValue(s, /* ref */ index);
          if (flag5) {
            index.set(-1);
          }
        }
      }
      var flag6 = !existing.set((index.get() | 0) >= 0);
      if (flag6) {
        index.set(list.Add(value));
        if (s !== null) {
          (this.stringKeys).Add(s, index.get());
        }
      }
      result = (((index.get() | 0) + 1) | 0);
    }
    return result;
  }; 

  function NetObjectCache_Clear () {
    this.trapStartIndex = 0;
    this.rootObject = null;
    if (this.underlyingList !== null) {
      (this.underlyingList).Clear();
    }
    if (this.stringKeys !== null) {
      (this.stringKeys).Clear();
    }
  }; 

  function NetObjectCache_get_List () {
    if (this.underlyingList === null) {
      this.underlyingList = new ($T07())();
    }
    return this.underlyingList;
  }; 

  function NetObjectCache_GetKeyedObject (key) {
    var num = (key | 0);
    key = ((num - 1) | 0);
    if (num === 0) {
      if (this.rootObject === null) {
        throw $S02().Construct("No root object assigned");
      }
      var result = this.rootObject;
    } else {
      var list = this.get_List();
      var flag3 = ((key | 0) < 0) || 
      ((key | 0) >= (list.get_Count() | 0));
      if (flag3) {
        throw $S02().Construct("Internal error; a missing key occurred");
      }
      var tmp = list.get_Item(key);
      var flag4 = tmp === null;
      if (flag4) {
        throw $S02().Construct("A deferred key does not have a value yet");
      }
      result = tmp;
    }
    return result;
  }; 

  function NetObjectCache_RegisterTrappedObject (value) {
    if (this.rootObject === null) {
      this.rootObject = value;
    } else {
      if (this.underlyingList !== null) {

      $loop0: 
        for (var i = (this.trapStartIndex | 0); i < ((this.underlyingList).get_Count() | 0); ) {
          this.trapStartIndex = ((i + 1) | 0);
          var flag3 = (this.underlyingList).get_Item(i) === null;
          if (flag3) {
            (this.underlyingList).set_Item(i, value);
            break $loop0;
          }
          var num = i;
          i = ((num + 1) | 0);
        }
      }
    }
  }; 

  function NetObjectCache_SetKeyedObject (key, value) {
    var num = (key | 0);
    key = ((num - 1) | 0);
    if (num === 0) {
      if (value === null) {
        throw $S00().Construct("value");
      }
      var flag3 = (this.rootObject !== null) && 
      (this.rootObject !== value);
      if (flag3) {
        throw $S02().Construct("The root object cannot be reassigned");
      }
      this.rootObject = value;
    } else {
      var list = this.get_List();
      var flag4 = (key | 0) < (list.get_Count() | 0);
      if (flag4) {
        var oldVal = list.get_Item(key);
        var flag5 = oldVal === null;
        if (flag5) {
          list.set_Item(key, value);
        } else {
          var flag6 = oldVal !== value;
          if (flag6) {
            throw $S02().Construct("Reference-tracked objects cannot change reference");
          }
        }
      } else {
        var flag7 = (key | 0) !== (list.Add(value) | 0);
        if (flag7) {
          throw $S02().Construct("Internal error; a key mismatch occurred");
        }
      }
    }
  }; 

  JSIL.MakeType({
      BaseType: $asm14.TypeRef("System.Object"), 
      Name: "ProtoBuf.NetObjectCache", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      NetObjectCache__ctor
    );

    $.Method({Static:false, Public:false}, "AddObjectKey", 
      new JSIL.MethodSignature($.Int32, [$.Object, $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])]), 
      NetObjectCache_AddObjectKey
    );

    $.Method({Static:false, Public:false}, "Clear", 
      JSIL.MethodSignature.Void, 
      NetObjectCache_Clear
    );

    $.Method({Static:false, Public:false}, "get_List", 
      JSIL.MethodSignature.Return($asm0E.TypeRef("ProtoBuf.Meta.MutableList")), 
      NetObjectCache_get_List
    );

    $.Method({Static:false, Public:false}, "GetKeyedObject", 
      new JSIL.MethodSignature($.Object, [$.Int32]), 
      NetObjectCache_GetKeyedObject
    );

    $.Method({Static:false, Public:false}, "RegisterTrappedObject", 
      JSIL.MethodSignature.Action($.Object), 
      NetObjectCache_RegisterTrappedObject
    );

    $.Method({Static:false, Public:false}, "SetKeyedObject", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object]), 
      NetObjectCache_SetKeyedObject
    );

    $.Constant({Static:true , Public:false}, "Root", $.Int32, 0);

    $.Field({Static:false, Public:false}, "underlyingList", $asm0E.TypeRef("ProtoBuf.Meta.MutableList"));

    $.Field({Static:false, Public:false}, "rootObject", $.Object);

    $.Field({Static:false, Public:false}, "trapStartIndex", $.Int32);

    $.Field({Static:false, Public:false}, "stringKeys", $asm14.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.Int32]));

    $.Property({Static:false, Public:false}, "List", $asm0E.TypeRef("ProtoBuf.Meta.MutableList"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum ProtoBuf.PrefixStyle */ 

JSIL.MakeEnum(
  {
    FullName: "ProtoBuf.PrefixStyle", 
    BaseType: $asm14.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    None: 0, 
    Base128: 1, 
    Fixed32: 2, 
    Fixed32BigEndian: 3, 
  }
);

/* class ProtoBuf.ProtoContractAttribute */ 

(function ProtoContractAttribute$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm14.System.Attribute)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm14.System.Byte)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm14.System.Boolean)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm14.System.Int32)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm0E.ProtoBuf.ImplicitFields)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm14.System.ArgumentOutOfRangeException)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm14.System.String)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm14.TypeRef("System.ArgumentOutOfRangeException"), [$asm14.TypeRef("System.String")]))) ();
  };


  function ProtoContractAttribute__ctor () {
    $T00().prototype._ctor.call(this);
  }; 

  function ProtoContractAttribute_get_AsReferenceDefault () {
    return this.HasFlag(32);
  }; 

  function ProtoContractAttribute_get_DataMemberOffset () {
    return this.dataMemberOffset;
  }; 

  function ProtoContractAttribute_get_EnumPassthru () {
    return this.HasFlag(64);
  }; 

  function ProtoContractAttribute_get_EnumPassthruHasValue () {
    return this.HasFlag(128);
  }; 

  function ProtoContractAttribute_get_IgnoreListHandling () {
    return this.HasFlag(16);
  }; 

  function ProtoContractAttribute_get_ImplicitFields () {
    return this.implicitFields;
  }; 

  function ProtoContractAttribute_get_ImplicitFirstTag () {
    return this.implicitFirstTag;
  }; 

  function ProtoContractAttribute_get_InferTagFromName () {
    return this.HasFlag(1);
  }; 

  function ProtoContractAttribute_get_InferTagFromNameHasValue () {
    return this.HasFlag(2);
  }; 

  function ProtoContractAttribute_get_Name () {
    return this.$name;
  }; 

  function ProtoContractAttribute_get_SkipConstructor () {
    return this.HasFlag(8);
  }; 

  function ProtoContractAttribute_get_UseProtoMembersOnly () {
    return this.HasFlag(4);
  }; 

  function ProtoContractAttribute_HasFlag (flag) {
    return (((this.flags | 0) & (flag | 0)) === (flag | 0));
  }; 

  function ProtoContractAttribute_set_AsReferenceDefault (value) {
    this.SetFlag(32, value);
  }; 

  function ProtoContractAttribute_set_DataMemberOffset (value) {
    this.dataMemberOffset = (value | 0);
  }; 

  function ProtoContractAttribute_set_EnumPassthru (value) {
    this.SetFlag(64, value);
    this.SetFlag(128, true);
  }; 

  function ProtoContractAttribute_set_IgnoreListHandling (value) {
    this.SetFlag(16, value);
  }; 

  function ProtoContractAttribute_set_ImplicitFields (value) {
    this.implicitFields = value;
  }; 

  function ProtoContractAttribute_set_ImplicitFirstTag (value) {
    if ((value | 0) < 1) {
      throw $S00().Construct("ImplicitFirstTag");
    }
    this.implicitFirstTag = (value | 0);
  }; 

  function ProtoContractAttribute_set_InferTagFromName (value) {
    this.SetFlag(1, value);
    this.SetFlag(2, true);
  }; 

  function ProtoContractAttribute_set_Name (value) {
    this.$name = value;
  }; 

  function ProtoContractAttribute_set_SkipConstructor (value) {
    this.SetFlag(8, value);
  }; 

  function ProtoContractAttribute_set_UseProtoMembersOnly (value) {
    this.SetFlag(4, value);
  }; 

  function ProtoContractAttribute_SetFlag (flag, value) {
    if (value) {
      this.flags = (this.flags | 0) | (flag | 0);
    } else {
      this.flags = (this.flags | 0) & (~flag & 0xFF);
    }
  }; 

  JSIL.MakeType({
      BaseType: $asm14.TypeRef("System.Attribute"), 
      Name: "ProtoBuf.ProtoContractAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      ProtoContractAttribute__ctor
    );

    $.Method({Static:false, Public:true }, "get_AsReferenceDefault", 
      JSIL.MethodSignature.Return($.Boolean), 
      ProtoContractAttribute_get_AsReferenceDefault
    );

    $.Method({Static:false, Public:true }, "get_DataMemberOffset", 
      JSIL.MethodSignature.Return($.Int32), 
      ProtoContractAttribute_get_DataMemberOffset
    );

    $.Method({Static:false, Public:true }, "get_EnumPassthru", 
      JSIL.MethodSignature.Return($.Boolean), 
      ProtoContractAttribute_get_EnumPassthru
    );

    $.Method({Static:false, Public:false}, "get_EnumPassthruHasValue", 
      JSIL.MethodSignature.Return($.Boolean), 
      ProtoContractAttribute_get_EnumPassthruHasValue
    );

    $.Method({Static:false, Public:true }, "get_IgnoreListHandling", 
      JSIL.MethodSignature.Return($.Boolean), 
      ProtoContractAttribute_get_IgnoreListHandling
    );

    $.Method({Static:false, Public:true }, "get_ImplicitFields", 
      JSIL.MethodSignature.Return($asm0E.TypeRef("ProtoBuf.ImplicitFields")), 
      ProtoContractAttribute_get_ImplicitFields
    );

    $.Method({Static:false, Public:true }, "get_ImplicitFirstTag", 
      JSIL.MethodSignature.Return($.Int32), 
      ProtoContractAttribute_get_ImplicitFirstTag
    );

    $.Method({Static:false, Public:true }, "get_InferTagFromName", 
      JSIL.MethodSignature.Return($.Boolean), 
      ProtoContractAttribute_get_InferTagFromName
    );

    $.Method({Static:false, Public:false}, "get_InferTagFromNameHasValue", 
      JSIL.MethodSignature.Return($.Boolean), 
      ProtoContractAttribute_get_InferTagFromNameHasValue
    );

    $.Method({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String), 
      ProtoContractAttribute_get_Name
    );

    $.Method({Static:false, Public:true }, "get_SkipConstructor", 
      JSIL.MethodSignature.Return($.Boolean), 
      ProtoContractAttribute_get_SkipConstructor
    );

    $.Method({Static:false, Public:true }, "get_UseProtoMembersOnly", 
      JSIL.MethodSignature.Return($.Boolean), 
      ProtoContractAttribute_get_UseProtoMembersOnly
    );

    $.Method({Static:false, Public:false}, "HasFlag", 
      new JSIL.MethodSignature($.Boolean, [$.Byte]), 
      ProtoContractAttribute_HasFlag
    );

    $.Method({Static:false, Public:true }, "set_AsReferenceDefault", 
      JSIL.MethodSignature.Action($.Boolean), 
      ProtoContractAttribute_set_AsReferenceDefault
    );

    $.Method({Static:false, Public:true }, "set_DataMemberOffset", 
      JSIL.MethodSignature.Action($.Int32), 
      ProtoContractAttribute_set_DataMemberOffset
    );

    $.Method({Static:false, Public:true }, "set_EnumPassthru", 
      JSIL.MethodSignature.Action($.Boolean), 
      ProtoContractAttribute_set_EnumPassthru
    );

    $.Method({Static:false, Public:true }, "set_IgnoreListHandling", 
      JSIL.MethodSignature.Action($.Boolean), 
      ProtoContractAttribute_set_IgnoreListHandling
    );

    $.Method({Static:false, Public:true }, "set_ImplicitFields", 
      JSIL.MethodSignature.Action($asm0E.TypeRef("ProtoBuf.ImplicitFields")), 
      ProtoContractAttribute_set_ImplicitFields
    );

    $.Method({Static:false, Public:true }, "set_ImplicitFirstTag", 
      JSIL.MethodSignature.Action($.Int32), 
      ProtoContractAttribute_set_ImplicitFirstTag
    );

    $.Method({Static:false, Public:true }, "set_InferTagFromName", 
      JSIL.MethodSignature.Action($.Boolean), 
      ProtoContractAttribute_set_InferTagFromName
    );

    $.Method({Static:false, Public:true }, "set_Name", 
      JSIL.MethodSignature.Action($.String), 
      ProtoContractAttribute_set_Name
    );

    $.Method({Static:false, Public:true }, "set_SkipConstructor", 
      JSIL.MethodSignature.Action($.Boolean), 
      ProtoContractAttribute_set_SkipConstructor
    );

    $.Method({Static:false, Public:true }, "set_UseProtoMembersOnly", 
      JSIL.MethodSignature.Action($.Boolean), 
      ProtoContractAttribute_set_UseProtoMembersOnly
    );

    $.Method({Static:false, Public:false}, "SetFlag", 
      new JSIL.MethodSignature(null, [$.Byte, $.Boolean]), 
      ProtoContractAttribute_SetFlag
    );

    $.Field({Static:false, Public:false}, "$name", $.String);

    $.Field({Static:false, Public:false}, "implicitFirstTag", $.Int32);

    $.Field({Static:false, Public:false}, "implicitFields", $asm0E.TypeRef("ProtoBuf.ImplicitFields"));

    $.Field({Static:false, Public:false}, "dataMemberOffset", $.Int32);

    $.Field({Static:false, Public:false}, "flags", $.Byte);

    $.Constant({Static:true , Public:false}, "OPTIONS_InferTagFromName", $.Byte, 1);

    $.Constant({Static:true , Public:false}, "OPTIONS_InferTagFromNameHasValue", $.Byte, 2);

    $.Constant({Static:true , Public:false}, "OPTIONS_UseProtoMembersOnly", $.Byte, 4);

    $.Constant({Static:true , Public:false}, "OPTIONS_SkipConstructor", $.Byte, 8);

    $.Constant({Static:true , Public:false}, "OPTIONS_IgnoreListHandling", $.Byte, 16);

    $.Constant({Static:true , Public:false}, "OPTIONS_AsReferenceDefault", $.Byte, 32);

    $.Constant({Static:true , Public:false}, "OPTIONS_EnumPassthru", $.Byte, 64);

    $.Constant({Static:true , Public:false}, "OPTIONS_EnumPassthruHasValue", $.Byte, 128);

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "ImplicitFirstTag", $.Int32);

    $.Property({Static:false, Public:true }, "UseProtoMembersOnly", $.Boolean);

    $.Property({Static:false, Public:true }, "IgnoreListHandling", $.Boolean);

    $.Property({Static:false, Public:true }, "ImplicitFields", $asm0E.TypeRef("ProtoBuf.ImplicitFields"));

    $.Property({Static:false, Public:true }, "InferTagFromName", $.Boolean);

    $.Property({Static:false, Public:false}, "InferTagFromNameHasValue", $.Boolean);

    $.Property({Static:false, Public:true }, "DataMemberOffset", $.Int32);

    $.Property({Static:false, Public:true }, "SkipConstructor", $.Boolean);

    $.Property({Static:false, Public:true }, "AsReferenceDefault", $.Boolean);

    $.Property({Static:false, Public:true }, "EnumPassthru", $.Boolean);

    $.Property({Static:false, Public:false}, "EnumPassthruHasValue", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm14.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm14.System.AttributeTargets.$Flags("Class", "Enum", "Interface", "Struct")]; });

})();

/* class ProtoBuf.ProtoConverterAttribute */ 

(function ProtoConverterAttribute$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm14.System.Attribute)) ();
  };


  function ProtoConverterAttribute__ctor () {
    $T00().prototype._ctor.call(this);
  }; 

  JSIL.MakeType({
      BaseType: $asm14.TypeRef("System.Attribute"), 
      Name: "ProtoBuf.ProtoConverterAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      ProtoConverterAttribute__ctor
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm14.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm14.System.AttributeTargets.Method]; });

})();

/* class ProtoBuf.ProtoEnumAttribute */ 

(function ProtoEnumAttribute$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm14.System.Attribute)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm14.System.String)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm14.System.Int32)) ();
  };


  function ProtoEnumAttribute__ctor () {
    $T00().prototype._ctor.call(this);
  }; 

  function ProtoEnumAttribute_get_Name () {
    return this.$name;
  }; 

  function ProtoEnumAttribute_get_Value () {
    return this.enumValue;
  }; 

  function ProtoEnumAttribute_HasValue () {
    return this.hasValue;
  }; 

  function ProtoEnumAttribute_set_Name (value) {
    this.$name = value;
  }; 

  function ProtoEnumAttribute_set_Value (value) {
    this.enumValue = (value | 0);
    this.hasValue = true;
  }; 

  JSIL.MakeType({
      BaseType: $asm14.TypeRef("System.Attribute"), 
      Name: "ProtoBuf.ProtoEnumAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      ProtoEnumAttribute__ctor
    );

    $.Method({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String), 
      ProtoEnumAttribute_get_Name
    );

    $.Method({Static:false, Public:true }, "get_Value", 
      JSIL.MethodSignature.Return($.Int32), 
      ProtoEnumAttribute_get_Value
    );

    $.Method({Static:false, Public:true }, "HasValue", 
      JSIL.MethodSignature.Return($.Boolean), 
      ProtoEnumAttribute_HasValue
    );

    $.Method({Static:false, Public:true }, "set_Name", 
      JSIL.MethodSignature.Action($.String), 
      ProtoEnumAttribute_set_Name
    );

    $.Method({Static:false, Public:true }, "set_Value", 
      JSIL.MethodSignature.Action($.Int32), 
      ProtoEnumAttribute_set_Value
    );

    $.Field({Static:false, Public:false}, "hasValue", $.Boolean);

    $.Field({Static:false, Public:false}, "enumValue", $.Int32);

    $.Field({Static:false, Public:false}, "$name", $.String);

    $.Property({Static:false, Public:true }, "Value", $.Int32);

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm14.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm14.System.AttributeTargets.Field]; });

})();

/* class ProtoBuf.ProtoException */ 

(function ProtoException$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm14.System.Exception)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm14.System.String)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm14.TypeRef("System.String"), $asm14.TypeRef("System.Exception")]))) ();
  };


  function ProtoException__ctor$00 () {
    $T00().prototype._ctor.call(this);
  }; 

  function ProtoException__ctor$01 (message) {
    $T00().prototype._ctor.call(this, message);
  }; 

  function ProtoException__ctor$02 (message, innerException) {
    $S00().Call($T00().prototype, "_ctor", null, this, message, innerException);
  }; 

  JSIL.MakeType({
      BaseType: $asm14.TypeRef("System.Exception"), 
      Name: "ProtoBuf.ProtoException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      ProtoException__ctor$00
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String), 
      ProtoException__ctor$01
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm14.TypeRef("System.Exception")]), 
      ProtoException__ctor$02
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ProtoBuf.ProtoIgnoreAttribute */ 

(function ProtoIgnoreAttribute$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm14.System.Attribute)) ();
  };


  function ProtoIgnoreAttribute__ctor () {
    $T00().prototype._ctor.call(this);
  }; 

  JSIL.MakeType({
      BaseType: $asm14.TypeRef("System.Attribute"), 
      Name: "ProtoBuf.ProtoIgnoreAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      ProtoIgnoreAttribute__ctor
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm14.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm14.System.AttributeTargets.$Flags("Field", "Property")]; });

})();

/* class ProtoBuf.ProtoPartialIgnoreAttribute */ 

(function ProtoPartialIgnoreAttribute$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm14.System.String)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0E.ProtoBuf.ProtoIgnoreAttribute)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0E.ProtoBuf.Helpers)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm14.System.ArgumentNullException)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm14.TypeRef("System.ArgumentNullException"), [$asm14.TypeRef("System.String")]))) ();
  };


  function ProtoPartialIgnoreAttribute__ctor (memberName) {
    $T01().prototype._ctor.call(this);
    if ($T02().IsNullOrEmpty(memberName)) {
      throw $S00().Construct("memberName");
    }
    this.memberName = memberName;
  }; 

  function ProtoPartialIgnoreAttribute_get_MemberName () {
    return this.memberName;
  }; 

  JSIL.MakeType({
      BaseType: $asm0E.TypeRef("ProtoBuf.ProtoIgnoreAttribute"), 
      Name: "ProtoBuf.ProtoPartialIgnoreAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String), 
      ProtoPartialIgnoreAttribute__ctor
    );

    $.Method({Static:false, Public:true }, "get_MemberName", 
      JSIL.MethodSignature.Return($.String), 
      ProtoPartialIgnoreAttribute_get_MemberName
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "memberName", $.String);

    $.Property({Static:false, Public:true }, "MemberName", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm14.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm14.System.AttributeTargets.Class]; });

})();

/* class ProtoBuf.ProtoIncludeAttribute */ 

(function ProtoIncludeAttribute$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm14.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm14.System.Type)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm14.System.String)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0E.ProtoBuf.DataFormat)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm14.System.Attribute)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm14.System.ArgumentOutOfRangeException)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm0E.ProtoBuf.Helpers)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm14.System.ArgumentNullException)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm0E.ProtoBuf.Meta.TypeModel)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm14.TypeRef("System.Int32"), $asm14.TypeRef("System.String")]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm14.TypeRef("System.ArgumentOutOfRangeException"), [$asm14.TypeRef("System.String"), $asm14.TypeRef("System.String")]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm14.TypeRef("System.ArgumentNullException"), [$asm14.TypeRef("System.String"), $asm14.TypeRef("System.String")]))) ();
  };


  function ProtoIncludeAttribute__ctor$00 (tag, knownType) {
    $S00().Call($thisType.prototype, "_ctor", null, this, tag, (
        (knownType === null)
           ? ""
           : knownType.get_AssemblyQualifiedName())
    );
  }; 

  function ProtoIncludeAttribute__ctor$01 (tag, knownTypeName) {
    this.dataFormat = $T03().Default;
    $T04().prototype._ctor.call(this);
    if ((tag | 0) <= 0) {
      throw $S01().Construct("tag", "Tags must be positive integers");
    }
    if ($T06().IsNullOrEmpty(knownTypeName)) {
      throw $S02().Construct("knownTypeName", "Known type cannot be blank");
    }
    this.tag = (tag | 0);
    this.knownTypeName = knownTypeName;
  }; 

  function ProtoIncludeAttribute_get_DataFormat () {
    return this.dataFormat;
  }; 

  function ProtoIncludeAttribute_get_KnownType () {
    return $T08().ResolveKnownType(this.get_KnownTypeName(), null, null);
  }; 

  function ProtoIncludeAttribute_get_KnownTypeName () {
    return this.knownTypeName;
  }; 

  function ProtoIncludeAttribute_get_Tag () {
    return this.tag;
  }; 

  function ProtoIncludeAttribute_set_DataFormat (value) {
    this.dataFormat = value;
  }; 

  JSIL.MakeType({
      BaseType: $asm14.TypeRef("System.Attribute"), 
      Name: "ProtoBuf.ProtoIncludeAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $asm14.TypeRef("System.Type")]), 
      ProtoIncludeAttribute__ctor$00
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $.String]), 
      ProtoIncludeAttribute__ctor$01
    );

    $.Method({Static:false, Public:true }, "get_DataFormat", 
      JSIL.MethodSignature.Return($asm0E.TypeRef("ProtoBuf.DataFormat")), 
      ProtoIncludeAttribute_get_DataFormat
    );

    $.Method({Static:false, Public:true }, "get_KnownType", 
      JSIL.MethodSignature.Return($asm14.TypeRef("System.Type")), 
      ProtoIncludeAttribute_get_KnownType
    );

    $.Method({Static:false, Public:true }, "get_KnownTypeName", 
      JSIL.MethodSignature.Return($.String), 
      ProtoIncludeAttribute_get_KnownTypeName
    );

    $.Method({Static:false, Public:true }, "get_Tag", 
      JSIL.MethodSignature.Return($.Int32), 
      ProtoIncludeAttribute_get_Tag
    );

    $.Method({Static:false, Public:true }, "set_DataFormat", 
      JSIL.MethodSignature.Action($asm0E.TypeRef("ProtoBuf.DataFormat")), 
      ProtoIncludeAttribute_set_DataFormat
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "tag", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "knownTypeName", $.String);

    $.Field({Static:false, Public:false}, "dataFormat", $asm0E.TypeRef("ProtoBuf.DataFormat"));

    $.Property({Static:false, Public:true }, "Tag", $.Int32);

    $.Property({Static:false, Public:true }, "KnownTypeName", $.String);

    $.Property({Static:false, Public:true }, "KnownType", $asm14.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "DataFormat", $asm0E.TypeRef("ProtoBuf.DataFormat"))
      .Attribute($asm0F.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [$asm0E.ProtoBuf.DataFormat.Default]; });

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm14.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm14.System.AttributeTargets.$Flags("Class", "Interface")]; });

})();

/* class ProtoBuf.ProtoMemberAttribute */ 

(function ProtoMemberAttribute$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm14.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm14.System.Boolean)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm14.System.Attribute)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm14.System.ArgumentOutOfRangeException)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm14.System.Object)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm14.System.String)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm0E.ProtoBuf.MemberSerializationOptions)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm0E.ProtoBuf.DataFormat)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm14.TypeRef("System.ArgumentOutOfRangeException"), [$asm14.TypeRef("System.String")]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature($asm14.TypeRef("System.Int32"), [$asm0E.TypeRef("ProtoBuf.ProtoMemberAttribute")]))) ();
  };


  function ProtoMemberAttribute__ctor$00 (tag) {
    $thisType.prototype._ctor.call(this, tag, false);
  }; 

  function ProtoMemberAttribute__ctor$01 (tag, forced) {
    $T02().prototype._ctor.call(this);
    if (((tag | 0) <= 0) && !forced) {
      throw $S00().Construct("tag");
    }
    this.tag = (tag | 0);
  }; 

  function ProtoMemberAttribute_CompareTo$02 (other) {
    return $S01().CallVirtual("CompareTo", null, this, $thisType.$As(other));
  }; 

  function ProtoMemberAttribute_CompareTo$03 (other) {
    var flag = other === null;
    if (flag) {
      var result2 = -1;
    } else {
      var flag2 = this === other;
      if (flag2) {
        result2 = 0;
      } else {
        var result = (JSIL.CompareValues(this.tag, other.tag));
        var flag3 = result === 0;
        if (flag3) {
          result = ($T05().CompareOrdinal(this.$name, other.$name) | 0);
        }
        result2 = result;
      }
    }
    return result2;
  }; 

  function ProtoMemberAttribute_get_AsReference () {
    return ($T06().$Cast(this.options & $T06().AsReference) === $T06().AsReference);
  }; 

  function ProtoMemberAttribute_get_AsReferenceHasValue () {
    return ($T06().$Cast(this.options & $T06().AsReferenceHasValue) === $T06().AsReferenceHasValue);
  }; 

  function ProtoMemberAttribute_get_DataFormat () {
    return this.dataFormat;
  }; 

  function ProtoMemberAttribute_get_DynamicType () {
    return ($T06().$Cast(this.options & $T06().DynamicType) === $T06().DynamicType);
  }; 

  function ProtoMemberAttribute_get_IsPacked () {
    return ($T06().$Cast(this.options & $T06().Packed) === $T06().Packed);
  }; 

  function ProtoMemberAttribute_get_IsRequired () {
    return ($T06().$Cast(this.options & $T06().Required) === $T06().Required);
  }; 

  function ProtoMemberAttribute_get_Name () {
    return this.$name;
  }; 

  function ProtoMemberAttribute_get_Options () {
    return this.options;
  }; 

  function ProtoMemberAttribute_get_OverwriteList () {
    return ($T06().$Cast(this.options & $T06().OverwriteList) === $T06().OverwriteList);
  }; 

  function ProtoMemberAttribute_get_Tag () {
    return this.tag;
  }; 

  function ProtoMemberAttribute_Rebase (tag) {
    this.tag = (tag | 0);
  }; 

  function ProtoMemberAttribute_set_AsReference (value) {
    if (value) {
      this.options = $T06().$Cast(this.options | $T06().AsReference);
    } else {
      this.options = $T06().$Cast(this.options & $T06().$Flags(
            "AsReferenceHasValue", "DynamicType", "OverwriteList", "Packed", 
            "Required"
        ));
    }
    this.options = $T06().$Cast(this.options | $T06().AsReferenceHasValue);
  }; 

  function ProtoMemberAttribute_set_AsReferenceHasValue (value) {
    if (value) {
      this.options = $T06().$Cast(this.options | $T06().AsReferenceHasValue);
    } else {
      this.options = $T06().$Cast(this.options & $T06().$Flags(
            "AsReference", "DynamicType", "OverwriteList", "Packed", 
            "Required"
        ));
    }
  }; 

  function ProtoMemberAttribute_set_DataFormat (value) {
    this.dataFormat = value;
  }; 

  function ProtoMemberAttribute_set_DynamicType (value) {
    if (value) {
      this.options = $T06().$Cast(this.options | $T06().DynamicType);
    } else {
      this.options = $T06().$Cast(this.options & $T06().$Flags(
            "AsReference", "AsReferenceHasValue", "OverwriteList", "Packed", 
            "Required"
        ));
    }
  }; 

  function ProtoMemberAttribute_set_IsPacked (value) {
    if (value) {
      this.options = $T06().$Cast(this.options | $T06().Packed);
    } else {
      this.options = $T06().$Cast(this.options & $T06().$Flags(
            "AsReference", "AsReferenceHasValue", "DynamicType", "OverwriteList", 
            "Required"
        ));
    }
  }; 

  function ProtoMemberAttribute_set_IsRequired (value) {
    if (value) {
      this.options = $T06().$Cast(this.options | $T06().Required);
    } else {
      this.options = $T06().$Cast(this.options & $T06().$Flags(
            "AsReference", "AsReferenceHasValue", "DynamicType", "OverwriteList", 
            "Packed"
        ));
    }
  }; 

  function ProtoMemberAttribute_set_Name (value) {
    this.$name = value;
  }; 

  function ProtoMemberAttribute_set_Options (value) {
    this.options = value;
  }; 

  function ProtoMemberAttribute_set_OverwriteList (value) {
    if (value) {
      this.options = $T06().$Cast(this.options | $T06().OverwriteList);
    } else {
      this.options = $T06().$Cast(this.options & $T06().$Flags(
            "AsReference", "AsReferenceHasValue", "DynamicType", "Packed", 
            "Required"
        ));
    }
  }; 

  JSIL.MakeType({
      BaseType: $asm14.TypeRef("System.Attribute"), 
      Name: "ProtoBuf.ProtoMemberAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32), 
      ProtoMemberAttribute__ctor$00
    );

    $.Method({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $.Boolean]), 
      ProtoMemberAttribute__ctor$01
    );

    $.Method({Static:false, Public:true , Virtual:true }, "CompareTo", 
      new JSIL.MethodSignature($.Int32, [$.Object]), 
      ProtoMemberAttribute_CompareTo$02
    );

    $.Method({Static:false, Public:true , Virtual:true }, "CompareTo", 
      new JSIL.MethodSignature($.Int32, [$.Type]), 
      ProtoMemberAttribute_CompareTo$03
    );

    $.Method({Static:false, Public:true }, "get_AsReference", 
      JSIL.MethodSignature.Return($.Boolean), 
      ProtoMemberAttribute_get_AsReference
    );

    $.Method({Static:false, Public:false}, "get_AsReferenceHasValue", 
      JSIL.MethodSignature.Return($.Boolean), 
      ProtoMemberAttribute_get_AsReferenceHasValue
    );

    $.Method({Static:false, Public:true }, "get_DataFormat", 
      JSIL.MethodSignature.Return($asm0E.TypeRef("ProtoBuf.DataFormat")), 
      ProtoMemberAttribute_get_DataFormat
    );

    $.Method({Static:false, Public:true }, "get_DynamicType", 
      JSIL.MethodSignature.Return($.Boolean), 
      ProtoMemberAttribute_get_DynamicType
    );

    $.Method({Static:false, Public:true }, "get_IsPacked", 
      JSIL.MethodSignature.Return($.Boolean), 
      ProtoMemberAttribute_get_IsPacked
    );

    $.Method({Static:false, Public:true }, "get_IsRequired", 
      JSIL.MethodSignature.Return($.Boolean), 
      ProtoMemberAttribute_get_IsRequired
    );

    $.Method({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String), 
      ProtoMemberAttribute_get_Name
    );

    $.Method({Static:false, Public:true }, "get_Options", 
      JSIL.MethodSignature.Return($asm0E.TypeRef("ProtoBuf.MemberSerializationOptions")), 
      ProtoMemberAttribute_get_Options
    );

    $.Method({Static:false, Public:true }, "get_OverwriteList", 
      JSIL.MethodSignature.Return($.Boolean), 
      ProtoMemberAttribute_get_OverwriteList
    );

    $.Method({Static:false, Public:true }, "get_Tag", 
      JSIL.MethodSignature.Return($.Int32), 
      ProtoMemberAttribute_get_Tag
    );

    $.Method({Static:false, Public:false}, "Rebase", 
      JSIL.MethodSignature.Action($.Int32), 
      ProtoMemberAttribute_Rebase
    );

    $.Method({Static:false, Public:true }, "set_AsReference", 
      JSIL.MethodSignature.Action($.Boolean), 
      ProtoMemberAttribute_set_AsReference
    );

    $.Method({Static:false, Public:false}, "set_AsReferenceHasValue", 
      JSIL.MethodSignature.Action($.Boolean), 
      ProtoMemberAttribute_set_AsReferenceHasValue
    );

    $.Method({Static:false, Public:true }, "set_DataFormat", 
      JSIL.MethodSignature.Action($asm0E.TypeRef("ProtoBuf.DataFormat")), 
      ProtoMemberAttribute_set_DataFormat
    );

    $.Method({Static:false, Public:true }, "set_DynamicType", 
      JSIL.MethodSignature.Action($.Boolean), 
      ProtoMemberAttribute_set_DynamicType
    );

    $.Method({Static:false, Public:true }, "set_IsPacked", 
      JSIL.MethodSignature.Action($.Boolean), 
      ProtoMemberAttribute_set_IsPacked
    );

    $.Method({Static:false, Public:true }, "set_IsRequired", 
      JSIL.MethodSignature.Action($.Boolean), 
      ProtoMemberAttribute_set_IsRequired
    );

    $.Method({Static:false, Public:true }, "set_Name", 
      JSIL.MethodSignature.Action($.String), 
      ProtoMemberAttribute_set_Name
    );

    $.Method({Static:false, Public:true }, "set_Options", 
      JSIL.MethodSignature.Action($asm0E.TypeRef("ProtoBuf.MemberSerializationOptions")), 
      ProtoMemberAttribute_set_Options
    );

    $.Method({Static:false, Public:true }, "set_OverwriteList", 
      JSIL.MethodSignature.Action($.Boolean), 
      ProtoMemberAttribute_set_OverwriteList
    );

    $.Field({Static:false, Public:false}, "Member", $asm14.TypeRef("System.Reflection.MemberInfo"));

    $.Field({Static:false, Public:false}, "TagIsPinned", $.Boolean);

    $.Field({Static:false, Public:false}, "$name", $.String);

    $.Field({Static:false, Public:false}, "dataFormat", $asm0E.TypeRef("ProtoBuf.DataFormat"));

    $.Field({Static:false, Public:false}, "tag", $.Int32);

    $.Field({Static:false, Public:false}, "options", $asm0E.TypeRef("ProtoBuf.MemberSerializationOptions"));

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "DataFormat", $asm0E.TypeRef("ProtoBuf.DataFormat"));

    $.Property({Static:false, Public:true }, "Tag", $.Int32);

    $.Property({Static:false, Public:true }, "IsRequired", $.Boolean);

    $.Property({Static:false, Public:true }, "IsPacked", $.Boolean);

    $.Property({Static:false, Public:true }, "OverwriteList", $.Boolean);

    $.Property({Static:false, Public:true }, "AsReference", $.Boolean);

    $.Property({Static:false, Public:false}, "AsReferenceHasValue", $.Boolean);

    $.Property({Static:false, Public:true }, "DynamicType", $.Boolean);

    $.Property({Static:false, Public:true }, "Options", $asm0E.TypeRef("ProtoBuf.MemberSerializationOptions"));

    $.ImplementInterfaces(
      /* 1 */ $asm14.TypeRef("System.IComparable"), 
      /* 2 */ $asm14.TypeRef("System.IComparable`1", [$.Type])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm14.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm14.System.AttributeTargets.$Flags("Field", "Property")]; });

})();

/* enum ProtoBuf.MemberSerializationOptions */ 

JSIL.MakeEnum(
  {
    FullName: "ProtoBuf.MemberSerializationOptions", 
    BaseType: $asm14.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: true, 
  }, 
  {
    None: 0, 
    Packed: 1, 
    Required: 2, 
    AsReference: 4, 
    DynamicType: 8, 
    OverwriteList: 16, 
    AsReferenceHasValue: 32, 
  }
);

/* class ProtoBuf.ProtoPartialMemberAttribute */ 

(function ProtoPartialMemberAttribute$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm14.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm14.System.String)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0E.ProtoBuf.ProtoMemberAttribute)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0E.ProtoBuf.Helpers)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm14.System.ArgumentNullException)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm14.TypeRef("System.ArgumentNullException"), [$asm14.TypeRef("System.String")]))) ();
  };


  function ProtoPartialMemberAttribute__ctor (tag, memberName) {
    $T02().prototype._ctor.call(this, tag);
    if ($T03().IsNullOrEmpty(memberName)) {
      throw $S00().Construct("memberName");
    }
    this.memberName = memberName;
  }; 

  function ProtoPartialMemberAttribute_get_MemberName () {
    return this.memberName;
  }; 

  JSIL.MakeType({
      BaseType: $asm0E.TypeRef("ProtoBuf.ProtoMemberAttribute"), 
      Name: "ProtoBuf.ProtoPartialMemberAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $.String]), 
      ProtoPartialMemberAttribute__ctor
    );

    $.Method({Static:false, Public:true }, "get_MemberName", 
      JSIL.MethodSignature.Return($.String), 
      ProtoPartialMemberAttribute_get_MemberName
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "memberName", $.String);

    $.Property({Static:false, Public:true }, "MemberName", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm14.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm14.System.AttributeTargets.Class]; });

})();

/* class ProtoBuf.ProtoReader */ 

(function ProtoReader$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm14.System.Text.UTF8Encoding)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm14.System.Byte)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm14.System.IO.Stream)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0E.ProtoBuf.Meta.TypeModel)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm0E.ProtoBuf.SerializationContext)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm14.System.Int32)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm14.System.Exception)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize(System.Array.Of($asm14.System.Byte))) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm14.System.Boolean)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm14.System.ArgumentNullException)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm0E.ProtoBuf.WireType)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm0E.ProtoBuf.Helpers)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm0E.ProtoBuf.IExtensible)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm0E.ProtoBuf.IExtension)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm0E.ProtoBuf.ProtoWriter)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm14.System.IDisposable)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm0E.ProtoBuf.SubItemToken)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm0E.ProtoBuf.ProtoException)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm14.System.String)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm14.System.Text.Encoding)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm14.System.UInt32)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm0E.ProtoBuf.BufferPool)) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm14.System.Collections.Generic.Dictionary$b2.Of($asm14.System.String, $asm14.System.String))) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm0E.ProtoBuf.NetObjectCache)) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize($asm14.System.ArgumentException)) ();
  };
  var $T19 = function () {
    return ($T19 = JSIL.Memoize($asm14.System.IO.EndOfStreamException)) ();
  };
  var $T1A = function () {
    return ($T1A = JSIL.Memoize($asm14.System.Type)) ();
  };
  var $T1B = function () {
    return ($T1B = JSIL.Memoize($asm14.System.Object)) ();
  };
  var $T1C = function () {
    return ($T1C = JSIL.Memoize($asm14.System.InvalidOperationException)) ();
  };
  var $T1D = function () {
    return ($T1D = JSIL.Memoize($asm14.System.IO.MemoryStream)) ();
  };
  var $T1E = function () {
    return ($T1E = JSIL.Memoize($asm14.System.Int64)) ();
  };
  var $T1F = function () {
    return ($T1F = JSIL.Memoize($asm14.System.Double)) ();
  };
  var $T20 = function () {
    return ($T20 = JSIL.Memoize($asm14.System.BitConverter)) ();
  };
  var $T21 = function () {
    return ($T21 = JSIL.Memoize($asm14.System.Int16)) ();
  };
  var $T22 = function () {
    return ($T22 = JSIL.Memoize($asm0E.ProtoBuf.PrefixStyle)) ();
  };
  var $T23 = function () {
    return ($T23 = JSIL.Memoize($asm14.System.ArgumentOutOfRangeException)) ();
  };
  var $T24 = function () {
    return ($T24 = JSIL.Memoize($asm14.System.SByte)) ();
  };
  var $T25 = function () {
    return ($T25 = JSIL.Memoize($asm14.System.Single)) ();
  };
  var $T26 = function () {
    return ($T26 = JSIL.Memoize($asm14.System.OverflowException)) ();
  };
  var $T27 = function () {
    return ($T27 = JSIL.Memoize($asm0E.ProtoBuf.DataFormat)) ();
  };
  var $T28 = function () {
    return ($T28 = JSIL.Memoize($asm14.System.UInt16)) ();
  };
  var $T29 = function () {
    return ($T29 = JSIL.Memoize($asm14.System.UInt64)) ();
  };
  var $T2A = function () {
    return ($T2A = JSIL.Memoize($asm14.System.IO.SeekOrigin)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm14.TypeRef("System.Text.UTF8Encoding"), null))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm14.TypeRef("System.ArgumentNullException"), [$asm14.TypeRef("System.String")]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0E.TypeRef("ProtoBuf.ProtoException"), [$asm14.TypeRef("System.String")]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0E.TypeRef("ProtoBuf.ProtoReader"), [
        $asm14.TypeRef("System.IO.Stream"), $asm0E.TypeRef("ProtoBuf.Meta.TypeModel"), 
        $asm0E.TypeRef("ProtoBuf.SerializationContext"), $asm14.TypeRef("System.Int32")
      ]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.ConstructorSignature($asm14.TypeRef("System.ArgumentException"), [$asm14.TypeRef("System.String")]))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.ConstructorSignature($asm14.TypeRef("System.IO.EndOfStreamException"), null))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(new JSIL.ConstructorSignature($asm14.TypeRef("System.ArgumentException"), [$asm14.TypeRef("System.String"), $asm14.TypeRef("System.String")]))) ();
  };
  var $S07 = function () {
    return ($S07 = JSIL.Memoize(new JSIL.ConstructorSignature($asm14.TypeRef("System.Collections.Generic.Dictionary`2", [$asm14.TypeRef("System.String"), $asm14.TypeRef("System.String")]), null))) ();
  };
  var $S08 = function () {
    return ($S08 = JSIL.Memoize(new JSIL.ConstructorSignature($asm14.TypeRef("System.InvalidOperationException"), [$asm14.TypeRef("System.String")]))) ();
  };
  var $S09 = function () {
    return ($S09 = JSIL.Memoize(new JSIL.ConstructorSignature($asm14.TypeRef("System.IO.MemoryStream"), null))) ();
  };
  var $S0A = function () {
    return ($S0A = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm14.TypeRef("System.IO.Stream"), $asm14.TypeRef("System.Object"), 
        $asm0E.TypeRef("ProtoBuf.SerializationContext")
      ]))) ();
  };
  var $S0B = function () {
    return ($S0B = JSIL.Memoize(new JSIL.MethodSignature($asm14.TypeRef("System.Object"), [
        $asm14.TypeRef("System.IO.Stream"), $asm14.TypeRef("System.Object"), 
        $asm14.TypeRef("System.Type")
      ]))) ();
  };
  var $S0C = function () {
    return ($S0C = JSIL.Memoize(new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm14.TypeRef("System.Byte")]), [$asm14.TypeRef("System.Int64")]))) ();
  };
  var $S0D = function () {
    return ($S0D = JSIL.Memoize(new JSIL.MethodSignature($asm14.TypeRef("System.Int32"), [$asm14.TypeRef("System.UInt32")]))) ();
  };
  var $S0E = function () {
    return ($S0E = JSIL.Memoize(new JSIL.MethodSignature($asm14.TypeRef("System.Int64"), [$asm14.TypeRef("System.UInt64")]))) ();
  };
  var $S0F = function () {
    return ($S0F = JSIL.Memoize(new JSIL.ConstructorSignature($asm14.TypeRef("System.InvalidOperationException"), null))) ();
  };
  var $S10 = function () {
    return ($S10 = JSIL.Memoize(new JSIL.ConstructorSignature($asm14.TypeRef("System.ArgumentOutOfRangeException"), [$asm14.TypeRef("System.String")]))) ();
  };
  var $S11 = function () {
    return ($S11 = JSIL.Memoize(new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm14.TypeRef("System.Byte")]), [$asm14.TypeRef("System.Int32")]))) ();
  };
  var $S12 = function () {
    return ($S12 = JSIL.Memoize(new JSIL.MethodSignature($asm14.TypeRef("System.Boolean"), [$asm14.TypeRef("System.Single")]))) ();
  };
  var $S13 = function () {
    return ($S13 = JSIL.Memoize(new JSIL.MethodSignature($asm14.TypeRef("System.Boolean"), [$asm14.TypeRef("System.Double")]))) ();
  };
  var $S14 = function () {
    return ($S14 = JSIL.Memoize(new JSIL.ConstructorSignature($asm14.TypeRef("System.OverflowException"), null))) ();
  };
  var $S15 = function () {
    return ($S15 = JSIL.Memoize(new JSIL.MethodSignature($asm14.TypeRef("System.Object"), [
        $asm14.TypeRef("System.Int32"), $asm14.TypeRef("System.Object"), 
        $asm0E.TypeRef("ProtoBuf.ProtoReader")
      ]))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm0E.ProtoBuf.IExtensible.GetExtensionObject)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm0E.ProtoBuf.IExtension.BeginAppend)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm14.System.IDisposable.Dispose)) ();
  };
  var $IM03 = function () {
    return ($IM03 = JSIL.Memoize($asm0E.ProtoBuf.IExtension.EndAppend)) ();
  };


  function ProtoReader__ctor$00 (source, model, context) {
    $thisType.Init(
      this, 
      source, 
      model, 
      context, 
      -1
    );
  }; 

  function ProtoReader__ctor$01 (source, model, context, length) {
    $thisType.Init(
      this, 
      source, 
      model, 
      context, 
      length
    );
  }; 

  function ProtoReader_AddErrorData (exception, source) {
    return exception;
  }; 

  function ProtoReader_AppendBytes (value, reader) {
    var flag = reader === null;
    if (flag) {
      throw $S01().Construct("reader");
    }
    var wireType = reader.wireType;
    if (wireType !== $T0A().String) {
      throw reader.CreateWireTypeException();
    }
    var len = (reader.ReadUInt32Variant(false) | 0);
    reader.wireType = $T0A().None;
    var flag2 = len === 0;
    if (flag2) {
      var result = (
        (value === null)
           ? $thisType.EmptyBlob
           : value)
      ;
    } else {
      var flag3 = (value === null) || 
      ((value.length | 0) === 0);
      if (flag3) {
        var offset = 0;
        value = JSIL.Array.New($T01(), len);
      } else {
        offset = (value.length | 0);
        var tmp = JSIL.Array.New($T01(), (((value.length | 0) + len) | 0));
        $T0B().BlockCopy(
          value, 
          0, 
          tmp, 
          0, 
          value.length
        );
        value = tmp;
      }
      reader.position = (((reader.position | 0) + len) | 0);

      while (len > (reader.available | 0)) {
        var flag4 = (reader.available | 0) > 0;
        if (flag4) {
          $T0B().BlockCopy(
            reader.ioBuffer, 
            reader.ioIndex, 
            value, 
            offset, 
            reader.available
          );
          len = ((len - (reader.available | 0)) | 0);
          offset = ((offset + (reader.available | 0)) | 0);
          reader.ioIndex = reader.available = 0;
        }
        var count = ((
          (len > (reader.ioBuffer.length | 0))
             ? reader.ioBuffer.length
             : len)
         | 0);
        if (count > 0) {
          reader.Ensure(count, true);
        }
      }
      var flag6 = len > 0;
      if (flag6) {
        $T0B().BlockCopy(
          reader.ioBuffer, 
          reader.ioIndex, 
          value, 
          offset, 
          len
        );
        reader.ioIndex = (((reader.ioIndex | 0) + len) | 0);
        reader.available = (((reader.available | 0) - len) | 0);
      }
      result = value;
    }
    return result;
  }; 

  function ProtoReader_AppendExtensionData (instance) {
    var flag = instance === null;
    if (flag) {
      throw $S01().Construct("instance");
    }
    var extn = $IM00().Call(instance, null, true);
    var commit = false;
    var dest = $IM01().Call(extn, null);
    try {
      var writer = new ($T0E())(dest, this.model, null);
      try {
        this.AppendExtensionField(writer);
        writer.Close();
      } finally {
        if (writer !== null) {
          $IM02().Call(writer, null);
        }
      }
      commit = true;
    } finally {
      $IM03().Call(extn, null, dest, commit);
    }
  }; 

  function ProtoReader_AppendExtensionField (writer) {
    $T0E().WriteFieldHeader(this.fieldNumber, this.wireType, writer);
    switch ((this.wireType).valueOf()) {
      case 0: 
      case 1: 
      case 8: 
        $T0E().WriteInt64(this.ReadInt64(), writer);
        return;

      case 2: 
        $T0E().WriteBytes($thisType.AppendBytes(null, this), writer);
        return;

      case 3: 
        var readerToken = $thisType.StartSubItem(this);
        var writerToken = $T0E().StartSubItem(null, writer);

        while ((this.ReadFieldHeader() | 0) > 0) {
          this.AppendExtensionField(writer);
        }
        $thisType.EndSubItem(readerToken, this);
        $T0E().EndSubItem(writerToken, writer);
        return;

      case 5: 
        $T0E().WriteInt32(this.ReadInt32(), writer);
        return;

    }
    throw this.CreateWireTypeException();
  }; 

  function ProtoReader_Assert (wireType) {
    var flag = this.wireType === wireType;
    if (!flag) {
      var flag2 = $T0A().$Cast(wireType & $T0A().$Cast(7)) === this.wireType;
      if (!flag2) {
        throw this.CreateWireTypeException();
      }
      this.wireType = wireType;
    }
  }; 

  function ProtoReader_CheckFullyConsumed () {
    var flag = this.isFixedLength;
    if (flag) {
      if ((this.dataRemaining | 0) > 0) {
        throw $S02().Construct("Incorrect number of bytes consumed");
      }
    } else {
      if ((this.available | 0) > 0) {
        throw $S02().Construct("Unconsumed data left in the buffer; this suggests corrupt input");
      }
    }
  }; 

  function ProtoReader_Create (source, model, context, len) {
    var reader = $thisType.GetRecycled();
    var flag = reader === null;
    if (flag) {
      var result = $S03().Construct(source, model, context, len);
    } else {
      $thisType.Init(
        reader, 
        source, 
        model, 
        context, 
        len
      );
      result = reader;
    }
    return result;
  }; 

  function ProtoReader_CreateException (message) {
    return $thisType.AddErrorData($S02().Construct(message), this);
  }; 

  function ProtoReader_CreateWireTypeException () {
    return this.CreateException("Invalid wire-type; this usually means you have over-written a file without truncating or setting the length; see http://stackoverflow.com/q/2152978/23354");
  }; 

  function ProtoReader_DeserializeType (value) {
    return $T03().DeserializeType(this.model, value);
  }; 

  function ProtoReader_DirectReadBigEndianInt32 (source) {
    return ((((($thisType.ReadByteOrThrow(source) | 0) << 24) | (($thisType.ReadByteOrThrow(source) | 0) << 16)) | (($thisType.ReadByteOrThrow(source) | 0) << 8)) | ($thisType.ReadByteOrThrow(source) | 0));
  }; 

  function ProtoReader_DirectReadBytes$02 (source, buffer, offset, count) {
    var read = 0;
    var flag = source === null;
    if (flag) {
      throw $S01().Construct("source");
    }

    for (; ((count | 0) > 0) && ((read = (source.Read(buffer, offset, count) | 0)) > 0); offset = (((offset | 0) + read) | 0)) {
      count = (((count | 0) - read) | 0);
    }
    var flag2 = (count | 0) > 0;
    if (flag2) {
      throw $thisType.EoF(null);
    }
  }; 

  function ProtoReader_DirectReadBytes$03 (source, count) {
    var buffer = JSIL.Array.New($T01(), count);
    $thisType.DirectReadBytes(source, buffer, 0, count);
    return buffer;
  }; 

  function ProtoReader_DirectReadLittleEndianInt32 (source) {
    return (((($thisType.ReadByteOrThrow(source) | 0) | (($thisType.ReadByteOrThrow(source) | 0) << 8)) | (($thisType.ReadByteOrThrow(source) | 0) << 16)) | (($thisType.ReadByteOrThrow(source) | 0) << 24));
  }; 

  function ProtoReader_DirectReadString (source, length) {
    var buffer = JSIL.Array.New($T01(), length);
    $thisType.DirectReadBytes(source, buffer, 0, length);
    return $T13().get_UTF8().GetString(buffer, 0, length);
  }; 

  function ProtoReader_DirectReadVarintInt32 (source) {
    var val = new JSIL.BoxedVariable(0);
    var bytes = ($thisType.TryReadUInt32Variant(source, /* ref */ val) | 0);
    var flag = bytes <= 0;
    if (flag) {
      throw $thisType.EoF(null);
    }
    return (val.get() | 0);
  }; 

  function ProtoReader_Dispose () {
    this.source = null;
    this.model = null;
    $T15().ReleaseBufferToPool(/* ref */ new JSIL.MemberReference(this, "ioBuffer"));
    if (this.stringInterner !== null) {
      (this.stringInterner).Clear();
    }
    if (this.netCache !== null) {
      (this.netCache).Clear();
    }
  }; 

  function ProtoReader_EndSubItem (token, reader) {
    if (reader === null) {
      throw $S01().Construct("reader");
    }
    var value = (token.value | 0);
    var wireType = reader.wireType;
    if (wireType !== $T0A().EndGroup) {
      var flag2 = value < (reader.position | 0);
      if (flag2) {
        throw reader.CreateException("Sub-message not read entirely");
      }
      var flag3 = ((reader.blockEnd | 0) !== (reader.position | 0)) && 
      ((reader.blockEnd | 0) !== 2147483647);
      if (flag3) {
        throw reader.CreateException("Sub-message not read correctly");
      }
      reader.blockEnd = value;
      var num = (reader.depth | 0);
      reader.depth = ((num - 1) | 0);
    } else {
      if (value >= 0) {
        throw $thisType.AddErrorData($S04().Construct("token"), reader);
      }
      var flag5 = (-value | 0) !== (reader.fieldNumber | 0);
      if (flag5) {
        throw reader.CreateException("Wrong group was ended");
      }
      reader.wireType = $T0A().None;
      num = (reader.depth | 0);
      reader.depth = ((num - 1) | 0);
    }
  }; 

  function ProtoReader_Ensure (count, strict) {
    var bytesRead = 0;
    var flag = (count | 0) > (this.ioBuffer.length | 0);
    if (flag) {
      $T15().ResizeAndFlushLeft(/* ref */ new JSIL.MemberReference(this, "ioBuffer"), count, this.ioIndex, this.available);
      this.ioIndex = 0;
    } else {
      var flag2 = (((this.ioIndex | 0) + (count | 0)) | 0) >= (this.ioBuffer.length | 0);
      if (flag2) {
        $T0B().BlockCopy(
          this.ioBuffer, 
          this.ioIndex, 
          this.ioBuffer, 
          0, 
          this.available
        );
        this.ioIndex = 0;
      }
    }
    count = (((count | 0) - (this.available | 0)) | 0);
    var writePos = (((this.ioIndex | 0) + (this.available | 0)) | 0);
    var canRead = (((this.ioBuffer.length | 0) - writePos) | 0);
    var flag3 = this.isFixedLength;
    if (flag3) {
      var flag4 = (this.dataRemaining | 0) < canRead;
      if (flag4) {
        canRead = (this.dataRemaining | 0);
      }
    }

    while (!(((count | 0) <= 0) || 
        (canRead <= 0)) && ((bytesRead = ((this.source).Read(this.ioBuffer, writePos, canRead) | 0)) > 0)) {
      this.available = (((this.available | 0) + bytesRead) | 0);
      count = (((count | 0) - bytesRead) | 0);
      canRead = ((canRead - bytesRead) | 0);
      writePos = ((writePos + bytesRead) | 0);
      var flag5 = this.isFixedLength;
      if (flag5) {
        this.dataRemaining = (((this.dataRemaining | 0) - bytesRead) | 0);
      }
    }
    var flag6 = strict && 
    ((count | 0) > 0);
    if (flag6) {
      throw $thisType.EoF(this);
    }
  }; 

  function ProtoReader_EoF (source) {
    return $thisType.AddErrorData($S05().Construct(), source);
  }; 

  function ProtoReader_get_Context () {
    return this.context;
  }; 

  function ProtoReader_get_FieldNumber () {
    return this.fieldNumber;
  }; 

  function ProtoReader_get_InternStrings () {
    return this.internStrings;
  }; 

  function ProtoReader_get_Model () {
    return this.model;
  }; 

  function ProtoReader_get_NetCache () {
    return this.netCache;
  }; 

  function ProtoReader_get_Position () {
    return this.position;
  }; 

  function ProtoReader_get_WireType () {
    return this.wireType;
  }; 

  function ProtoReader_GetRecycled () {
    $thisType.lastReader = null;
    return $thisType.lastReader;
  }; 

  function ProtoReader_GetTypeKey (/* ref */ type) {
    return (this.model).GetKey(/* ref */ type);
  }; 

  function ProtoReader_HasSubValue (wireType, source) {
    if (source === null) {
      throw $S01().Construct("source");
    }
    var flag2 = ((source.blockEnd | 0) <= (source.position | 0)) || 
    (wireType === $T0A().EndGroup);
    if (flag2) {
      var result = false;
    } else {
      source.wireType = wireType;
      result = true;
    }
    return result;
  }; 

  function ProtoReader_Hint (wireType) {
    var flag = this.wireType === wireType;
    if (!flag) {
      var flag2 = $T0A().$Cast(wireType & $T0A().$Cast(7)) === this.wireType;
      if (flag2) {
        this.wireType = wireType;
      }
    }
  }; 

  function ProtoReader_Init (reader, source, model, context, length) {
    if (source === null) {
      throw $S01().Construct("source");
    }
    var flag2 = !source.get_CanRead();
    if (flag2) {
      throw $S06().Construct("Cannot read from stream", "source");
    }
    reader.source = source;
    reader.ioBuffer = $T15().GetBuffer();
    reader.model = model;
    var isFixedLength = (length | 0) >= 0;
    reader.isFixedLength = isFixedLength;
    reader.dataRemaining = ((
      isFixedLength
         ? length
         : 0)
     | 0);
    var flag3 = context === null;
    if (flag3) {
      context = $T04().get_Default();
    } else {
      context.Freeze();
    }
    reader.context = context;
    reader.position = reader.available = reader.depth = reader.fieldNumber = reader.ioIndex = 0;
    reader.blockEnd = 2147483647;
    reader.internStrings = true;
    reader.wireType = $T0A().None;
    reader.trapCount = 1;
    var flag4 = reader.netCache === null;
    if (flag4) {
      reader.netCache = new ($T17())();
    }
  }; 

  function ProtoReader_Intern (value) {
    var found = new JSIL.BoxedVariable(null);
    var flag = value === null;
    if (flag) {
      var result = null;
    } else {
      var flag2 = (value.length | 0) === 0;
      if (flag2) {
        result = "";
      } else {
        if (this.stringInterner === null) {
          this.stringInterner = $S07().Construct();
          (this.stringInterner).Add(value, value);
        } else {
          var flag4 = (this.stringInterner).TryGetValue(value, /* ref */ found);
          if (flag4) {
            value = found.get();
          } else {
            (this.stringInterner).Add(value, value);
          }
        }
        result = value;
      }
    }
    return result;
  }; 

  function ProtoReader_Merge (parent, from, to) {
    if (parent === null) {
      throw $S01().Construct("parent");
    }
    var model = parent.get_Model();
    var ctx = parent.get_Context();
    var flag2 = model === null;
    if (flag2) {
      throw $S08().Construct("Types cannot be merged unless a type-model has been specified");
    }
    var ms = $S09().Construct();
    try {
      $S0A().CallVirtual("Serialize", null, model, ms, from, ctx);
      ms.set_Position($T1E().Create(0, 0, 0));
      var result = $S0B().CallVirtual("Deserialize", null, model, ms, to, null);
    } finally {
      if (ms !== null) {
        $IM02().Call(ms, null);
      }
    }
    return result;
  }; 

  function ProtoReader_NoteObject (value, reader) {
    var flag = reader === null;
    if (flag) {
      throw $S01().Construct("reader");
    }
    var flag2 = (reader.trapCount >>> 0) > 0;
    if (flag2) {
      (reader.netCache).RegisterTrappedObject(value);
      var num = (reader.trapCount >>> 0);
      reader.trapCount = ((num - 1) >>> 0);
    }
  }; 

  function ProtoReader_ReadBoolean () {
    var num = (this.ReadUInt32() >>> 0);
    if (num !== 0) {
      if (num !== 1) {
        throw this.CreateException("Unexpected boolean value");
      }
      var result = true;
    } else {
      result = false;
    }
    return result;
  }; 

  function ProtoReader_ReadByte () {
    return $T01().$OverflowCheck((this.ReadUInt32() & 0xFF));
  }; 

  function ProtoReader_ReadByteOrThrow (source) {
    var val = (source.ReadByte() | 0);
    if (val < 0) {
      throw $thisType.EoF(null);
    }
    return val;
  }; 

  function ProtoReader_ReadDouble () {
    var wireType = this.wireType;
    if (wireType !== $T0A().Fixed64) {
      if (wireType !== $T0A().Fixed32) {
        throw this.CreateWireTypeException();
      }
      var result = this.ReadSingle();
    } else {
      var value = this.ReadInt64();
      result = +$T20().ToDouble($S0C().CallStatic($T20(), "GetBytes", null, value), 0);
    }
    return result;
  }; 

  function ProtoReader_ReadFieldHeader () {
    var tag = new JSIL.BoxedVariable(0);
    if (((this.blockEnd | 0) <= (this.position | 0)) || (this.wireType === $T0A().EndGroup)) {
      var result = 0;
    } else {
      var flag2 = this.TryReadUInt32Variant(/* ref */ tag);
      if (flag2) {
        this.wireType = $T0A().$Cast((tag.get() >>> 0) & 7);
        this.fieldNumber = ((tag.get() >>> 0) >>> 3 | 0);
        if ((this.fieldNumber | 0) < 1) {
          throw $S02().Construct(JSIL.ConcatString("Invalid field in source data: ", (this.fieldNumber).toString()));
        }
      } else {
        this.wireType = $T0A().None;
        this.fieldNumber = 0;
      }
      if (this.wireType === $T0A().EndGroup) {
        if ((this.depth | 0) <= 0) {
          throw $S02().Construct("Unexpected end-group in source data; this usually means the source data is corrupt");
        }
        result = 0;
      } else {
        result = (this.fieldNumber | 0);
      }
    }
    return result;
  }; 

  function ProtoReader_ReadInt16 () {
    return $T21().$OverflowCheck(((this.ReadInt32() + 0x8000 & 0xFFFF) - 0x8000));
  }; 

  function ProtoReader_ReadInt32 () {
    var wireType = this.wireType;
    if (wireType <= $T0A().Fixed64) {
      if ((wireType.valueOf() | 0) === 0) {
        var result = (this.ReadUInt32Variant(true) | 0);
        return result;
      }
      if (wireType === $T0A().Fixed64) {
        var i = this.ReadInt64();
        result = ($T05().$OverflowCheck(i.ToNumber(4294967295, true)) | 0);
        return result;
      }
    } else {
      if (wireType === $T0A().Fixed32) {
        if ((this.available | 0) < 4) {
          this.Ensure(4, true);
        }
        this.position = (((this.position | 0) + 4) | 0);
        this.available = (((this.available | 0) - 4) | 0);
        var arg_88_0 = this.ioBuffer;
        var num = (this.ioIndex | 0);
        this.ioIndex = ((num + 1) | 0);
        var arg_A6_0 = (arg_88_0[num] | 0);
        var arg_A3_0 = this.ioBuffer;
        num = (this.ioIndex | 0);
        this.ioIndex = ((num + 1) | 0);
        var arg_C5_0 = arg_A6_0 | ((arg_A3_0[num] | 0) << 8);
        var arg_C1_0 = this.ioBuffer;
        num = (this.ioIndex | 0);
        this.ioIndex = ((num + 1) | 0);
        var arg_E4_0 = arg_C5_0 | ((arg_C1_0[num] | 0) << 16);
        var arg_E0_0 = this.ioBuffer;
        num = (this.ioIndex | 0);
        this.ioIndex = ((num + 1) | 0);
        result = arg_E4_0 | ((arg_E0_0[num] | 0) << 24);
        return result;
      }
      if (wireType === $T0A().SignedVariant) {
        result = ($S0D().CallStatic($thisType, "Zag", null, this.ReadUInt32Variant(true)) | 0);
        return result;
      }
    }
    throw this.CreateWireTypeException();
  }; 

  function ProtoReader_ReadInt64 () {
    var wireType = this.wireType;
    if (wireType <= $T0A().Fixed64) {
      if ((wireType.valueOf() | 0) === 0) {
        var result = (this.ReadUInt64Variant()).ToInt64();
        return result;
      }
      if (wireType === $T0A().Fixed64) {
        if ((this.available | 0) < 8) {
          this.Ensure(8, true);
        }
        this.position = (((this.position | 0) + 8) | 0);
        this.available = (((this.available | 0) - 8) | 0);
        var arg_8E_0 = this.ioBuffer;
        var num = (this.ioIndex | 0);
        this.ioIndex = ((num + 1) | 0);
        var arg_AB_0 = (arg_8E_0[num]).ToInt64();
        var arg_A7_0 = this.ioBuffer;
        num = (this.ioIndex | 0);
        this.ioIndex = ((num + 1) | 0);
        var arg_C8_0 = $T1E().op_BitwiseOr(arg_AB_0, $T1E().op_LeftShift((arg_A7_0[num]).ToInt64(), 8));
        var arg_C3_0 = this.ioBuffer;
        num = (this.ioIndex | 0);
        this.ioIndex = ((num + 1) | 0);
        var arg_E5_0 = $T1E().op_BitwiseOr(arg_C8_0, $T1E().op_LeftShift((arg_C3_0[num]).ToInt64(), 16));
        var arg_E0_0 = this.ioBuffer;
        num = (this.ioIndex | 0);
        this.ioIndex = ((num + 1) | 0);
        var arg_102_0 = $T1E().op_BitwiseOr(arg_E5_0, $T1E().op_LeftShift((arg_E0_0[num]).ToInt64(), 24));
        var arg_FD_0 = this.ioBuffer;
        num = (this.ioIndex | 0);
        this.ioIndex = ((num + 1) | 0);
        var arg_11F_0 = $T1E().op_BitwiseOr(arg_102_0, $T1E().op_LeftShift((arg_FD_0[num]).ToInt64(), 32));
        var arg_11A_0 = this.ioBuffer;
        num = (this.ioIndex | 0);
        this.ioIndex = ((num + 1) | 0);
        var arg_13C_0 = $T1E().op_BitwiseOr(arg_11F_0, $T1E().op_LeftShift((arg_11A_0[num]).ToInt64(), 40));
        var arg_137_0 = this.ioBuffer;
        num = (this.ioIndex | 0);
        this.ioIndex = ((num + 1) | 0);
        var arg_159_0 = $T1E().op_BitwiseOr(arg_13C_0, $T1E().op_LeftShift((arg_137_0[num]).ToInt64(), 48));
        var arg_154_0 = this.ioBuffer;
        num = (this.ioIndex | 0);
        this.ioIndex = ((num + 1) | 0);
        result = $T1E().op_BitwiseOr(arg_159_0, $T1E().op_LeftShift((arg_154_0[num]).ToInt64(), 56));
        return result;
      }
    } else {
      if (wireType === $T0A().Fixed32) {
        result = $T1E().FromNumber(this.ReadInt32());
        return result;
      }
      if (wireType === $T0A().SignedVariant) {
        result = $S0E().CallStatic($thisType, "Zag", null, this.ReadUInt64Variant());
        return result;
      }
    }
    throw this.CreateWireTypeException();
  }; 

  function ProtoReader_ReadLengthPrefix$04 (source, expectHeader, style, /* ref */ fieldNumber) {
    var bytesRead = new JSIL.BoxedVariable(0);
    return $thisType.ReadLengthPrefix(
      source, 
      expectHeader, 
      style, 
      /* ref */ fieldNumber, 
      /* ref */ bytesRead
    );
  }; 

  function ProtoReader_ReadLengthPrefix$05 (source, expectHeader, style, /* ref */ fieldNumber, /* ref */ bytesRead) {
    var val = new JSIL.BoxedVariable(0);
    fieldNumber.set(0);
    switch (style.valueOf()) {
      case 0: 
        bytesRead.set(0);
        var result = 2147483647;
        break;

      case 1: 
        bytesRead.set(0);
        if (expectHeader) {
          var tmpBytesRead = ($thisType.TryReadUInt32Variant(source, /* ref */ val) | 0);
          bytesRead.set((((bytesRead.get() | 0) + tmpBytesRead) | 0));
          var flag = tmpBytesRead > 0;
          if (flag) {
            var flag2 = ((val.get() >>> 0) & 7) !== 2;
            if (flag2) {
              throw $S0F().Construct();
            }
            fieldNumber.set(((val.get() >>> 0) >>> 3 | 0));
            tmpBytesRead = ($thisType.TryReadUInt32Variant(source, /* ref */ val) | 0);
            bytesRead.set((((bytesRead.get() | 0) + tmpBytesRead) | 0));
            var flag3 = (bytesRead.get() | 0) === 0;
            if (flag3) {
              throw $thisType.EoF(null);
            }
            result = (val.get() | 0);
          } else {
            bytesRead.set(0);
            result = -1;
          }
        } else {
          tmpBytesRead = ($thisType.TryReadUInt32Variant(source, /* ref */ val) | 0);
          bytesRead.set((((bytesRead.get() | 0) + tmpBytesRead) | 0));
          result = ((
            ((bytesRead.get() | 0) < 0)
               ? 4294967295
               : val.get())
           | 0);
        }
        break;

      case 2: 
        var b = (source.ReadByte() | 0);
        if (b < 0) {
          bytesRead.set(0);
          result = -1;
        } else {
          bytesRead.set(4);
          result = ((b | (($thisType.ReadByteOrThrow(source) | 0) << 8)) | (($thisType.ReadByteOrThrow(source) | 0) << 16)) | (($thisType.ReadByteOrThrow(source) | 0) << 24);
        }
        break;

      case 3: 
        var b2 = (source.ReadByte() | 0);
        if (b2 < 0) {
          bytesRead.set(0);
          result = -1;
        } else {
          bytesRead.set(4);
          result = (((b2 << 24) | (($thisType.ReadByteOrThrow(source) | 0) << 16)) | (($thisType.ReadByteOrThrow(source) | 0) << 8)) | ($thisType.ReadByteOrThrow(source) | 0);
        }
        break;

      default: 
        throw $S10().Construct("style");

    }
    return result;
  }; 

  function ProtoReader_ReadObject (value, key, reader) {
    return $thisType.ReadTypedObject(value, key, reader, null);
  }; 

  function ProtoReader_ReadSByte () {
    return $T24().$OverflowCheck(((this.ReadInt32() + 0x80 & 0xFF) - 0x80));
  }; 

  function ProtoReader_ReadSingle () {
    var wireType = this.wireType;
    if (wireType !== $T0A().Fixed64) {
      if (wireType !== $T0A().Fixed32) {
        throw this.CreateWireTypeException();
      }
      var value = (this.ReadInt32() | 0);
      var result = +$T20().ToSingle($S11().CallStatic($T20(), "GetBytes", null, value), 0);
    } else {
      var value2 = +this.ReadDouble();
      var f = Math.fround(value2);
      var flag = $S12().CallStatic($T0B(), "IsInfinity", null, f) && 
      !$S13().CallStatic($T0B(), "IsInfinity", null, value2);
      if (flag) {
        throw $thisType.AddErrorData($S14().Construct(), this);
      }
      result = f;
    }
    return result;
  }; 

  function ProtoReader_ReadString () {
    if (this.wireType === $T0A().String) {
      var bytes = (this.ReadUInt32Variant(false) | 0);
      if (bytes === 0) {
        var result = "";
      } else {
        var flag3 = (this.available | 0) < bytes;
        if (flag3) {
          this.Ensure(bytes, true);
        }
        var s = $thisType.encoding.GetString(this.ioBuffer, this.ioIndex, bytes);
        var flag4 = this.internStrings;
        if (flag4) {
          s = this.Intern(s);
        }
        this.available = (((this.available | 0) - bytes) | 0);
        this.position = (((this.position | 0) + bytes) | 0);
        this.ioIndex = (((this.ioIndex | 0) + bytes) | 0);
        result = s;
      }
      return result;
    }
    throw this.CreateWireTypeException();
  }; 

  function ProtoReader_ReadType () {
    return $T03().DeserializeType(this.model, this.ReadString());
  }; 

  function ProtoReader_ReadTypedObject ($value, key, reader, type) {
    var value = new JSIL.BoxedVariable($value);
    var flag = reader.model === null;
    if (flag) {
      throw $thisType.AddErrorData($S08().Construct("Cannot deserialize sub-objects unless a model is provided"), reader);
    }
    var token = $thisType.StartSubItem(reader);
    if ((key | 0) >= 0) {
      value.set($S15().CallVirtual("Deserialize", null, reader.model, key, value.get(), reader));
    } else {
      var flag3 = (type !== null) && 
      (reader.model).TryDeserializeAuxiliaryType(
        reader, 
        $T27().Default, 
        1, 
        type, 
        /* ref */ value, 
        true, 
        false, 
        true, 
        false
      );
      if (!flag3) {
        $T03().ThrowUnexpectedType(type);
      }
    }
    $thisType.EndSubItem(token, reader);
    return value.get();
  }; 

  function ProtoReader_ReadUInt16 () {
    return $T28().$OverflowCheck((this.ReadUInt32() & 0xFFFF));
  }; 

  function ProtoReader_ReadUInt32 () {
    var wireType = this.wireType;
    if ((wireType.valueOf() | 0) !== 0) {
      if (wireType !== $T0A().Fixed64) {
        if (wireType !== $T0A().Fixed32) {
          throw this.CreateWireTypeException();
        }
        if ((this.available | 0) < 4) {
          this.Ensure(4, true);
        }
        this.position = (((this.position | 0) + 4) | 0);
        this.available = (((this.available | 0) - 4) | 0);
        var arg_78_0 = this.ioBuffer;
        var num = (this.ioIndex | 0);
        this.ioIndex = ((num + 1) | 0);
        var arg_96_0 = (arg_78_0[num] >>> 0);
        var arg_93_0 = this.ioBuffer;
        num = (this.ioIndex | 0);
        this.ioIndex = ((num + 1) | 0);
        var arg_B5_0 = arg_96_0 | ((arg_93_0[num] >>> 0) << 8);
        var arg_B1_0 = this.ioBuffer;
        num = (this.ioIndex | 0);
        this.ioIndex = ((num + 1) | 0);
        var arg_D4_0 = arg_B5_0 | ((arg_B1_0[num] >>> 0) << 16);
        var arg_D0_0 = this.ioBuffer;
        num = (this.ioIndex | 0);
        this.ioIndex = ((num + 1) | 0);
        var result = arg_D4_0 | ((arg_D0_0[num] >>> 0) << 24);
      } else {
        var val = this.ReadUInt64();
        result = ($T14().$OverflowCheck(val.ToNumber(4294967295, false)) >>> 0);
      }
    } else {
      result = (this.ReadUInt32Variant(false) >>> 0);
    }
    return result;
  }; 

  function ProtoReader_ReadUInt32Variant (trimNegative) {
    var value = new JSIL.BoxedVariable(0);
    var read = (this.TryReadUInt32VariantWithoutMoving(trimNegative, /* ref */ value) | 0);
    if (read > 0) {
      this.ioIndex = (((this.ioIndex | 0) + read) | 0);
      this.available = (((this.available | 0) - read) | 0);
      this.position = (((this.position | 0) + read) | 0);
      return value.get();
    }
    throw $thisType.EoF(this);
  }; 

  function ProtoReader_ReadUInt64 () {
    var wireType = this.wireType;
    if ((wireType.valueOf() | 0) !== 0) {
      if (wireType !== $T0A().Fixed64) {
        if (wireType !== $T0A().Fixed32) {
          throw this.CreateWireTypeException();
        }
        var result = $T29().FromNumber(this.ReadUInt32());
      } else {
        if ((this.available | 0) < 8) {
          this.Ensure(8, true);
        }
        this.position = (((this.position | 0) + 8) | 0);
        this.available = (((this.available | 0) - 8) | 0);
        var arg_7E_0 = this.ioBuffer;
        var num = (this.ioIndex | 0);
        this.ioIndex = ((num + 1) | 0);
        var arg_9B_0 = arg_7E_0[num];
        var arg_97_0 = this.ioBuffer;
        num = (this.ioIndex | 0);
        this.ioIndex = ((num + 1) | 0);
        var arg_B8_0 = $T29().op_BitwiseOr(arg_9B_0, $T29().op_LeftShift(arg_97_0[num], 8));
        var arg_B3_0 = this.ioBuffer;
        num = (this.ioIndex | 0);
        this.ioIndex = ((num + 1) | 0);
        var arg_D5_0 = $T29().op_BitwiseOr(arg_B8_0, $T29().op_LeftShift(arg_B3_0[num], 16));
        var arg_D0_0 = this.ioBuffer;
        num = (this.ioIndex | 0);
        this.ioIndex = ((num + 1) | 0);
        var arg_F2_0 = $T29().op_BitwiseOr(arg_D5_0, $T29().op_LeftShift(arg_D0_0[num], 24));
        var arg_ED_0 = this.ioBuffer;
        num = (this.ioIndex | 0);
        this.ioIndex = ((num + 1) | 0);
        var arg_10F_0 = $T29().op_BitwiseOr(arg_F2_0, $T29().op_LeftShift(arg_ED_0[num], 32));
        var arg_10A_0 = this.ioBuffer;
        num = (this.ioIndex | 0);
        this.ioIndex = ((num + 1) | 0);
        var arg_12C_0 = $T29().op_BitwiseOr(arg_10F_0, $T29().op_LeftShift(arg_10A_0[num], 40));
        var arg_127_0 = this.ioBuffer;
        num = (this.ioIndex | 0);
        this.ioIndex = ((num + 1) | 0);
        var arg_149_0 = $T29().op_BitwiseOr(arg_12C_0, $T29().op_LeftShift(arg_127_0[num], 48));
        var arg_144_0 = this.ioBuffer;
        num = (this.ioIndex | 0);
        this.ioIndex = ((num + 1) | 0);
        result = $T29().op_BitwiseOr(arg_149_0, $T29().op_LeftShift(arg_144_0[num], 56));
      }
    } else {
      result = this.ReadUInt64Variant();
    }
    return result;
  }; 

  function ProtoReader_ReadUInt64Variant () {
    var value = new JSIL.BoxedVariable($T29().Create(0, 0, 0));
    var read = (this.TryReadUInt64VariantWithoutMoving(/* ref */ value) | 0);
    if (read > 0) {
      this.ioIndex = (((this.ioIndex | 0) + read) | 0);
      this.available = (((this.available | 0) - read) | 0);
      this.position = (((this.position | 0) + read) | 0);
      return value.get();
    }
    throw $thisType.EoF(this);
  }; 

  function ProtoReader_Recycle (reader) {
    var flag = reader !== null;
    if (flag) {
      reader.Dispose();
      $thisType.lastReader = reader;
    }
  }; 

  function ProtoReader_Seek (source, count, $buffer) {
    var buffer = new JSIL.BoxedVariable($buffer);
    var bytesRead = 0, bytesRead2 = 0;
    var canSeek = source.get_CanSeek();
    if (canSeek) {
      source.Seek($T1E().FromNumber(count), $T2A().Current);
      count = 0;
    } else {
      var flag = buffer.get() !== null;
      if (flag) {

        for (; ((count | 0) > (buffer.get().length | 0)) && ((bytesRead = (source.Read(buffer.get(), 0, buffer.get().length) | 0)) > 0); count = (((count | 0) - bytesRead) | 0)) {
        }

        for (; ((count | 0) > 0) && ((bytesRead = (source.Read(buffer.get(), 0, count) | 0)) > 0); count = (((count | 0) - bytesRead) | 0)) {
        }
      } else {
        buffer.set($T15().GetBuffer());
        try {

          for (; ((count | 0) > (buffer.get().length | 0)) && ((bytesRead2 = (source.Read(buffer.get(), 0, buffer.get().length) | 0)) > 0); count = (((count | 0) - bytesRead2) | 0)) {
          }

          for (; ((count | 0) > 0) && ((bytesRead2 = (source.Read(buffer.get(), 0, count) | 0)) > 0); count = (((count | 0) - bytesRead2) | 0)) {
          }
        } finally {
          $T15().ReleaseBufferToPool(/* ref */ buffer);
        }
      }
    }
    var flag2 = (count | 0) > 0;
    if (flag2) {
      throw $thisType.EoF(null);
    }
  }; 

  function ProtoReader_set_InternStrings (value) {
    this.internStrings = value;
  }; 

  function ProtoReader_SetRootObject (value) {
    (this.netCache).SetKeyedObject(0, value);
    var num = (this.trapCount >>> 0);
    this.trapCount = ((num - 1) >>> 0);
  }; 

  function ProtoReader_SkipField () {
    switch ((this.wireType).valueOf()) {
      case 0: 
      case 8: 
        this.ReadUInt64Variant();
        return;

      case 1: 
        if ((this.available | 0) < 8) {
          this.Ensure(8, true);
        }
        this.available = (((this.available | 0) - 8) | 0);
        this.ioIndex = (((this.ioIndex | 0) + 8) | 0);
        this.position = (((this.position | 0) + 8) | 0);
        return;

      case 2: 
        var len = (this.ReadUInt32Variant(false) | 0);
        var flag2 = len <= (this.available | 0);
        if (flag2) {
          this.available = (((this.available | 0) - len) | 0);
          this.ioIndex = (((this.ioIndex | 0) + len) | 0);
          this.position = (((this.position | 0) + len) | 0);
          return;
        }
        this.position = (((this.position | 0) + len) | 0);
        len = ((len - (this.available | 0)) | 0);
        this.ioIndex = this.available = 0;
        var flag3 = this.isFixedLength;
        if (flag3) {
          var flag4 = len > (this.dataRemaining | 0);
          if (flag4) {
            throw $thisType.EoF(this);
          }
          this.dataRemaining = (((this.dataRemaining | 0) - len) | 0);
        }
        $thisType.Seek(this.source, len, this.ioBuffer);
        return;

      case 3: 
        var originalFieldNumber = (this.fieldNumber | 0);
        var num = (this.depth | 0);
        this.depth = ((num + 1) | 0);

        while ((this.ReadFieldHeader() | 0) > 0) {
          this.SkipField();
        }
        num = (this.depth | 0);
        this.depth = ((num - 1) | 0);
        var flag5 = (this.wireType === $T0A().EndGroup) && 
        ((this.fieldNumber | 0) === originalFieldNumber);
        if (flag5) {
          this.wireType = $T0A().None;
          return;
        }
        throw this.CreateWireTypeException();

      case 5: 
        if ((this.available | 0) < 4) {
          this.Ensure(4, true);
        }
        this.available = (((this.available | 0) - 4) | 0);
        this.ioIndex = (((this.ioIndex | 0) + 4) | 0);
        this.position = (((this.position | 0) + 4) | 0);
        return;

    }
    throw this.CreateWireTypeException();
  }; 

  function ProtoReader_StartSubItem (reader) {
    var flag = reader === null;
    if (flag) {
      throw $S01().Construct("reader");
    }
    var wireType = reader.wireType;
    if (wireType !== $T0A().String) {
      if (wireType !== $T0A().StartGroup) {
        throw reader.CreateWireTypeException();
      }
      reader.wireType = $T0A().None;
      var num = (reader.depth | 0);
      reader.depth = ((num + 1) | 0);
      var result = new ($T10())((-reader.fieldNumber | 0));
    } else {
      var len = (reader.ReadUInt32Variant(false) | 0);
      if (len < 0) {
        throw $thisType.AddErrorData($S0F().Construct(), reader);
      }
      var lastEnd = (reader.blockEnd | 0);
      reader.blockEnd = (((reader.position | 0) + len) | 0);
      num = (reader.depth | 0);
      reader.depth = ((num + 1) | 0);
      result = new ($T10())(lastEnd);
    }
    return result;
  }; 

  function ProtoReader_ThrowEnumException (type, value) {
    var desc = (
      (type === null)
         ? "<null>"
         : type.get_FullName())
    ;
    throw $thisType.AddErrorData($S02().Construct(("No " + desc + " enum is mapped to the wire-value " + (value).toString())), this);
  }; 

  function ProtoReader_TrapNextObject (newObjectKey) {
    var num = (this.trapCount >>> 0);
    this.trapCount = ((num + 1) >>> 0);
    (this.netCache).SetKeyedObject(newObjectKey, null);
  }; 

  function ProtoReader_TryReadFieldHeader (field) {
    var tag = new JSIL.BoxedVariable(0);
    var tmpWireType = $asm0E.ProtoBuf.WireType.Variant;
    if (((this.blockEnd | 0) <= (this.position | 0)) || (this.wireType === $T0A().EndGroup)) {
      var result = false;
    } else {
      var read = (this.TryReadUInt32VariantWithoutMoving(false, /* ref */ tag) | 0);
      var flag2 = !((read <= 0) || 
        (((tag.get() | 0) >> 3) !== (field | 0))) && 
      ((tmpWireType = $T0A().$Cast((tag.get() >>> 0) & 7)) !== $T0A().EndGroup);
      if (flag2) {
        this.wireType = tmpWireType;
        this.fieldNumber = (field | 0);
        this.position = (((this.position | 0) + read) | 0);
        this.ioIndex = (((this.ioIndex | 0) + read) | 0);
        this.available = (((this.available | 0) - read) | 0);
        result = true;
      } else {
        result = false;
      }
    }
    return result;
  }; 

  function ProtoReader_TryReadUInt32Variant$06 (/* ref */ value) {
    var read = (this.TryReadUInt32VariantWithoutMoving(false, /* ref */ value) | 0);
    if (read > 0) {
      this.ioIndex = (((this.ioIndex | 0) + read) | 0);
      this.available = (((this.available | 0) - read) | 0);
      this.position = (((this.position | 0) + read) | 0);
      var result = true;
    } else {
      result = false;
    }
    return result;
  }; 

  function ProtoReader_TryReadUInt32Variant$07 (source, /* ref */ value) {
    value.set(0);
    var b = (source.ReadByte() | 0);
    var flag = b < 0;
    if (flag) {
      var result = 0;
    } else {
      value.set((b >>> 0));
      var flag2 = ((value.get() >>> 0) & 128) === 0;
      if (flag2) {
        result = 1;
      } else {
        value.set((value.get() >>> 0) & 127);
        b = (source.ReadByte() | 0);
        var flag3 = b < 0;
        if (flag3) {
          throw $thisType.EoF(null);
        }
        value.set((value.get() >>> 0) | ((b & 127 >>> 0) << 7 >>> 0));
        var flag4 = (b & 128) === 0;
        if (flag4) {
          result = 2;
        } else {
          b = (source.ReadByte() | 0);
          var flag5 = b < 0;
          if (flag5) {
            throw $thisType.EoF(null);
          }
          value.set((value.get() >>> 0) | ((b & 127 >>> 0) << 14 >>> 0));
          var flag6 = (b & 128) === 0;
          if (flag6) {
            result = 3;
          } else {
            b = (source.ReadByte() | 0);
            var flag7 = b < 0;
            if (flag7) {
              throw $thisType.EoF(null);
            }
            value.set((value.get() >>> 0) | ((b & 127 >>> 0) << 21 >>> 0));
            var flag8 = (b & 128) === 0;
            if (flag8) {
              result = 4;
            } else {
              b = (source.ReadByte() | 0);
              var flag9 = b < 0;
              if (flag9) {
                throw $thisType.EoF(null);
              }
              value.set((value.get() >>> 0) | ((b >>> 0) << 28 >>> 0));
              var flag10 = (b & 240) === 0;
              if (!flag10) {
                throw $S14().Construct();
              }
              result = 5;
            }
          }
        }
      }
    }
    return result;
  }; 

  function ProtoReader_TryReadUInt32VariantWithoutMoving (trimNegative, /* ref */ value) {
    if ((this.available | 0) < 10) {
      this.Ensure(10, false);
    }
    if ((this.available | 0) === 0) {
      value.set(0);
      var result = 0;
    } else {
      var readPos = (this.ioIndex | 0);
      var arg_4A_0 = this.ioBuffer;
      var num = readPos;
      readPos = ((num + 1) | 0);
      value.set(arg_4A_0[num]);
      var flag3 = ((value.get() >>> 0) & 128) === 0;
      if (flag3) {
        result = 1;
      } else {
        value.set((value.get() >>> 0) & 127);
        if ((this.available | 0) === 1) {
          throw $thisType.EoF(this);
        }
        var arg_92_0 = this.ioBuffer;
        num = readPos;
        readPos = ((num + 1) | 0);
        var chunk = (arg_92_0[num] >>> 0);
        value.set((value.get() >>> 0) | ((chunk & 127) << 7));
        var flag5 = (chunk & 128) === 0;
        if (flag5) {
          result = 2;
        } else {
          if ((this.available | 0) === 2) {
            throw $thisType.EoF(this);
          }
          var arg_DD_0 = this.ioBuffer;
          num = readPos;
          readPos = ((num + 1) | 0);
          chunk = (arg_DD_0[num] >>> 0);
          value.set((value.get() >>> 0) | ((chunk & 127) << 14));
          var flag7 = (chunk & 128) === 0;
          if (flag7) {
            result = 3;
          } else {
            if ((this.available | 0) === 3) {
              throw $thisType.EoF(this);
            }
            var arg_129_0 = this.ioBuffer;
            num = readPos;
            readPos = ((num + 1) | 0);
            chunk = (arg_129_0[num] >>> 0);
            value.set((value.get() >>> 0) | ((chunk & 127) << 21));
            var flag9 = (chunk & 128) === 0;
            if (flag9) {
              result = 4;
            } else {
              if ((this.available | 0) === 4) {
                throw $thisType.EoF(this);
              }
              chunk = (this.ioBuffer[readPos] | 0);
              value.set((value.get() >>> 0) | (chunk << 28));
              var flag11 = (chunk & 240) === 0;
              if (flag11) {
                result = 5;
              } else {

                var $label0 = 0;
              $labelgroup0: 
                while (true) {
                  switch ($label0) {
                    case 0: /* $entry0 */ 
                      if (!(!trimNegative || 
                          ((chunk & 240) !== 240) || ((this.available | 0) < 10))) {
                        var arg_1C0_0 = this.ioBuffer;
                        num = ((readPos + 1) | 0);
                        readPos = num;
                        if ((arg_1C0_0[num] | 0) === 255) {
                          var arg_1D8_0 = this.ioBuffer;
                          num = ((readPos + 1) | 0);
                          readPos = num;
                          if ((arg_1D8_0[num] | 0) === 255) {
                            var arg_1F0_0 = this.ioBuffer;
                            num = ((readPos + 1) | 0);
                            readPos = num;
                            if ((arg_1F0_0[num] | 0) === 255) {
                              var arg_208_0 = this.ioBuffer;
                              num = ((readPos + 1) | 0);
                              readPos = num;
                              if ((arg_208_0[num] | 0) === 255) {
                                var arg_220_0 = this.ioBuffer;
                                num = ((readPos + 1) | 0);
                                var arg_227_0 = (arg_220_0[num] | 0) === 1;
                                break $labelgroup0;
                              }
                            }
                          }
                        }
                      }
                      arg_227_0 = false;
                      break $labelgroup0;

                  }
                }
                /* Original label IL_227 */ 
                var flag12 = arg_227_0;
                if (!flag12) {
                  throw $thisType.AddErrorData($S14().Construct(), this);
                }
                result = 10;
              }
            }
          }
        }
      }
    }
    return result;
  }; 

  function ProtoReader_TryReadUInt64VariantWithoutMoving (/* ref */ value) {
    if ((this.available | 0) < 10) {
      this.Ensure(10, false);
    }
    if ((this.available | 0) === 0) {
      value.set($T29().Create(0, 0, 0));
      var result = 0;
    } else {
      var readPos = (this.ioIndex | 0);
      var arg_4B_0 = this.ioBuffer;
      var num = readPos;
      readPos = ((num + 1) | 0);
      value.set(arg_4B_0[num]);
      var flag3 = $T29().op_Equality(
        $T29().op_BitwiseAnd(
          value.get(), 
          $T29().Create(128, 0, 0)
        ), 
        $T29().Create(0, 0, 0)
      );
      if (flag3) {
        result = 1;
      } else {
        value.set($T29().op_BitwiseAnd(
            value.get(), 
            $T29().Create(127, 0, 0)
          ));
        if ((this.available | 0) === 1) {
          throw $thisType.EoF(this);
        }
        var arg_97_0 = this.ioBuffer;
        num = readPos;
        readPos = ((num + 1) | 0);
        var chunk = arg_97_0[num];
        value.set($T29().op_BitwiseOr(
            value.get(), 
            $T29().op_LeftShift($T29().op_BitwiseAnd(chunk, $T29().Create(127, 0, 0)), 7)
          ));
        var flag5 = $T29().op_Equality(
          $T29().op_BitwiseAnd(chunk, $T29().Create(128, 0, 0)), 
          $T29().Create(0, 0, 0)
        );
        if (flag5) {
          result = 2;
        } else {
          if ((this.available | 0) === 2) {
            throw $thisType.EoF(this);
          }
          var arg_E6_0 = this.ioBuffer;
          num = readPos;
          readPos = ((num + 1) | 0);
          chunk = arg_E6_0[num];
          value.set($T29().op_BitwiseOr(
              value.get(), 
              $T29().op_LeftShift($T29().op_BitwiseAnd(chunk, $T29().Create(127, 0, 0)), 14)
            ));
          var flag7 = $T29().op_Equality(
            $T29().op_BitwiseAnd(chunk, $T29().Create(128, 0, 0)), 
            $T29().Create(0, 0, 0)
          );
          if (flag7) {
            result = 3;
          } else {
            if ((this.available | 0) === 3) {
              throw $thisType.EoF(this);
            }
            var arg_136_0 = this.ioBuffer;
            num = readPos;
            readPos = ((num + 1) | 0);
            chunk = arg_136_0[num];
            value.set($T29().op_BitwiseOr(
                value.get(), 
                $T29().op_LeftShift($T29().op_BitwiseAnd(chunk, $T29().Create(127, 0, 0)), 21)
              ));
            var flag9 = $T29().op_Equality(
              $T29().op_BitwiseAnd(chunk, $T29().Create(128, 0, 0)), 
              $T29().Create(0, 0, 0)
            );
            if (flag9) {
              result = 4;
            } else {
              if ((this.available | 0) === 4) {
                throw $thisType.EoF(this);
              }
              var arg_186_0 = this.ioBuffer;
              num = readPos;
              readPos = ((num + 1) | 0);
              chunk = arg_186_0[num];
              value.set($T29().op_BitwiseOr(
                  value.get(), 
                  $T29().op_LeftShift($T29().op_BitwiseAnd(chunk, $T29().Create(127, 0, 0)), 28)
                ));
              var flag11 = $T29().op_Equality(
                $T29().op_BitwiseAnd(chunk, $T29().Create(128, 0, 0)), 
                $T29().Create(0, 0, 0)
              );
              if (flag11) {
                result = 5;
              } else {
                if ((this.available | 0) === 5) {
                  throw $thisType.EoF(this);
                }
                var arg_1D6_0 = this.ioBuffer;
                num = readPos;
                readPos = ((num + 1) | 0);
                chunk = arg_1D6_0[num];
                value.set($T29().op_BitwiseOr(
                    value.get(), 
                    $T29().op_LeftShift($T29().op_BitwiseAnd(chunk, $T29().Create(127, 0, 0)), 35)
                  ));
                var flag13 = $T29().op_Equality(
                  $T29().op_BitwiseAnd(chunk, $T29().Create(128, 0, 0)), 
                  $T29().Create(0, 0, 0)
                );
                if (flag13) {
                  result = 6;
                } else {
                  if ((this.available | 0) === 6) {
                    throw $thisType.EoF(this);
                  }
                  var arg_226_0 = this.ioBuffer;
                  num = readPos;
                  readPos = ((num + 1) | 0);
                  chunk = arg_226_0[num];
                  value.set($T29().op_BitwiseOr(
                      value.get(), 
                      $T29().op_LeftShift($T29().op_BitwiseAnd(chunk, $T29().Create(127, 0, 0)), 42)
                    ));
                  var flag15 = $T29().op_Equality(
                    $T29().op_BitwiseAnd(chunk, $T29().Create(128, 0, 0)), 
                    $T29().Create(0, 0, 0)
                  );
                  if (flag15) {
                    result = 7;
                  } else {
                    if ((this.available | 0) === 7) {
                      throw $thisType.EoF(this);
                    }
                    var arg_276_0 = this.ioBuffer;
                    num = readPos;
                    readPos = ((num + 1) | 0);
                    chunk = arg_276_0[num];
                    value.set($T29().op_BitwiseOr(
                        value.get(), 
                        $T29().op_LeftShift($T29().op_BitwiseAnd(chunk, $T29().Create(127, 0, 0)), 49)
                      ));
                    var flag17 = $T29().op_Equality(
                      $T29().op_BitwiseAnd(chunk, $T29().Create(128, 0, 0)), 
                      $T29().Create(0, 0, 0)
                    );
                    if (flag17) {
                      result = 8;
                    } else {
                      if ((this.available | 0) === 8) {
                        throw $thisType.EoF(this);
                      }
                      var arg_2C6_0 = this.ioBuffer;
                      num = readPos;
                      readPos = ((num + 1) | 0);
                      chunk = arg_2C6_0[num];
                      value.set($T29().op_BitwiseOr(
                          value.get(), 
                          $T29().op_LeftShift($T29().op_BitwiseAnd(chunk, $T29().Create(127, 0, 0)), 56)
                        ));
                      var flag19 = $T29().op_Equality(
                        $T29().op_BitwiseAnd(chunk, $T29().Create(128, 0, 0)), 
                        $T29().Create(0, 0, 0)
                      );
                      if (flag19) {
                        result = 9;
                      } else {
                        if ((this.available | 0) === 9) {
                          throw $thisType.EoF(this);
                        }
                        chunk = $T29().FromNumber(this.ioBuffer[readPos]);
                        value.set($T29().op_BitwiseOr(
                            value.get(), 
                            $T29().op_LeftShift(chunk, 63)
                          ));
                        var flag21 = $T29().op_GreaterThan(
                          $T29().op_BitwiseAnd(chunk, $T29().Create(16777214, 16777215, 65535)), 
                          $T29().Create(0, 0, 0)
                        );
                        if (flag21) {
                          throw $thisType.AddErrorData($S14().Construct(), this);
                        }
                        result = 10;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    return result;
  }; 

  function ProtoReader_Zag$08 (ziggedValue) {
    return ((-((ziggedValue >>> 0) & 1) >>> 0) ^ (((ziggedValue | 0) >> 1) & 2147483647 >>> 0) | 0);
  }; 

  function ProtoReader_Zag$09 (ziggedValue) {
    return ($T29().op_ExclusiveOr(
        $T1E().op_UnaryNegation(($T29().op_BitwiseAnd(ziggedValue, $T29().Create(1, 0, 0))).ToInt64()), 
        $T29().op_BitwiseAnd(
          $T29().op_RightShift(ziggedValue, 1), 
          $T29().Create(16777215, 16777215, 32767)
        )
      )).ToInt64();
  }; 

  JSIL.MakeType({
      BaseType: $asm14.TypeRef("System.Object"), 
      Name: "ProtoBuf.ProtoReader", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm14.TypeRef("System.IO.Stream"), $asm0E.TypeRef("ProtoBuf.Meta.TypeModel"), 
          $asm0E.TypeRef("ProtoBuf.SerializationContext")
        ]), 
      ProtoReader__ctor$00
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm14.TypeRef("System.IO.Stream"), $asm0E.TypeRef("ProtoBuf.Meta.TypeModel"), 
          $asm0E.TypeRef("ProtoBuf.SerializationContext"), $.Int32
        ]), 
      ProtoReader__ctor$01
    );

    $.Method({Static:true , Public:false}, "AddErrorData", 
      new JSIL.MethodSignature($asm14.TypeRef("System.Exception"), [$asm14.TypeRef("System.Exception"), $.Type]), 
      ProtoReader_AddErrorData
    );

    $.Method({Static:true , Public:true }, "AppendBytes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$jsilcore.TypeRef("System.Array", [$.Byte]), $.Type]), 
      ProtoReader_AppendBytes
    );

    $.Method({Static:false, Public:true }, "AppendExtensionData", 
      JSIL.MethodSignature.Action($asm0E.TypeRef("ProtoBuf.IExtensible")), 
      ProtoReader_AppendExtensionData
    );

    $.Method({Static:false, Public:false}, "AppendExtensionField", 
      JSIL.MethodSignature.Action($asm0E.TypeRef("ProtoBuf.ProtoWriter")), 
      ProtoReader_AppendExtensionField
    );

    $.Method({Static:false, Public:true }, "Assert", 
      JSIL.MethodSignature.Action($asm0E.TypeRef("ProtoBuf.WireType")), 
      ProtoReader_Assert
    );

    $.Method({Static:false, Public:false}, "CheckFullyConsumed", 
      JSIL.MethodSignature.Void, 
      ProtoReader_CheckFullyConsumed
    );

    $.Method({Static:true , Public:false}, "Create", 
      new JSIL.MethodSignature($.Type, [
          $asm14.TypeRef("System.IO.Stream"), $asm0E.TypeRef("ProtoBuf.Meta.TypeModel"), 
          $asm0E.TypeRef("ProtoBuf.SerializationContext"), $.Int32
        ]), 
      ProtoReader_Create
    );

    $.Method({Static:false, Public:false}, "CreateException", 
      new JSIL.MethodSignature($asm14.TypeRef("System.Exception"), [$.String]), 
      ProtoReader_CreateException
    );

    $.Method({Static:false, Public:false}, "CreateWireTypeException", 
      JSIL.MethodSignature.Return($asm14.TypeRef("System.Exception")), 
      ProtoReader_CreateWireTypeException
    );

    $.Method({Static:false, Public:false}, "DeserializeType", 
      new JSIL.MethodSignature($asm14.TypeRef("System.Type"), [$.String]), 
      ProtoReader_DeserializeType
    );

    $.Method({Static:true , Public:true }, "DirectReadBigEndianInt32", 
      new JSIL.MethodSignature($.Int32, [$asm14.TypeRef("System.IO.Stream")]), 
      ProtoReader_DirectReadBigEndianInt32
    );

    $.Method({Static:true , Public:true }, "DirectReadBytes", 
      new JSIL.MethodSignature(null, [
          $asm14.TypeRef("System.IO.Stream"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.Int32
        ]), 
      ProtoReader_DirectReadBytes$02
    );

    $.Method({Static:true , Public:true }, "DirectReadBytes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$asm14.TypeRef("System.IO.Stream"), $.Int32]), 
      ProtoReader_DirectReadBytes$03
    );

    $.Method({Static:true , Public:true }, "DirectReadLittleEndianInt32", 
      new JSIL.MethodSignature($.Int32, [$asm14.TypeRef("System.IO.Stream")]), 
      ProtoReader_DirectReadLittleEndianInt32
    );

    $.Method({Static:true , Public:true }, "DirectReadString", 
      new JSIL.MethodSignature($.String, [$asm14.TypeRef("System.IO.Stream"), $.Int32]), 
      ProtoReader_DirectReadString
    );

    $.Method({Static:true , Public:true }, "DirectReadVarintInt32", 
      new JSIL.MethodSignature($.Int32, [$asm14.TypeRef("System.IO.Stream")]), 
      ProtoReader_DirectReadVarintInt32
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void, 
      ProtoReader_Dispose
    );

    $.Method({Static:true , Public:true }, "EndSubItem", 
      new JSIL.MethodSignature(null, [$asm0E.TypeRef("ProtoBuf.SubItemToken"), $.Type]), 
      ProtoReader_EndSubItem
    );

    $.Method({Static:false, Public:false}, "Ensure", 
      new JSIL.MethodSignature(null, [$.Int32, $.Boolean]), 
      ProtoReader_Ensure
    );

    $.Method({Static:true , Public:false}, "EoF", 
      new JSIL.MethodSignature($asm14.TypeRef("System.Exception"), [$.Type]), 
      ProtoReader_EoF
    );

    $.Method({Static:false, Public:true }, "get_Context", 
      JSIL.MethodSignature.Return($asm0E.TypeRef("ProtoBuf.SerializationContext")), 
      ProtoReader_get_Context
    );

    $.Method({Static:false, Public:true }, "get_FieldNumber", 
      JSIL.MethodSignature.Return($.Int32), 
      ProtoReader_get_FieldNumber
    );

    $.Method({Static:false, Public:true }, "get_InternStrings", 
      JSIL.MethodSignature.Return($.Boolean), 
      ProtoReader_get_InternStrings
    );

    $.Method({Static:false, Public:true }, "get_Model", 
      JSIL.MethodSignature.Return($asm0E.TypeRef("ProtoBuf.Meta.TypeModel")), 
      ProtoReader_get_Model
    );

    $.Method({Static:false, Public:false}, "get_NetCache", 
      JSIL.MethodSignature.Return($asm0E.TypeRef("ProtoBuf.NetObjectCache")), 
      ProtoReader_get_NetCache
    );

    $.Method({Static:false, Public:true }, "get_Position", 
      JSIL.MethodSignature.Return($.Int32), 
      ProtoReader_get_Position
    );

    $.Method({Static:false, Public:true }, "get_WireType", 
      JSIL.MethodSignature.Return($asm0E.TypeRef("ProtoBuf.WireType")), 
      ProtoReader_get_WireType
    );

    $.Method({Static:true , Public:false}, "GetRecycled", 
      JSIL.MethodSignature.Return($.Type), 
      ProtoReader_GetRecycled
    );

    $.Method({Static:false, Public:false}, "GetTypeKey", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$asm14.TypeRef("System.Type")])]), 
      ProtoReader_GetTypeKey
    );

    $.Method({Static:true , Public:true }, "HasSubValue", 
      new JSIL.MethodSignature($.Boolean, [$asm0E.TypeRef("ProtoBuf.WireType"), $.Type]), 
      ProtoReader_HasSubValue
    );

    $.Method({Static:false, Public:true }, "Hint", 
      JSIL.MethodSignature.Action($asm0E.TypeRef("ProtoBuf.WireType")), 
      ProtoReader_Hint
    );

    $.Method({Static:true , Public:false}, "Init", 
      new JSIL.MethodSignature(null, [
          $.Type, $asm14.TypeRef("System.IO.Stream"), 
          $asm0E.TypeRef("ProtoBuf.Meta.TypeModel"), $asm0E.TypeRef("ProtoBuf.SerializationContext"), 
          $.Int32
        ]), 
      ProtoReader_Init
    );

    $.Method({Static:false, Public:false}, "Intern", 
      new JSIL.MethodSignature($.String, [$.String]), 
      ProtoReader_Intern
    );

    $.Method({Static:true , Public:true }, "Merge", 
      new JSIL.MethodSignature($.Object, [
          $.Type, $.Object, 
          $.Object
        ]), 
      ProtoReader_Merge
    );

    $.Method({Static:true , Public:true }, "NoteObject", 
      new JSIL.MethodSignature(null, [$.Object, $.Type]), 
      ProtoReader_NoteObject
    );

    $.Method({Static:false, Public:true }, "ReadBoolean", 
      JSIL.MethodSignature.Return($.Boolean), 
      ProtoReader_ReadBoolean
    );

    $.Method({Static:false, Public:true }, "ReadByte", 
      JSIL.MethodSignature.Return($.Byte), 
      ProtoReader_ReadByte
    );

    $.Method({Static:true , Public:false}, "ReadByteOrThrow", 
      new JSIL.MethodSignature($.Int32, [$asm14.TypeRef("System.IO.Stream")]), 
      ProtoReader_ReadByteOrThrow
    );

    $.Method({Static:false, Public:true }, "ReadDouble", 
      JSIL.MethodSignature.Return($.Double), 
      ProtoReader_ReadDouble
    );

    $.Method({Static:false, Public:true }, "ReadFieldHeader", 
      JSIL.MethodSignature.Return($.Int32), 
      ProtoReader_ReadFieldHeader
    );

    $.Method({Static:false, Public:true }, "ReadInt16", 
      JSIL.MethodSignature.Return($.Int16), 
      ProtoReader_ReadInt16
    );

    $.Method({Static:false, Public:true }, "ReadInt32", 
      JSIL.MethodSignature.Return($.Int32), 
      ProtoReader_ReadInt32
    );

    $.Method({Static:false, Public:true }, "ReadInt64", 
      JSIL.MethodSignature.Return($.Int64), 
      ProtoReader_ReadInt64
    );

    $.Method({Static:true , Public:true }, "ReadLengthPrefix", 
      new JSIL.MethodSignature($.Int32, [
          $asm14.TypeRef("System.IO.Stream"), $.Boolean, 
          $asm0E.TypeRef("ProtoBuf.PrefixStyle"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]), 
      ProtoReader_ReadLengthPrefix$04
    );

    $.Method({Static:true , Public:true }, "ReadLengthPrefix", 
      new JSIL.MethodSignature($.Int32, [
          $asm14.TypeRef("System.IO.Stream"), $.Boolean, 
          $asm0E.TypeRef("ProtoBuf.PrefixStyle"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]), 
      ProtoReader_ReadLengthPrefix$05
    );

    $.Method({Static:true , Public:true }, "ReadObject", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $.Int32, 
          $.Type
        ]), 
      ProtoReader_ReadObject
    );

    $.Method({Static:false, Public:true }, "ReadSByte", 
      JSIL.MethodSignature.Return($.SByte), 
      ProtoReader_ReadSByte
    );

    $.Method({Static:false, Public:true }, "ReadSingle", 
      JSIL.MethodSignature.Return($.Single), 
      ProtoReader_ReadSingle
    );

    $.Method({Static:false, Public:true }, "ReadString", 
      JSIL.MethodSignature.Return($.String), 
      ProtoReader_ReadString
    );

    $.Method({Static:false, Public:true }, "ReadType", 
      JSIL.MethodSignature.Return($asm14.TypeRef("System.Type")), 
      ProtoReader_ReadType
    );

    $.Method({Static:true , Public:false}, "ReadTypedObject", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $.Int32, 
          $.Type, $asm14.TypeRef("System.Type")
        ]), 
      ProtoReader_ReadTypedObject
    );

    $.Method({Static:false, Public:true }, "ReadUInt16", 
      JSIL.MethodSignature.Return($.UInt16), 
      ProtoReader_ReadUInt16
    );

    $.Method({Static:false, Public:true }, "ReadUInt32", 
      JSIL.MethodSignature.Return($.UInt32), 
      ProtoReader_ReadUInt32
    );

    $.Method({Static:false, Public:false}, "ReadUInt32Variant", 
      new JSIL.MethodSignature($.UInt32, [$.Boolean]), 
      ProtoReader_ReadUInt32Variant
    );

    $.Method({Static:false, Public:true }, "ReadUInt64", 
      JSIL.MethodSignature.Return($.UInt64), 
      ProtoReader_ReadUInt64
    );

    $.Method({Static:false, Public:false}, "ReadUInt64Variant", 
      JSIL.MethodSignature.Return($.UInt64), 
      ProtoReader_ReadUInt64Variant
    );

    $.Method({Static:true , Public:false}, "Recycle", 
      JSIL.MethodSignature.Action($.Type), 
      ProtoReader_Recycle
    );

    $.Method({Static:true , Public:false}, "Seek", 
      new JSIL.MethodSignature(null, [
          $asm14.TypeRef("System.IO.Stream"), $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.Byte])
        ]), 
      ProtoReader_Seek
    );

    $.Method({Static:false, Public:true }, "set_InternStrings", 
      JSIL.MethodSignature.Action($.Boolean), 
      ProtoReader_set_InternStrings
    );

    $.Method({Static:false, Public:false}, "SetRootObject", 
      JSIL.MethodSignature.Action($.Object), 
      ProtoReader_SetRootObject
    );

    $.Method({Static:false, Public:true }, "SkipField", 
      JSIL.MethodSignature.Void, 
      ProtoReader_SkipField
    );

    $.Method({Static:true , Public:true }, "StartSubItem", 
      new JSIL.MethodSignature($asm0E.TypeRef("ProtoBuf.SubItemToken"), [$.Type]), 
      ProtoReader_StartSubItem
    );

    $.Method({Static:false, Public:true }, "ThrowEnumException", 
      new JSIL.MethodSignature(null, [$asm14.TypeRef("System.Type"), $.Int32]), 
      ProtoReader_ThrowEnumException
    );

    $.Method({Static:false, Public:false}, "TrapNextObject", 
      JSIL.MethodSignature.Action($.Int32), 
      ProtoReader_TrapNextObject
    );

    $.Method({Static:false, Public:true }, "TryReadFieldHeader", 
      new JSIL.MethodSignature($.Boolean, [$.Int32]), 
      ProtoReader_TryReadFieldHeader
    );

    $.Method({Static:false, Public:false}, "TryReadUInt32Variant", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.UInt32])]), 
      ProtoReader_TryReadUInt32Variant$06
    );

    $.Method({Static:true , Public:false}, "TryReadUInt32Variant", 
      new JSIL.MethodSignature($.Int32, [$asm14.TypeRef("System.IO.Stream"), $jsilcore.TypeRef("JSIL.Reference", [$.UInt32])]), 
      ProtoReader_TryReadUInt32Variant$07
    );

    $.Method({Static:false, Public:false}, "TryReadUInt32VariantWithoutMoving", 
      new JSIL.MethodSignature($.Int32, [$.Boolean, $jsilcore.TypeRef("JSIL.Reference", [$.UInt32])]), 
      ProtoReader_TryReadUInt32VariantWithoutMoving
    );

    $.Method({Static:false, Public:false}, "TryReadUInt64VariantWithoutMoving", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$.UInt64])]), 
      ProtoReader_TryReadUInt64VariantWithoutMoving
    );

    $.Method({Static:true , Public:false}, "Zag", 
      new JSIL.MethodSignature($.Int32, [$.UInt32]), 
      ProtoReader_Zag$08
    );

    $.Method({Static:true , Public:false}, "Zag", 
      new JSIL.MethodSignature($.Int64, [$.UInt64]), 
      ProtoReader_Zag$09
    );

    $.Field({Static:false, Public:false}, "source", $asm14.TypeRef("System.IO.Stream"));

    $.Field({Static:false, Public:false}, "ioBuffer", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "model", $asm0E.TypeRef("ProtoBuf.Meta.TypeModel"));

    $.Field({Static:false, Public:false}, "fieldNumber", $.Int32);

    $.Field({Static:false, Public:false}, "depth", $.Int32);

    $.Field({Static:false, Public:false}, "dataRemaining", $.Int32);

    $.Field({Static:false, Public:false}, "ioIndex", $.Int32);

    $.Field({Static:false, Public:false}, "position", $.Int32);

    $.Field({Static:false, Public:false}, "available", $.Int32);

    $.Field({Static:false, Public:false}, "blockEnd", $.Int32);

    $.Field({Static:false, Public:false}, "wireType", $asm0E.TypeRef("ProtoBuf.WireType"));

    $.Field({Static:false, Public:false}, "isFixedLength", $.Boolean);

    $.Field({Static:false, Public:false}, "internStrings", $.Boolean);

    $.Field({Static:false, Public:false}, "netCache", $asm0E.TypeRef("ProtoBuf.NetObjectCache"));

    $.Field({Static:false, Public:false}, "trapCount", $.UInt32);

    $.Constant({Static:true , Public:false}, "TO_EOF", $.Int32, -1);

    $.Field({Static:false, Public:false}, "context", $asm0E.TypeRef("ProtoBuf.SerializationContext"));

    $.Constant({Static:true , Public:false}, "Int64Msb", $.Int64, -9223372036854775808);

    $.Constant({Static:true , Public:false}, "Int32Msb", $.Int32, -2147483648);

    $.Field({Static:false, Public:false}, "stringInterner", $asm14.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.String]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "encoding", $asm14.TypeRef("System.Text.UTF8Encoding"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "EmptyBlob", $jsilcore.TypeRef("System.Array", [$.Byte]), function ($pi) {
        return JSIL.Array.New($asm14.System.Byte, 0);
      });

    $.Field({Static:true , Public:false}, "lastReader", $.Type);


    function ProtoReader__cctor () {
      $thisType.encoding = $S00().Construct();
      $thisType.EmptyBlob = JSIL.Array.New($T01(), 0);
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      ProtoReader__cctor
    );

    $.Property({Static:false, Public:true }, "FieldNumber", $.Int32);

    $.Property({Static:false, Public:true }, "WireType", $asm0E.TypeRef("ProtoBuf.WireType"));

    $.Property({Static:false, Public:true }, "InternStrings", $.Boolean);

    $.Property({Static:false, Public:true }, "Context", $asm0E.TypeRef("ProtoBuf.SerializationContext"));

    $.Property({Static:false, Public:true }, "Position", $.Int32);

    $.Property({Static:false, Public:true }, "Model", $asm0E.TypeRef("ProtoBuf.Meta.TypeModel"));

    $.Property({Static:false, Public:false}, "NetCache", $asm0E.TypeRef("ProtoBuf.NetObjectCache"));

    $.ImplementInterfaces(
      /* 0 */ $asm14.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ProtoBuf.ProtoWriter */ 

(function ProtoWriter$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm14.System.Text.UTF8Encoding)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm14.System.IO.Stream)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0E.ProtoBuf.Meta.TypeModel)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0E.ProtoBuf.SerializationContext)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm0E.ProtoBuf.NetObjectCache)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm14.System.ArgumentNullException)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm14.System.Boolean)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm14.System.ArgumentException)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm0E.ProtoBuf.BufferPool)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm0E.ProtoBuf.WireType)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm0E.ProtoBuf.IExtensible)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm0E.ProtoBuf.IExtension)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm14.System.Int32)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm14.System.InvalidOperationException)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm14.System.Object)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm0E.ProtoBuf.Meta.MutableList)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm0E.ProtoBuf.Meta.BasicList)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm0E.ProtoBuf.ProtoException)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm14.System.String)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize(System.Array.Of($asm14.System.Byte))) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm0E.ProtoBuf.SubItemToken)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm0E.ProtoBuf.PrefixStyle)) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm14.System.UInt32)) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm14.System.Byte)) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize($asm0E.ProtoBuf.Helpers)) ();
  };
  var $T19 = function () {
    return ($T19 = JSIL.Memoize($asm14.System.ArgumentOutOfRangeException)) ();
  };
  var $T1A = function () {
    return ($T1A = JSIL.Memoize($asm14.System.Type)) ();
  };
  var $T1B = function () {
    return ($T1B = JSIL.Memoize($asm14.System.Double)) ();
  };
  var $T1C = function () {
    return ($T1C = JSIL.Memoize($asm14.System.Single)) ();
  };
  var $T1D = function () {
    return ($T1D = JSIL.Memoize($asm14.System.OverflowException)) ();
  };
  var $T1E = function () {
    return ($T1E = JSIL.Memoize($asm14.System.BitConverter)) ();
  };
  var $T1F = function () {
    return ($T1F = JSIL.Memoize(System.Array.Of($asm14.System.String))) ();
  };
  var $T20 = function () {
    return ($T20 = JSIL.Memoize($asm14.System.Int16)) ();
  };
  var $T21 = function () {
    return ($T21 = JSIL.Memoize($asm14.System.Int64)) ();
  };
  var $T22 = function () {
    return ($T22 = JSIL.Memoize($asm0E.ProtoBuf.DataFormat)) ();
  };
  var $T23 = function () {
    return ($T23 = JSIL.Memoize($asm14.System.SByte)) ();
  };
  var $T24 = function () {
    return ($T24 = JSIL.Memoize($asm14.System.Text.Encoding)) ();
  };
  var $T25 = function () {
    return ($T25 = JSIL.Memoize($asm14.System.UInt16)) ();
  };
  var $T26 = function () {
    return ($T26 = JSIL.Memoize($asm14.System.UInt64)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm14.TypeRef("System.Text.UTF8Encoding"), null))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm14.TypeRef("System.ArgumentNullException"), [$asm14.TypeRef("System.String")]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm14.TypeRef("System.ArgumentException"), [$asm14.TypeRef("System.String"), $asm14.TypeRef("System.String")]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm14.TypeRef("System.InvalidOperationException"), [$asm14.TypeRef("System.String")]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0E.TypeRef("ProtoBuf.ProtoException"), [$asm14.TypeRef("System.String")]))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.ConstructorSignature($asm14.TypeRef("System.ArgumentOutOfRangeException"), [$asm14.TypeRef("System.String")]))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(new JSIL.ConstructorSignature($asm14.TypeRef("System.ArgumentException"), [$asm14.TypeRef("System.String")]))) ();
  };
  var $S07 = function () {
    return ($S07 = JSIL.Memoize(new JSIL.MethodSignature($asm14.TypeRef("System.Boolean"), [$asm14.TypeRef("System.Single")]))) ();
  };
  var $S08 = function () {
    return ($S08 = JSIL.Memoize(new JSIL.MethodSignature($asm14.TypeRef("System.Boolean"), [$asm14.TypeRef("System.Double")]))) ();
  };
  var $S09 = function () {
    return ($S09 = JSIL.Memoize(new JSIL.ConstructorSignature($asm14.TypeRef("System.OverflowException"), null))) ();
  };
  var $S0A = function () {
    return ($S0A = JSIL.Memoize(new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm14.TypeRef("System.Byte")]), [$asm14.TypeRef("System.Double")]))) ();
  };
  var $S0B = function () {
    return ($S0B = JSIL.Memoize(new JSIL.MethodSignature($asm14.TypeRef("System.UInt32"), [$asm14.TypeRef("System.Int32")]))) ();
  };
  var $S0C = function () {
    return ($S0C = JSIL.Memoize(new JSIL.MethodSignature($asm14.TypeRef("System.UInt64"), [$asm14.TypeRef("System.Int64")]))) ();
  };
  var $S0D = function () {
    return ($S0D = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm14.TypeRef("System.Int32"), $asm14.TypeRef("System.Object"), 
        $asm0E.TypeRef("ProtoBuf.ProtoWriter")
      ]))) ();
  };
  var $S0E = function () {
    return ($S0E = JSIL.Memoize(new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm14.TypeRef("System.Byte")]), [$asm14.TypeRef("System.Single")]))) ();
  };
  var $S0F = function () {
    return ($S0F = JSIL.Memoize(new JSIL.MethodSignature($asm14.TypeRef("System.Int32"), [$asm14.TypeRef("System.String")]))) ();
  };
  var $S10 = function () {
    return ($S10 = JSIL.Memoize(new JSIL.MethodSignature($asm14.TypeRef("System.Int32"), [
        $asm14.TypeRef("System.String"), $asm14.TypeRef("System.Int32"), 
        $asm14.TypeRef("System.Int32"), $jsilcore.TypeRef("System.Array", [$asm14.TypeRef("System.Byte")]), 
        $asm14.TypeRef("System.Int32")
      ]))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm0E.ProtoBuf.IExtensible.GetExtensionObject)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm0E.ProtoBuf.IExtension.BeginQuery)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm0E.ProtoBuf.IExtension.EndQuery)) ();
  };


  function ProtoWriter__ctor (dest, model, context) {
    this.netCache = new ($T04())();
    this.depth = 0;
    if (dest === null) {
      throw $S01().Construct("dest");
    }
    var flag2 = !dest.get_CanWrite();
    if (flag2) {
      throw $S02().Construct("Cannot write to stream", "dest");
    }
    this.dest = dest;
    this.ioBuffer = $T08().GetBuffer();
    this.model = model;
    this.wireType = $T09().None;
    var flag3 = context === null;
    if (flag3) {
      context = $T03().get_Default();
    } else {
      context.Freeze();
    }
    this.context = context;
  }; 

  function ProtoWriter_AppendExtensionData (instance, writer) {
    var flag = instance === null;
    if (flag) {
      throw $S01().Construct("instance");
    }
    var flag2 = writer === null;
    if (flag2) {
      throw $S01().Construct("writer");
    }
    var flag3 = writer.wireType !== $T09().None;
    if (flag3) {
      throw $thisType.CreateException(writer);
    }
    var extn = $IM00().Call(instance, null, false);
    var flag4 = extn !== null;
    if (flag4) {
      var source = $IM01().Call(extn, null);
      try {
        $thisType.CopyRawFromStream(source, writer);
      } finally {
        $IM02().Call(extn, null, source);
      }
    }
  }; 

  function ProtoWriter_CheckDepthFlushlock () {
    if (((this.depth | 0) !== 0) || ((this.flushLock | 0) > 0)) {
      throw $S03().Construct("The writer is in an incomplete state");
    }
  }; 

  function ProtoWriter_CheckRecursionStackAndPush (instance) {
    var hitLevel = 0;
    if (this.recursionStack === null) {
      this.recursionStack = new ($T0F())();
    } else {
      var flag2 = (instance !== null) && 
      ((hitLevel = ((this.recursionStack).IndexOfReference(instance) | 0)) >= 0);
      if (flag2) {
        throw $S04().Construct(("Possible recursion detected (offset: " + (((((this.recursionStack).get_Count() | 0) - hitLevel) | 0)).toString() + " level(s)): " + instance.toString()));
      }
    }
    (this.recursionStack).Add(instance);
  }; 

  function ProtoWriter_Close () {
    if (((this.depth | 0) !== 0) || ((this.flushLock | 0) > 0)) {
      throw $S03().Construct("Unable to close stream in an incomplete state");
    }
    this.Dispose();
  }; 

  function ProtoWriter_CopyRawFromStream (source, writer) {
    var buffer = writer.ioBuffer;
    var space = (((buffer.length | 0) - (writer.ioIndex | 0)) | 0);

    for (var bytesRead = 1; (space > 0) && ((bytesRead = (source.Read(buffer, writer.ioIndex, space) | 0)) > 0); ) {
      writer.ioIndex = (((writer.ioIndex | 0) + bytesRead) | 0);
      writer.position = (((writer.position | 0) + bytesRead) | 0);
      space = ((space - bytesRead) | 0);
    }
    var flag = bytesRead <= 0;
    if (!flag) {
      var flag2 = (writer.flushLock | 0) === 0;
      if (flag2) {
        $thisType.Flush(writer);

        while ((bytesRead = (source.Read(buffer, 0, buffer.length) | 0)) > 0) {
          (writer.dest).Write(buffer, 0, bytesRead);
          writer.position = (((writer.position | 0) + bytesRead) | 0);
        }
      } else {

      $loop1: 
        while (true) {
          $thisType.DemandSpace(128, writer);
          var flag3 = (bytesRead = (source.Read(writer.ioBuffer, writer.ioIndex, (((writer.ioBuffer.length | 0) - (writer.ioIndex | 0)) | 0)) | 0)) <= 0;
          if (flag3) {
            break $loop1;
          }
          writer.position = (((writer.position | 0) + bytesRead) | 0);
          writer.ioIndex = (((writer.ioIndex | 0) + bytesRead) | 0);
        }
      }
    }
  }; 

  function ProtoWriter_CreateException (writer) {
    var flag = writer === null;
    if (flag) {
      throw $S01().Construct("writer");
    }
    return $S04().Construct(("Invalid serialization operation with wire-type " + (writer.wireType).toString() + " at position " + (writer.position).toString()));
  }; 

  function ProtoWriter_DemandSpace (required, writer) {
    var flag = (((writer.ioBuffer.length | 0) - (writer.ioIndex | 0)) | 0) < (required | 0);
    if (flag) {
      var flag2 = (writer.flushLock | 0) === 0;
      if (flag2) {
        $thisType.Flush(writer);
        var flag3 = (((writer.ioBuffer.length | 0) - (writer.ioIndex | 0)) | 0) >= (required | 0);
        if (flag3) {
          return;
        }
      }
      $T08().ResizeAndFlushLeft(/* ref */ new JSIL.MemberReference(writer, "ioBuffer"), (((required | 0) + (writer.ioIndex | 0)) | 0), 0, writer.ioIndex);
    }
  }; 

  function ProtoWriter_Dispose () {
    if (this.dest !== null) {
      $thisType.Flush(this);
      this.dest = null;
    }
    this.model = null;
    $T08().ReleaseBufferToPool(/* ref */ new JSIL.MemberReference(this, "ioBuffer"));
  }; 

  function ProtoWriter_EndSubItem$00 (token, writer) {
    $thisType.EndSubItem(token, writer, $T15().Base128);
  }; 

  function ProtoWriter_EndSubItem$01 (token, writer, style) {
    var flag = writer === null;
    if (flag) {
      throw $S01().Construct("writer");
    }
    var flag2 = writer.wireType !== $T09().None;
    if (flag2) {
      throw $thisType.CreateException(writer);
    }
    var value = (token.value | 0);
    var flag3 = (writer.depth | 0) <= 0;
    if (flag3) {
      throw $thisType.CreateException(writer);
    }
    var num = (writer.depth | 0);
    writer.depth = ((num - 1) | 0);
    var flag4 = num > 25;
    if (flag4) {
      writer.PopRecursionStack();
    }
    writer.packedFieldNumber = 0;
    var flag5 = value < 0;
    if (flag5) {
      $thisType.WriteHeaderCore((-value | 0), $T09().EndGroup, writer);
      writer.wireType = $T09().None;
    } else {
      switch (style.valueOf()) {
        case 1: 
          var len = (((((writer.ioIndex | 0) - value) | 0) - 1) | 0);
          var offset = 0;

          for (var tmp = (len >>> 0); (tmp = tmp >>> 7) > 0; ) {
            num = offset;
            offset = ((num + 1) | 0);
          }
          var flag6 = offset === 0;
          if (flag6) {
            writer.ioBuffer[value] = (len & 127 & 0xFF);
          } else {
            $thisType.DemandSpace(offset, writer);
            var blob = writer.ioBuffer;
            $T18().BlockCopy(
              blob, 
              ((value + 1) | 0), 
              blob, 
              ((((value + 1) | 0) + offset) | 0), 
              len
            );
            tmp = (len >>> 0);

            do {
              var arg_1BF_0 = blob;
              num = value;
              value = ((num + 1) | 0);
              arg_1BF_0[num] = ((tmp & 127) | 128 & 0xFF);
            } while ((tmp = tmp >>> 7) > 0);
            blob[((value - 1) | 0)] = ((blob[((value - 1) | 0)] | 0) & -129 & 0xFF);
            writer.position = (((writer.position | 0) + offset) | 0);
            writer.ioIndex = (((writer.ioIndex | 0) + offset) | 0);
          }
          break;

        case 2: 
          len = (((((writer.ioIndex | 0) - value) | 0) - 4) | 0);
          $thisType.WriteInt32ToBuffer(len, writer.ioBuffer, value);
          break;

        case 3: 
          len = (((((writer.ioIndex | 0) - value) | 0) - 4) | 0);
          var buffer = writer.ioBuffer;
          $thisType.WriteInt32ToBuffer(len, buffer, value);
          var b = (buffer[value] | 0);
          buffer[value] = (buffer[((value + 3) | 0)] | 0);
          buffer[((value + 3) | 0)] = b;
          b = (buffer[((value + 1) | 0)] | 0);
          buffer[((value + 1) | 0)] = (buffer[((value + 2) | 0)] | 0);
          buffer[((value + 2) | 0)] = b;
          break;

        default: 
          throw $S05().Construct("style");

      }
      num = (((writer.flushLock | 0) - 1) | 0);
      writer.flushLock = num;
      var flag7 = (num === 0) && 
      ((writer.ioIndex | 0) >= 1024);
      if (flag7) {
        $thisType.Flush(writer);
      }
    }
  }; 

  function ProtoWriter_Flush (writer) {
    var flag = ((writer.flushLock | 0) === 0) && 
    ((writer.ioIndex | 0) > 0);
    if (flag) {
      (writer.dest).Write(writer.ioBuffer, 0, writer.ioIndex);
      writer.ioIndex = 0;
    }
  }; 

  function ProtoWriter_get_Context () {
    return this.context;
  }; 

  function ProtoWriter_get_Model () {
    return this.model;
  }; 

  function ProtoWriter_get_NetCache () {
    return this.netCache;
  }; 

  function ProtoWriter_get_WireType () {
    return this.wireType;
  }; 

  function ProtoWriter_GetPosition (writer) {
    return writer.position;
  }; 

  function ProtoWriter_GetTypeKey (/* ref */ type) {
    return (this.model).GetKey(/* ref */ type);
  }; 

  function ProtoWriter_IncrementedAndReset (length, writer) {
    writer.ioIndex = (((writer.ioIndex | 0) + (length | 0)) | 0);
    writer.position = (((writer.position | 0) + (length | 0)) | 0);
    writer.wireType = $T09().None;
  }; 

  function ProtoWriter_PopRecursionStack () {
    (this.recursionStack).RemoveLast();
  }; 

  function ProtoWriter_SerializeType (type) {
    return $T02().SerializeType(this.model, type);
  }; 

  function ProtoWriter_SetPackedField (fieldNumber, writer) {
    if ((fieldNumber | 0) <= 0) {
      throw $S05().Construct("fieldNumber");
    }
    if (writer === null) {
      throw $S01().Construct("writer");
    }
    writer.packedFieldNumber = (fieldNumber | 0);
  }; 

  function ProtoWriter_SetRootObject (value) {
    (this.get_NetCache()).SetKeyedObject(0, value);
  }; 

  function ProtoWriter_StartSubItem$02 (instance, writer) {
    return $thisType.StartSubItem(instance, writer, false);
  }; 

  function ProtoWriter_StartSubItem$03 (instance, writer, allowFixed) {
    var token = new ($T14())();
    var flag = writer === null;
    if (flag) {
      throw $S01().Construct("writer");
    }
    var num = (((writer.depth | 0) + 1) | 0);
    writer.depth = num;
    var flag2 = num > 25;
    if (flag2) {
      writer.CheckRecursionStackAndPush(instance);
    }
    var flag3 = (writer.packedFieldNumber | 0) > 0;
    if (flag3) {
      throw $S03().Construct("Cannot begin a sub-item while performing packed encoding");
    }
    switch ((writer.wireType).valueOf()) {
      case 2: 
        writer.wireType = $T09().None;
        $thisType.DemandSpace(32, writer);
        num = (writer.flushLock | 0);
        writer.flushLock = ((num + 1) | 0);
        num = (writer.position | 0);
        writer.position = ((num + 1) | 0);
        num = (writer.ioIndex | 0);
        writer.ioIndex = ((num + 1) | 0);
        var result = new ($T14())(num);
        return result;

      case 3: 
        writer.wireType = $T09().None;
        result = new ($T14())((-writer.fieldNumber | 0));
        return result;

      case 5: 
        if (!allowFixed) {
          throw $thisType.CreateException(writer);
        }
        $thisType.DemandSpace(32, writer);
        num = (writer.flushLock | 0);
        writer.flushLock = ((num + 1) | 0);
        token = new ($T14())(writer.ioIndex);
        $thisType.IncrementedAndReset(4, writer);
        result = token;
        return result;

    }
    throw $thisType.CreateException(writer);
  }; 

  function ProtoWriter_System_IDisposable_Dispose () {
    this.Dispose();
  }; 

  function ProtoWriter_ThrowEnumException (writer, enumValue) {
    var flag = writer === null;
    if (flag) {
      throw $S01().Construct("writer");
    }
    var rhs = (
      (enumValue === null)
         ? "<null>"
         : ((JSIL.GetType(enumValue)).get_FullName() + "." + enumValue.toString()))
    ;
    throw $S04().Construct(("No wire-value is mapped to the enum " + rhs + " at position " + (writer.position).toString()));
  }; 

  function ProtoWriter_WriteBoolean (value, writer) {
    $thisType.WriteUInt32((
        value
           ? 1
           : 0)
      , writer);
  }; 

  function ProtoWriter_WriteByte (value, writer) {
    $thisType.WriteUInt32(value, writer);
  }; 

  function ProtoWriter_WriteBytes$04 (data, writer) {
    var flag = data === null;
    if (flag) {
      throw $S01().Construct("data");
    }
    $thisType.WriteBytes(data, 0, data.length, writer);
  }; 

  function ProtoWriter_WriteBytes$05 (data, offset, length, writer) {

    var $label0 = 0;
  $labelgroup0: 
    while (true) {
      switch ($label0) {
        case 0: /* $entry0 */ 
          var flag = data === null;
          if (flag) {
            throw $S01().Construct("data");
          }
          var flag2 = writer === null;
          if (flag2) {
            throw $S01().Construct("writer");
          }
          switch ((writer.wireType).valueOf()) {
            case 1: 
              if ((length | 0) !== 8) {
                throw $S06().Construct("length");
              }
              $label0 = 1 /* goto IL_F3 */ ;
              continue $labelgroup0;

            case 2: 
              $thisType.WriteUInt32Variant((length >>> 0), writer);
              writer.wireType = $T09().None;
              if ((length | 0) === 0) {
                return;
              }
              var flag5 = ((writer.flushLock | 0) !== 0) || 
              ((length | 0) <= (writer.ioBuffer.length | 0));
              if (flag5) {
                $label0 = 1 /* goto IL_F3 */ ;
                continue $labelgroup0;
              }
              $thisType.Flush(writer);
              (writer.dest).Write(data, offset, length);
              writer.position = (((writer.position | 0) + (length | 0)) | 0);
              return;

            case 5: 
              if ((length | 0) !== 4) {
                throw $S06().Construct("length");
              }
              $label0 = 1 /* goto IL_F3 */ ;
              continue $labelgroup0;

          }
          throw $thisType.CreateException(writer);

          $label0 = 1 /* goto IL_F3 */ ;
          continue $labelgroup0;
        case 1: /* IL_F3 */ 
          $thisType.DemandSpace(length, writer);
          $T18().BlockCopy(
            data, 
            offset, 
            writer.ioBuffer, 
            writer.ioIndex, 
            length
          );
          $thisType.IncrementedAndReset(length, writer);

          break $labelgroup0;
      }
    }
  }; 

  function ProtoWriter_WriteDouble (value, writer) {
    var flag = writer === null;
    if (flag) {
      throw $S01().Construct("writer");
    }
    var wireType = writer.wireType;
    if (wireType !== $T09().Fixed64) {
      if (wireType !== $T09().Fixed32) {
        throw $thisType.CreateException(writer);
      }
      var f = Math.fround(value);
      var flag2 = $S07().CallStatic($T18(), "IsInfinity", null, f) && 
      !$S08().CallStatic($T18(), "IsInfinity", null, value);
      if (flag2) {
        throw $S09().Construct();
      }
      $thisType.WriteSingle(f, writer);
    } else {
      $thisType.WriteInt64($T1E().ToInt64($S0A().CallStatic($T1E(), "GetBytes", null, value), 0), writer);
    }
  }; 

  function ProtoWriter_WriteFieldHeader (fieldNumber, wireType, writer) {
    var flag = writer === null;
    if (flag) {
      throw $S01().Construct("writer");
    }
    var flag2 = writer.wireType !== $T09().None;
    if (flag2) {
      throw $S03().Construct(JSIL.ConcatString.apply(null, JSIL.Array.New($T12(), ["Cannot write a ", wireType.toString(), " header until the ", (writer.wireType).toString(), " data has been written"])));
    }
    if ((fieldNumber | 0) < 0) {
      throw $S05().Construct("fieldNumber");
    }
    var flag4 = (writer.packedFieldNumber | 0) === 0;
    if (flag4) {
      writer.fieldNumber = (fieldNumber | 0);
      writer.wireType = wireType;
      $thisType.WriteHeaderCore(fieldNumber, wireType, writer);
    } else {
      var flag5 = (writer.packedFieldNumber | 0) === (fieldNumber | 0);
      if (flag5) {

        var $label0 = 0;
      $labelgroup0: 
        while (true) {
          switch ($label0) {
            case 0: /* $entry0 */ 
              var wireType2 = wireType;
              if (wireType2 <= $T09().Fixed64) {
                if (!(((wireType2.valueOf() | 0) === 0) || (wireType2 === $T09().Fixed64))) {
                  $label0 = 1 /* goto IL_E4 */ ;
                  continue $labelgroup0;
                }
              } else if (!((wireType2 === $T09().Fixed32) || (wireType2 === $T09().SignedVariant))) {
                $label0 = 1 /* goto IL_E4 */ ;
                continue $labelgroup0;
              }
              writer.fieldNumber = (fieldNumber | 0);
              writer.wireType = wireType;
              return;

              $label0 = 1 /* goto IL_E4 */ ;
              continue $labelgroup0;
            case 1: /* IL_E4 */ 
              throw $S03().Construct(JSIL.ConcatString("Wire-type cannot be encoded as packed: ", wireType.toString()));

              break $labelgroup0;
          }
        }
      }
      throw $S03().Construct(("Field mismatch during packed encoding; expected " + (writer.packedFieldNumber).toString() + " but received " + (fieldNumber).toString()));
    }
  }; 

  function ProtoWriter_WriteHeaderCore (fieldNumber, wireType, writer) {
    var header = (((fieldNumber | 0) << 3) | (($T09().$Cast(wireType & $T09().$Cast(7))).valueOf() | 0) >>> 0);
    $thisType.WriteUInt32Variant(header, writer);
  }; 

  function ProtoWriter_WriteInt16 (value, writer) {
    $thisType.WriteInt32(value, writer);
  }; 

  function ProtoWriter_WriteInt32 (value, writer) {
    var flag = writer === null;
    if (flag) {
      throw $S01().Construct("writer");
    }
    var wireType = writer.wireType;
    if (wireType <= $T09().Fixed64) {
      if ((wireType.valueOf() | 0) === 0) {
        if ((value | 0) >= 0) {
          $thisType.WriteUInt32Variant((value >>> 0), writer);
          writer.wireType = $T09().None;
        } else {
          $thisType.DemandSpace(10, writer);
          var buffer = writer.ioBuffer;
          var index = (writer.ioIndex | 0);
          buffer[index] = ((value | 0) | 128 & 0xFF);
          buffer[((index + 1) | 0)] = (((value | 0) >> 7) | 128 & 0xFF);
          buffer[((index + 2) | 0)] = (((value | 0) >> 14) | 128 & 0xFF);
          buffer[((index + 3) | 0)] = (((value | 0) >> 21) | 128 & 0xFF);
          buffer[((index + 4) | 0)] = (((value | 0) >> 28) | 128 & 0xFF);
          buffer[((index + 5) | 0)] = buffer[((index + 6) | 0)] = buffer[((index + 7) | 0)] = buffer[((index + 8) | 0)] = 255;
          buffer[((index + 9) | 0)] = 1;
          $thisType.IncrementedAndReset(10, writer);
        }
        return;
      }
      if (wireType === $T09().Fixed64) {
        $thisType.DemandSpace(8, writer);
        buffer = writer.ioBuffer;
        index = (writer.ioIndex | 0);
        buffer[index] = (value & 0xFF);
        buffer[((index + 1) | 0)] = ((value | 0) >> 8 & 0xFF);
        buffer[((index + 2) | 0)] = ((value | 0) >> 16 & 0xFF);
        buffer[((index + 3) | 0)] = ((value | 0) >> 24 & 0xFF);
        buffer[((index + 4) | 0)] = buffer[((index + 5) | 0)] = buffer[((index + 6) | 0)] = buffer[((index + 7) | 0)] = 0;
        $thisType.IncrementedAndReset(8, writer);
        return;
      }
    } else {
      if (wireType === $T09().Fixed32) {
        $thisType.DemandSpace(4, writer);
        $thisType.WriteInt32ToBuffer(value, writer.ioBuffer, writer.ioIndex);
        $thisType.IncrementedAndReset(4, writer);
        return;
      }
      if (wireType === $T09().SignedVariant) {
        $thisType.WriteUInt32Variant($S0B().CallStatic($thisType, "Zig", null, value), writer);
        writer.wireType = $T09().None;
        return;
      }
    }
    throw $thisType.CreateException(writer);
  }; 

  function ProtoWriter_WriteInt32ToBuffer (value, buffer, index) {
    buffer[index] = (value & 0xFF);
    buffer[(((index | 0) + 1) | 0)] = ((value | 0) >> 8 & 0xFF);
    buffer[(((index | 0) + 2) | 0)] = ((value | 0) >> 16 & 0xFF);
    buffer[(((index | 0) + 3) | 0)] = ((value | 0) >> 24 & 0xFF);
  }; 

  function ProtoWriter_WriteInt64 (value, writer) {
    var flag = writer === null;
    if (flag) {
      throw $S01().Construct("writer");
    }
    var wireType = writer.wireType;
    if (wireType <= $T09().Fixed64) {
      if ((wireType.valueOf() | 0) === 0) {
        if ($T21().op_GreaterThanOrEqual(value, $T21().Create(0, 0, 0))) {
          $thisType.WriteUInt64Variant(value.ToUInt64(), writer);
          writer.wireType = $T09().None;
        } else {
          $thisType.DemandSpace(10, writer);
          var buffer = writer.ioBuffer;
          var index = (writer.ioIndex | 0);
          buffer[index] = (($T21().op_BitwiseOr(value, $T21().Create(128, 0, 0))).ToNumber(255, false) | 0);
          buffer[((index + 1) | 0)] = ((($T21().op_RightShift(value, 7)).ToNumber(4294967295, true) | 0) | 128 & 0xFF);
          buffer[((index + 2) | 0)] = ((($T21().op_RightShift(value, 14)).ToNumber(4294967295, true) | 0) | 128 & 0xFF);
          buffer[((index + 3) | 0)] = ((($T21().op_RightShift(value, 21)).ToNumber(4294967295, true) | 0) | 128 & 0xFF);
          buffer[((index + 4) | 0)] = ((($T21().op_RightShift(value, 28)).ToNumber(4294967295, true) | 0) | 128 & 0xFF);
          buffer[((index + 5) | 0)] = ((($T21().op_RightShift(value, 35)).ToNumber(4294967295, true) | 0) | 128 & 0xFF);
          buffer[((index + 6) | 0)] = ((($T21().op_RightShift(value, 42)).ToNumber(4294967295, true) | 0) | 128 & 0xFF);
          buffer[((index + 7) | 0)] = ((($T21().op_RightShift(value, 49)).ToNumber(4294967295, true) | 0) | 128 & 0xFF);
          buffer[((index + 8) | 0)] = ((($T21().op_RightShift(value, 56)).ToNumber(4294967295, true) | 0) | 128 & 0xFF);
          buffer[((index + 9) | 0)] = 1;
          $thisType.IncrementedAndReset(10, writer);
        }
        return;
      }
      if (wireType === $T09().Fixed64) {
        $thisType.DemandSpace(8, writer);
        buffer = writer.ioBuffer;
        index = (writer.ioIndex | 0);
        buffer[index] = (value.ToNumber(255, false) | 0);
        buffer[((index + 1) | 0)] = (($T21().op_RightShift(value, 8)).ToNumber(255, false) | 0);
        buffer[((index + 2) | 0)] = (($T21().op_RightShift(value, 16)).ToNumber(255, false) | 0);
        buffer[((index + 3) | 0)] = (($T21().op_RightShift(value, 24)).ToNumber(255, false) | 0);
        buffer[((index + 4) | 0)] = (($T21().op_RightShift(value, 32)).ToNumber(255, false) | 0);
        buffer[((index + 5) | 0)] = (($T21().op_RightShift(value, 40)).ToNumber(255, false) | 0);
        buffer[((index + 6) | 0)] = (($T21().op_RightShift(value, 48)).ToNumber(255, false) | 0);
        buffer[((index + 7) | 0)] = (($T21().op_RightShift(value, 56)).ToNumber(255, false) | 0);
        $thisType.IncrementedAndReset(8, writer);
        return;
      }
    } else {
      if (wireType === $T09().Fixed32) {
        $thisType.WriteInt32($T0C().$OverflowCheck(value.ToNumber(4294967295, true)), writer);
        return;
      }
      if (wireType === $T09().SignedVariant) {
        $thisType.WriteUInt64Variant($S0C().CallStatic($thisType, "Zig", null, value), writer);
        writer.wireType = $T09().None;
        return;
      }
    }
    throw $thisType.CreateException(writer);
  }; 

  function ProtoWriter_WriteObject$06 (value, key, writer) {
    var flag = writer === null;
    if (flag) {
      throw $S01().Construct("writer");
    }
    var flag2 = writer.model === null;
    if (flag2) {
      throw $S03().Construct("Cannot serialize sub-objects unless a model is provided");
    }
    var token = $thisType.StartSubItem(value, writer);
    if ((key | 0) >= 0) {
      $S0D().CallVirtual("Serialize", null, writer.model, key, value, writer);
    } else {
      var flag4 = (writer.model !== null) && 
      (writer.model).TrySerializeAuxiliaryType(
        writer, 
        JSIL.GetType(value), 
        $T22().Default, 
        1, 
        value, 
        false
      );
      if (!flag4) {
        $T02().ThrowUnexpectedType(JSIL.GetType(value));
      }
    }
    $thisType.EndSubItem(token, writer);
  }; 

  function ProtoWriter_WriteObject$07 (value, key, writer, style, fieldNumber) {
    var flag = writer.model === null;
    if (flag) {
      throw $S03().Construct("Cannot serialize sub-objects unless a model is provided");
    }
    var flag2 = writer.wireType !== $T09().None;
    if (flag2) {
      throw $thisType.CreateException(writer);
    }
    switch (style.valueOf()) {
      case 1: 
        writer.wireType = $T09().String;
        writer.fieldNumber = (fieldNumber | 0);
        if ((fieldNumber | 0) > 0) {
          $thisType.WriteHeaderCore(fieldNumber, $T09().String, writer);
        }
        break;

      case 2: 
      case 3: 
        writer.fieldNumber = 0;
        writer.wireType = $T09().Fixed32;
        break;

      default: 
        throw $S05().Construct("style");

    }
    var token = $thisType.StartSubItem(value, writer, true);
    if ((key | 0) < 0) {
      var flag5 = !(writer.model).TrySerializeAuxiliaryType(
        writer, 
        JSIL.GetType(value), 
        $T22().Default, 
        1, 
        value, 
        false
      );
      if (flag5) {
        $T02().ThrowUnexpectedType(JSIL.GetType(value));
      }
    } else {
      $S0D().CallVirtual("Serialize", null, writer.model, key, value, writer);
    }
    $thisType.EndSubItem(token, writer, style);
  }; 

  function ProtoWriter_WriteRecursionSafeObject (value, key, writer) {
    var flag = writer === null;
    if (flag) {
      throw $S01().Construct("writer");
    }
    var flag2 = writer.model === null;
    if (flag2) {
      throw $S03().Construct("Cannot serialize sub-objects unless a model is provided");
    }
    var token = $thisType.StartSubItem(null, writer);
    $S0D().CallVirtual("Serialize", null, writer.model, key, value, writer);
    $thisType.EndSubItem(token, writer);
  }; 

  function ProtoWriter_WriteSByte (value, writer) {
    $thisType.WriteInt32(value, writer);
  }; 

  function ProtoWriter_WriteSingle (value, writer) {
    var flag = writer === null;
    if (flag) {
      throw $S01().Construct("writer");
    }
    var wireType = writer.wireType;
    if (wireType !== $T09().Fixed64) {
      if (wireType !== $T09().Fixed32) {
        throw $thisType.CreateException(writer);
      }
      $thisType.WriteInt32($T1E().ToInt32($S0E().CallStatic($T1E(), "GetBytes", null, value), 0), writer);
    } else {
      $thisType.WriteDouble(value, writer);
    }
  }; 

  function ProtoWriter_WriteString (value, writer) {
    var flag = writer === null;
    if (flag) {
      throw $S01().Construct("writer");
    }
    var flag2 = writer.wireType !== $T09().String;
    if (flag2) {
      throw $thisType.CreateException(writer);
    }
    if (value === null) {
      throw $S01().Construct("value");
    }
    var len = (value.length | 0);
    var flag4 = len === 0;
    if (flag4) {
      $thisType.WriteUInt32Variant(0, writer);
      writer.wireType = $T09().None;
    } else {
      var predicted = ($S0F().CallVirtual("GetByteCount", null, $thisType.encoding, value) | 0);
      $thisType.WriteUInt32Variant((predicted >>> 0), writer);
      $thisType.DemandSpace(predicted, writer);
      var actual = ($S10().CallVirtual("GetBytes", null, $thisType.encoding, 
        value, 
        0, 
        value.length, 
        writer.ioBuffer, 
        writer.ioIndex
      ) | 0);
      $thisType.IncrementedAndReset(actual, writer);
    }
  }; 

  function ProtoWriter_WriteType (value, writer) {
    var flag = writer === null;
    if (flag) {
      throw $S01().Construct("writer");
    }
    $thisType.WriteString(writer.SerializeType(value), writer);
  }; 

  function ProtoWriter_WriteUInt16 (value, writer) {
    $thisType.WriteUInt32(value, writer);
  }; 

  function ProtoWriter_WriteUInt32 (value, writer) {
    var flag = writer === null;
    if (flag) {
      throw $S01().Construct("writer");
    }
    var wireType = writer.wireType;
    if ((wireType.valueOf() | 0) !== 0) {
      if (wireType !== $T09().Fixed64) {
        if (wireType !== $T09().Fixed32) {
          throw $thisType.CreateException(writer);
        }
        $thisType.WriteInt32((value | 0), writer);
      } else {
        $thisType.WriteInt64($T21().FromNumber(value), writer);
      }
    } else {
      $thisType.WriteUInt32Variant(value, writer);
      writer.wireType = $T09().None;
    }
  }; 

  function ProtoWriter_WriteUInt32Variant (value, writer) {
    $thisType.DemandSpace(5, writer);
    var count = 0;

    do {
      var arg_30_0 = writer.ioBuffer;
      var num = (writer.ioIndex | 0);
      writer.ioIndex = ((num + 1) | 0);
      arg_30_0[num] = (((value >>> 0) & 127) | 128 & 0xFF);
      num = count;
      count = ((num + 1) | 0);
    } while ((value = (value >>> 0) >>> 7) > 0);
    var var_4_58_cp_0 = writer.ioBuffer;
    var var_4_58_cp_1 = (((writer.ioIndex | 0) - 1) | 0);
    var_4_58_cp_0[var_4_58_cp_1] = (var_4_58_cp_0[var_4_58_cp_1] | 0) & 127;
    writer.position = (((writer.position | 0) + count) | 0);
  }; 

  function ProtoWriter_WriteUInt64 (value, writer) {
    var flag = writer === null;
    if (flag) {
      throw $S01().Construct("writer");
    }
    var wireType = writer.wireType;
    if ((wireType.valueOf() | 0) !== 0) {
      if (wireType !== $T09().Fixed64) {
        if (wireType !== $T09().Fixed32) {
          throw $thisType.CreateException(writer);
        }
        $thisType.WriteUInt32($T16().$OverflowCheck(value.ToNumber(4294967295, false)), writer);
      } else {
        $thisType.WriteInt64(value.ToInt64(), writer);
      }
    } else {
      $thisType.WriteUInt64Variant(value, writer);
      writer.wireType = $T09().None;
    }
  }; 

  function ProtoWriter_WriteUInt64Variant (value, writer) {
    $thisType.DemandSpace(10, writer);
    var count = 0;

    do {
      var arg_33_0 = writer.ioBuffer;
      var num = (writer.ioIndex | 0);
      writer.ioIndex = ((num + 1) | 0);
      arg_33_0[num] = (($T26().op_BitwiseOr(
          $T26().op_BitwiseAnd(value, $T26().Create(127, 0, 0)), 
          $T26().Create(128, 0, 0)
        )).ToNumber(255, false) | 0);
      num = count;
      count = ((num + 1) | 0);
    } while ($T26().op_GreaterThan(
        value = $T26().op_RightShift(value, 7), 
        $T26().Create(0, 0, 0)
      ));
    var var_4_5C_cp_0 = writer.ioBuffer;
    var var_4_5C_cp_1 = (((writer.ioIndex | 0) - 1) | 0);
    var_4_5C_cp_0[var_4_5C_cp_1] = (var_4_5C_cp_0[var_4_5C_cp_1] | 0) & 127;
    writer.position = (((writer.position | 0) + count) | 0);
  }; 

  function ProtoWriter_Zig$08 (value) {
    return (((value | 0) << 1) ^ ((value | 0) >> 31) >>> 0);
  }; 

  function ProtoWriter_Zig$09 (value) {
    return ($T21().op_ExclusiveOr(
        $T21().op_LeftShift(value, 1), 
        $T21().op_RightShift(value, 63)
      )).ToUInt64();
  }; 

  JSIL.MakeType({
      BaseType: $asm14.TypeRef("System.Object"), 
      Name: "ProtoBuf.ProtoWriter", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm14.TypeRef("System.IO.Stream"), $asm0E.TypeRef("ProtoBuf.Meta.TypeModel"), 
          $asm0E.TypeRef("ProtoBuf.SerializationContext")
        ]), 
      ProtoWriter__ctor
    );

    $.Method({Static:true , Public:true }, "AppendExtensionData", 
      new JSIL.MethodSignature(null, [$asm0E.TypeRef("ProtoBuf.IExtensible"), $.Type]), 
      ProtoWriter_AppendExtensionData
    );

    $.Method({Static:false, Public:false}, "CheckDepthFlushlock", 
      JSIL.MethodSignature.Void, 
      ProtoWriter_CheckDepthFlushlock
    );

    $.Method({Static:false, Public:false}, "CheckRecursionStackAndPush", 
      JSIL.MethodSignature.Action($.Object), 
      ProtoWriter_CheckRecursionStackAndPush
    );

    $.Method({Static:false, Public:true }, "Close", 
      JSIL.MethodSignature.Void, 
      ProtoWriter_Close
    );

    $.Method({Static:true , Public:false}, "CopyRawFromStream", 
      new JSIL.MethodSignature(null, [$asm14.TypeRef("System.IO.Stream"), $.Type]), 
      ProtoWriter_CopyRawFromStream
    );

    $.Method({Static:true , Public:false}, "CreateException", 
      new JSIL.MethodSignature($asm14.TypeRef("System.Exception"), [$.Type]), 
      ProtoWriter_CreateException
    );

    $.Method({Static:true , Public:false}, "DemandSpace", 
      new JSIL.MethodSignature(null, [$.Int32, $.Type]), 
      ProtoWriter_DemandSpace
    );

    $.Method({Static:false, Public:false}, "Dispose", 
      JSIL.MethodSignature.Void, 
      ProtoWriter_Dispose
    );

    $.Method({Static:true , Public:true }, "EndSubItem", 
      new JSIL.MethodSignature(null, [$asm0E.TypeRef("ProtoBuf.SubItemToken"), $.Type]), 
      ProtoWriter_EndSubItem$00
    );

    $.Method({Static:true , Public:false}, "EndSubItem", 
      new JSIL.MethodSignature(null, [
          $asm0E.TypeRef("ProtoBuf.SubItemToken"), $.Type, 
          $asm0E.TypeRef("ProtoBuf.PrefixStyle")
        ]), 
      ProtoWriter_EndSubItem$01
    );

    $.Method({Static:true , Public:false}, "Flush", 
      JSIL.MethodSignature.Action($.Type), 
      ProtoWriter_Flush
    );

    $.Method({Static:false, Public:true }, "get_Context", 
      JSIL.MethodSignature.Return($asm0E.TypeRef("ProtoBuf.SerializationContext")), 
      ProtoWriter_get_Context
    );

    $.Method({Static:false, Public:true }, "get_Model", 
      JSIL.MethodSignature.Return($asm0E.TypeRef("ProtoBuf.Meta.TypeModel")), 
      ProtoWriter_get_Model
    );

    $.Method({Static:false, Public:false}, "get_NetCache", 
      JSIL.MethodSignature.Return($asm0E.TypeRef("ProtoBuf.NetObjectCache")), 
      ProtoWriter_get_NetCache
    );

    $.Method({Static:false, Public:false}, "get_WireType", 
      JSIL.MethodSignature.Return($asm0E.TypeRef("ProtoBuf.WireType")), 
      ProtoWriter_get_WireType
    );

    $.Method({Static:true , Public:false}, "GetPosition", 
      new JSIL.MethodSignature($.Int32, [$.Type]), 
      ProtoWriter_GetPosition
    );

    $.Method({Static:false, Public:false}, "GetTypeKey", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$asm14.TypeRef("System.Type")])]), 
      ProtoWriter_GetTypeKey
    );

    $.Method({Static:true , Public:false}, "IncrementedAndReset", 
      new JSIL.MethodSignature(null, [$.Int32, $.Type]), 
      ProtoWriter_IncrementedAndReset
    );

    $.Method({Static:false, Public:false}, "PopRecursionStack", 
      JSIL.MethodSignature.Void, 
      ProtoWriter_PopRecursionStack
    );

    $.Method({Static:false, Public:false}, "SerializeType", 
      new JSIL.MethodSignature($.String, [$asm14.TypeRef("System.Type")]), 
      ProtoWriter_SerializeType
    );

    $.Method({Static:true , Public:true }, "SetPackedField", 
      new JSIL.MethodSignature(null, [$.Int32, $.Type]), 
      ProtoWriter_SetPackedField
    );

    $.Method({Static:false, Public:true }, "SetRootObject", 
      JSIL.MethodSignature.Action($.Object), 
      ProtoWriter_SetRootObject
    );

    $.Method({Static:true , Public:true }, "StartSubItem", 
      new JSIL.MethodSignature($asm0E.TypeRef("ProtoBuf.SubItemToken"), [$.Object, $.Type]), 
      ProtoWriter_StartSubItem$02
    );

    $.Method({Static:true , Public:false}, "StartSubItem", 
      new JSIL.MethodSignature($asm0E.TypeRef("ProtoBuf.SubItemToken"), [
          $.Object, $.Type, 
          $.Boolean
        ]), 
      ProtoWriter_StartSubItem$03
    );

    $.Method({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void, 
      ProtoWriter_System_IDisposable_Dispose
    )
      .Overrides($asm14.TypeRef("System.IDisposable"), "Dispose");

    $.Method({Static:true , Public:true }, "ThrowEnumException", 
      new JSIL.MethodSignature(null, [$.Type, $.Object]), 
      ProtoWriter_ThrowEnumException
    );

    $.Method({Static:true , Public:true }, "WriteBoolean", 
      new JSIL.MethodSignature(null, [$.Boolean, $.Type]), 
      ProtoWriter_WriteBoolean
    );

    $.Method({Static:true , Public:true }, "WriteByte", 
      new JSIL.MethodSignature(null, [$.Byte, $.Type]), 
      ProtoWriter_WriteByte
    );

    $.Method({Static:true , Public:true }, "WriteBytes", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.Byte]), $.Type]), 
      ProtoWriter_WriteBytes$04
    );

    $.Method({Static:true , Public:true }, "WriteBytes", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $.Type
        ]), 
      ProtoWriter_WriteBytes$05
    );

    $.Method({Static:true , Public:true }, "WriteDouble", 
      new JSIL.MethodSignature(null, [$.Double, $.Type]), 
      ProtoWriter_WriteDouble
    );

    $.Method({Static:true , Public:true }, "WriteFieldHeader", 
      new JSIL.MethodSignature(null, [
          $.Int32, $asm0E.TypeRef("ProtoBuf.WireType"), 
          $.Type
        ]), 
      ProtoWriter_WriteFieldHeader
    );

    $.Method({Static:true , Public:false}, "WriteHeaderCore", 
      new JSIL.MethodSignature(null, [
          $.Int32, $asm0E.TypeRef("ProtoBuf.WireType"), 
          $.Type
        ]), 
      ProtoWriter_WriteHeaderCore
    );

    $.Method({Static:true , Public:true }, "WriteInt16", 
      new JSIL.MethodSignature(null, [$.Int16, $.Type]), 
      ProtoWriter_WriteInt16
    );

    $.Method({Static:true , Public:true }, "WriteInt32", 
      new JSIL.MethodSignature(null, [$.Int32, $.Type]), 
      ProtoWriter_WriteInt32
    );

    $.Method({Static:true , Public:false}, "WriteInt32ToBuffer", 
      new JSIL.MethodSignature(null, [
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32
        ]), 
      ProtoWriter_WriteInt32ToBuffer
    );

    $.Method({Static:true , Public:true }, "WriteInt64", 
      new JSIL.MethodSignature(null, [$.Int64, $.Type]), 
      ProtoWriter_WriteInt64
    );

    $.Method({Static:true , Public:true }, "WriteObject", 
      new JSIL.MethodSignature(null, [
          $.Object, $.Int32, 
          $.Type
        ]), 
      ProtoWriter_WriteObject$06
    );

    $.Method({Static:true , Public:false}, "WriteObject", 
      new JSIL.MethodSignature(null, [
          $.Object, $.Int32, 
          $.Type, $asm0E.TypeRef("ProtoBuf.PrefixStyle"), 
          $.Int32
        ]), 
      ProtoWriter_WriteObject$07
    );

    $.Method({Static:true , Public:true }, "WriteRecursionSafeObject", 
      new JSIL.MethodSignature(null, [
          $.Object, $.Int32, 
          $.Type
        ]), 
      ProtoWriter_WriteRecursionSafeObject
    );

    $.Method({Static:true , Public:true }, "WriteSByte", 
      new JSIL.MethodSignature(null, [$.SByte, $.Type]), 
      ProtoWriter_WriteSByte
    );

    $.Method({Static:true , Public:true }, "WriteSingle", 
      new JSIL.MethodSignature(null, [$.Single, $.Type]), 
      ProtoWriter_WriteSingle
    );

    $.Method({Static:true , Public:true }, "WriteString", 
      new JSIL.MethodSignature(null, [$.String, $.Type]), 
      ProtoWriter_WriteString
    );

    $.Method({Static:true , Public:true }, "WriteType", 
      new JSIL.MethodSignature(null, [$asm14.TypeRef("System.Type"), $.Type]), 
      ProtoWriter_WriteType
    );

    $.Method({Static:true , Public:true }, "WriteUInt16", 
      new JSIL.MethodSignature(null, [$.UInt16, $.Type]), 
      ProtoWriter_WriteUInt16
    );

    $.Method({Static:true , Public:true }, "WriteUInt32", 
      new JSIL.MethodSignature(null, [$.UInt32, $.Type]), 
      ProtoWriter_WriteUInt32
    );

    $.Method({Static:true , Public:false}, "WriteUInt32Variant", 
      new JSIL.MethodSignature(null, [$.UInt32, $.Type]), 
      ProtoWriter_WriteUInt32Variant
    );

    $.Method({Static:true , Public:true }, "WriteUInt64", 
      new JSIL.MethodSignature(null, [$.UInt64, $.Type]), 
      ProtoWriter_WriteUInt64
    );

    $.Method({Static:true , Public:false}, "WriteUInt64Variant", 
      new JSIL.MethodSignature(null, [$.UInt64, $.Type]), 
      ProtoWriter_WriteUInt64Variant
    );

    $.Method({Static:true , Public:false}, "Zig", 
      new JSIL.MethodSignature($.UInt32, [$.Int32]), 
      ProtoWriter_Zig$08
    );

    $.Method({Static:true , Public:false}, "Zig", 
      new JSIL.MethodSignature($.UInt64, [$.Int64]), 
      ProtoWriter_Zig$09
    );

    $.Field({Static:false, Public:false}, "dest", $asm14.TypeRef("System.IO.Stream"));

    $.Field({Static:false, Public:false}, "model", $asm0E.TypeRef("ProtoBuf.Meta.TypeModel"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "netCache", $asm0E.TypeRef("ProtoBuf.NetObjectCache"));

    $.Field({Static:false, Public:false}, "fieldNumber", $.Int32);

    $.Field({Static:false, Public:false}, "flushLock", $.Int32);

    $.Field({Static:false, Public:false}, "wireType", $asm0E.TypeRef("ProtoBuf.WireType"));

    $.Field({Static:false, Public:false}, "depth", $.Int32);

    $.Constant({Static:true , Public:false}, "RecursionCheckDepth", $.Int32, 25);

    $.Field({Static:false, Public:false}, "recursionStack", $asm0E.TypeRef("ProtoBuf.Meta.MutableList"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "context", $asm0E.TypeRef("ProtoBuf.SerializationContext"));

    $.Field({Static:false, Public:false}, "ioBuffer", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "ioIndex", $.Int32);

    $.Field({Static:false, Public:false}, "position", $.Int32);

    $.Field({Static:true , Public:false, ReadOnly:true }, "encoding", $asm14.TypeRef("System.Text.UTF8Encoding"));

    $.Field({Static:false, Public:false}, "packedFieldNumber", $.Int32);


    function ProtoWriter__cctor () {
      $thisType.encoding = $S00().Construct();
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      ProtoWriter__cctor
    );

    $.Property({Static:false, Public:false}, "NetCache", $asm0E.TypeRef("ProtoBuf.NetObjectCache"));

    $.Property({Static:false, Public:false}, "WireType", $asm0E.TypeRef("ProtoBuf.WireType"));

    $.Property({Static:false, Public:true }, "Context", $asm0E.TypeRef("ProtoBuf.SerializationContext"));

    $.Property({Static:false, Public:true }, "Model", $asm0E.TypeRef("ProtoBuf.Meta.TypeModel"));

    $.ImplementInterfaces(
      /* 0 */ $asm14.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ProtoBuf.SerializationContext */ 

(function SerializationContext$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm14.System.Object)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm14.System.Boolean)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm14.System.InvalidOperationException)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm14.TypeRef("System.InvalidOperationException"), [$asm14.TypeRef("System.String")]))) ();
  };


  function SerializationContext__ctor () {
  }; 

  function SerializationContext_Freeze () {
    this.frozen = true;
  }; 

  function SerializationContext_get_Context () {
    return this.context;
  }; 

  function SerializationContext_get_Default () {
    return $thisType.$default;
  }; 

  function SerializationContext_set_Context (value) {
    var flag = this.context !== value;
    if (flag) {
      this.ThrowIfFrozen();
      this.context = value;
    }
  }; 

  function SerializationContext_ThrowIfFrozen () {
    var flag = this.frozen;
    if (flag) {
      throw $S00().Construct("The serialization-context cannot be changed once it is in use");
    }
  }; 

  JSIL.MakeType({
      BaseType: $asm14.TypeRef("System.Object"), 
      Name: "ProtoBuf.SerializationContext", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      SerializationContext__ctor
    );

    $.Method({Static:false, Public:false}, "Freeze", 
      JSIL.MethodSignature.Void, 
      SerializationContext_Freeze
    );

    $.Method({Static:false, Public:true }, "get_Context", 
      JSIL.MethodSignature.Return($.Object), 
      SerializationContext_get_Context
    );

    $.Method({Static:true , Public:false}, "get_Default", 
      JSIL.MethodSignature.Return($.Type), 
      SerializationContext_get_Default
    );

    $.Method({Static:false, Public:true }, "set_Context", 
      JSIL.MethodSignature.Action($.Object), 
      SerializationContext_set_Context
    );

    $.Method({Static:false, Public:false}, "ThrowIfFrozen", 
      JSIL.MethodSignature.Void, 
      SerializationContext_ThrowIfFrozen
    );

    $.Field({Static:false, Public:false}, "frozen", $.Boolean);

    $.Field({Static:false, Public:false}, "context", $.Object);

    $.Field({Static:true , Public:false, ReadOnly:true }, "$default", $.Type);


    function SerializationContext__cctor () {
      $thisType.$default = new $thisType();
      $thisType.$default.Freeze();
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      SerializationContext__cctor
    );

    $.Property({Static:false, Public:true }, "Context", $.Object);

    $.Property({Static:true , Public:false}, "Default", $.Type);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ProtoBuf.Serializer */ 

(function Serializer$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm14.System.Type)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm14.System.IO.MemoryStream)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm14.System.IO.Stream)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm14.System.Int64)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm14.System.IDisposable)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm0E.ProtoBuf.Meta.TypeModel)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm0E.ProtoBuf.Meta.RuntimeTypeModel)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm0E.ProtoBuf.PrefixStyle)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm14.System.Int32)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm0E.ProtoBuf.BufferPool)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm14.System.Boolean)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm0E.ProtoBuf.ProtoReader)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize(System.Array.Of($asm14.System.Byte))) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm14.TypeRef("System.IO.MemoryStream"), null))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature($asm14.TypeRef("System.Object"), [
        $asm14.TypeRef("System.IO.Stream"), $asm14.TypeRef("System.Object"), 
        $asm14.TypeRef("System.Type")
      ]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.MethodSignature($asm14.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [
        $asm14.TypeRef("System.IO.Stream"), $asm0E.TypeRef("ProtoBuf.PrefixStyle"), 
        $asm14.TypeRef("System.Int32")
      ], ["T"]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.MethodSignature("!!0", [
        $asm14.TypeRef("System.IO.Stream"), $asm0E.TypeRef("ProtoBuf.PrefixStyle"), 
        $asm14.TypeRef("System.Int32")
      ], ["T"]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm14.TypeRef("System.IO.Stream"), $asm14.TypeRef("System.Object")]))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm14.TypeRef("System.IO.Stream"), "!!0", 
        $asm0E.TypeRef("ProtoBuf.PrefixStyle"), $asm14.TypeRef("System.Int32")
      ], ["T"]))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(new JSIL.ConstructorSignature($asm14.TypeRef("System.IO.MemoryStream"), [
        $jsilcore.TypeRef("System.Array", [$asm14.TypeRef("System.Byte")]), $asm14.TypeRef("System.Int32"), 
        $asm14.TypeRef("System.Int32")
      ]))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm14.System.IDisposable.Dispose)) ();
  };


  function Serializer_ChangeType$b2 (TFrom, TTo, instance) {
    var ms = $S00().Construct();
    try {
      $thisType.Serialize$b1(TFrom)(ms, JSIL.CloneParameter(TFrom, instance));
      ms.set_Position($T03().Create(0, 0, 0));
      var result = JSIL.CloneParameter(TTo, $thisType.Deserialize$b1(TTo)(ms));
    } finally {
      if (ms !== null) {
        $IM00().Call(ms, null);
      }
    }
    return result;
  }; 

  function Serializer_DeepClone$b1 (T, instance) {
    return (
      (instance === null)
         ? instance
         : T.$Cast($T06().get_Default().DeepClone(JSIL.CloneParameter(T, instance))))
    ;
  }; 

  function Serializer_Deserialize$b1 (T, source) {
    return T.$Cast($S01().CallVirtual("Deserialize", null, $T06().get_Default(), source, null, T));
  }; 

  function Serializer_DeserializeItems$b1 (T, source, style, fieldNumber) {
    return $S02().CallVirtual("DeserializeItems$b1", [T], $T06().get_Default(), source, style, fieldNumber);
  }; 

  function Serializer_DeserializeWithLengthPrefix$b1$00 (T, source, style) {
    return $S03().CallStatic($thisType, "DeserializeWithLengthPrefix$b1", [T], source, style, 0);
  }; 

  function Serializer_DeserializeWithLengthPrefix$b1$01 (T, source, style, fieldNumber) {
    var model = $T06().get_Default();
    return T.$Cast(model.DeserializeWithLengthPrefix(
        source, 
        null, 
        model.MapType(T), 
        style, 
        fieldNumber
      ));
  }; 

  function Serializer_FlushPool () {
    $T09().Flush();
  }; 

  function Serializer_GetProto$b1 (T) {
    return $T06().get_Default().GetSchema($T06().get_Default().MapType(T));
  }; 

  function Serializer_Merge$b1 (T, source, instance) {
    return T.$Cast($S01().CallVirtual("Deserialize", null, $T06().get_Default(), source, JSIL.CloneParameter(T, instance), T));
  }; 

  function Serializer_MergeWithLengthPrefix$b1 (T, source, instance, style) {
    var model = $T06().get_Default();
    return T.$Cast(model.DeserializeWithLengthPrefix(
        source, 
        JSIL.CloneParameter(T, instance), 
        model.MapType(T), 
        style, 
        0
      ));
  }; 

  function Serializer_PrepareSerializer$b1 (T) {
  }; 

  function Serializer_Serialize$b1 (T, destination, instance) {
    var flag = instance !== null;
    if (flag) {
      $S04().CallVirtual("Serialize", null, $T06().get_Default(), destination, JSIL.CloneParameter(T, instance));
    }
  }; 

  function Serializer_SerializeWithLengthPrefix$b1$02 (T, destination, instance, style) {
    $S05().CallStatic($thisType, "SerializeWithLengthPrefix$b1", [T], destination, JSIL.CloneParameter(T, instance), style, 0);
  }; 

  function Serializer_SerializeWithLengthPrefix$b1$03 (T, destination, instance, style, fieldNumber) {
    var model = $T06().get_Default();
    model.SerializeWithLengthPrefix(
      destination, 
      JSIL.CloneParameter(T, instance), 
      model.MapType(T), 
      style, 
      fieldNumber
    );
  }; 

  function Serializer_TryReadLengthPrefix$04 (source, style, /* ref */ length) {
    var fieldNumber = new JSIL.BoxedVariable(0);
    var bytesRead = new JSIL.BoxedVariable(0);
    length.set($T0B().ReadLengthPrefix(
        source, 
        false, 
        style, 
        /* ref */ fieldNumber, 
        /* ref */ bytesRead
      ));
    return ((bytesRead.get() | 0) > 0);
  }; 

  function Serializer_TryReadLengthPrefix$05 (buffer, index, count, style, /* ref */ length) {
    var source = $S06().Construct(buffer, index, count);
    try {
      var result = $thisType.TryReadLengthPrefix(source, style, /* ref */ length);
    } finally {
      if (source !== null) {
        $IM00().Call(source, null);
      }
    }
    return result;
  }; 

  JSIL.MakeStaticClass("ProtoBuf.Serializer", true, [], function ($ib) {
    $ = $ib;

    $.Method({Static:true , Public:true }, "ChangeType", 
      new JSIL.MethodSignature("!!1", ["!!0"], ["TFrom", "TTo"]), 
      Serializer_ChangeType$b2
    );

    $.Method({Static:true , Public:true }, "DeepClone", 
      new JSIL.MethodSignature("!!0", ["!!0"], ["T"]), 
      Serializer_DeepClone$b1
    );

    $.Method({Static:true , Public:true }, "Deserialize", 
      new JSIL.MethodSignature("!!0", [$asm14.TypeRef("System.IO.Stream")], ["T"]), 
      Serializer_Deserialize$b1
    );

    $.Method({Static:true , Public:true }, "DeserializeItems", 
      new JSIL.MethodSignature($asm14.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [
          $asm14.TypeRef("System.IO.Stream"), $asm0E.TypeRef("ProtoBuf.PrefixStyle"), 
          $.Int32
        ], ["T"]), 
      Serializer_DeserializeItems$b1
    );

    $.Method({Static:true , Public:true }, "DeserializeWithLengthPrefix", 
      new JSIL.MethodSignature("!!0", [$asm14.TypeRef("System.IO.Stream"), $asm0E.TypeRef("ProtoBuf.PrefixStyle")], ["T"]), 
      Serializer_DeserializeWithLengthPrefix$b1$00
    );

    $.Method({Static:true , Public:true }, "DeserializeWithLengthPrefix", 
      new JSIL.MethodSignature("!!0", [
          $asm14.TypeRef("System.IO.Stream"), $asm0E.TypeRef("ProtoBuf.PrefixStyle"), 
          $.Int32
        ], ["T"]), 
      Serializer_DeserializeWithLengthPrefix$b1$01
    );

    $.Method({Static:true , Public:true }, "FlushPool", 
      JSIL.MethodSignature.Void, 
      Serializer_FlushPool
    );

    $.Method({Static:true , Public:true }, "GetProto", 
      new JSIL.MethodSignature($.String, null, ["T"]), 
      Serializer_GetProto$b1
    );

    $.Method({Static:true , Public:true }, "Merge", 
      new JSIL.MethodSignature("!!0", [$asm14.TypeRef("System.IO.Stream"), "!!0"], ["T"]), 
      Serializer_Merge$b1
    );

    $.Method({Static:true , Public:true }, "MergeWithLengthPrefix", 
      new JSIL.MethodSignature("!!0", [
          $asm14.TypeRef("System.IO.Stream"), "!!0", 
          $asm0E.TypeRef("ProtoBuf.PrefixStyle")
        ], ["T"]), 
      Serializer_MergeWithLengthPrefix$b1
    );

    $.Method({Static:true , Public:true }, "PrepareSerializer", 
      new JSIL.MethodSignature(null, null, ["T"]), 
      Serializer_PrepareSerializer$b1
    );

    $.Method({Static:true , Public:true }, "Serialize", 
      new JSIL.MethodSignature(null, [$asm14.TypeRef("System.IO.Stream"), "!!0"], ["T"]), 
      Serializer_Serialize$b1
    );

    $.Method({Static:true , Public:true }, "SerializeWithLengthPrefix", 
      new JSIL.MethodSignature(null, [
          $asm14.TypeRef("System.IO.Stream"), "!!0", 
          $asm0E.TypeRef("ProtoBuf.PrefixStyle")
        ], ["T"]), 
      Serializer_SerializeWithLengthPrefix$b1$02
    );

    $.Method({Static:true , Public:true }, "SerializeWithLengthPrefix", 
      new JSIL.MethodSignature(null, [
          $asm14.TypeRef("System.IO.Stream"), "!!0", 
          $asm0E.TypeRef("ProtoBuf.PrefixStyle"), $.Int32
        ], ["T"]), 
      Serializer_SerializeWithLengthPrefix$b1$03
    );

    $.Method({Static:true , Public:true }, "TryReadLengthPrefix", 
      new JSIL.MethodSignature($.Boolean, [
          $asm14.TypeRef("System.IO.Stream"), $asm0E.TypeRef("ProtoBuf.PrefixStyle"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]), 
      Serializer_TryReadLengthPrefix$04
    );

    $.Method({Static:true , Public:true }, "TryReadLengthPrefix", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm0E.TypeRef("ProtoBuf.PrefixStyle"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]), 
      Serializer_TryReadLengthPrefix$05
    );

    $.Constant({Static:true , Public:false}, "ProtoBinaryField", $.String, "proto");

    $.Constant({Static:true , Public:true }, "ListItemTag", $.Int32, 1);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ProtoBuf.Serializer+NonGeneric */ 

(function NonGeneric$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm14.System.Type)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0E.ProtoBuf.Meta.TypeModel)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0E.ProtoBuf.Meta.RuntimeTypeModel)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm14.System.Object)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm14.System.IO.Stream)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm14.System.ArgumentNullException)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm0E.ProtoBuf.PrefixStyle)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm14.System.Int32)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm0E.ProtoBuf.Serializer_TypeResolver)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature($asm14.TypeRef("System.Object"), [
        $asm14.TypeRef("System.IO.Stream"), $asm14.TypeRef("System.Object"), 
        $asm14.TypeRef("System.Type")
      ]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm14.TypeRef("System.ArgumentNullException"), [$asm14.TypeRef("System.String")]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.MethodSignature($asm14.TypeRef("System.Object"), [
        $asm14.TypeRef("System.IO.Stream"), $asm14.TypeRef("System.Object"), 
        $asm14.TypeRef("System.Type"), $asm0E.TypeRef("ProtoBuf.SerializationContext")
      ]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm14.TypeRef("System.IO.Stream"), $asm14.TypeRef("System.Object")]))) ();
  };


  function NonGeneric_CanSerialize (type) {
    return $T02().get_Default().IsDefined(type);
  }; 

  function NonGeneric_DeepClone (instance) {
    return (
      (instance === null)
         ? null
         : $T02().get_Default().DeepClone(instance))
    ;
  }; 

  function NonGeneric_Deserialize (type, source) {
    return $S00().CallVirtual("Deserialize", null, $T02().get_Default(), source, null, type);
  }; 

  function NonGeneric_Merge (source, instance) {
    if (instance === null) {
      throw $S01().Construct("instance");
    }
    return $S02().CallVirtual("Deserialize", null, $T02().get_Default(), source, instance, JSIL.GetType(instance), null);
  }; 

  function NonGeneric_Serialize (dest, instance) {
    if (instance !== null) {
      $S03().CallVirtual("Serialize", null, $T02().get_Default(), dest, instance);
    }
  }; 

  function NonGeneric_SerializeWithLengthPrefix (destination, instance, style, fieldNumber) {
    if (instance === null) {
      throw $S01().Construct("instance");
    }
    var model = $T02().get_Default();
    model.SerializeWithLengthPrefix(
      destination, 
      instance, 
      model.MapType(JSIL.GetType(instance)), 
      style, 
      fieldNumber
    );
  }; 

  function NonGeneric_TryDeserializeWithLengthPrefix (source, style, resolver, /* ref */ value) {
    value.set($T02().get_Default().DeserializeWithLengthPrefix(
        source, 
        null, 
        null, 
        style, 
        0, 
        resolver
      ));
    return (value.get() !== null);
  }; 

  JSIL.MakeStaticClass("ProtoBuf.Serializer+NonGeneric", false, [], function ($ib) {
    $ = $ib;

    $.Method({Static:true , Public:true }, "CanSerialize", 
      new JSIL.MethodSignature($.Boolean, [$asm14.TypeRef("System.Type")]), 
      NonGeneric_CanSerialize
    );

    $.Method({Static:true , Public:true }, "DeepClone", 
      new JSIL.MethodSignature($.Object, [$.Object]), 
      NonGeneric_DeepClone
    );

    $.Method({Static:true , Public:true }, "Deserialize", 
      new JSIL.MethodSignature($.Object, [$asm14.TypeRef("System.Type"), $asm14.TypeRef("System.IO.Stream")]), 
      NonGeneric_Deserialize
    );

    $.Method({Static:true , Public:true }, "Merge", 
      new JSIL.MethodSignature($.Object, [$asm14.TypeRef("System.IO.Stream"), $.Object]), 
      NonGeneric_Merge
    );

    $.Method({Static:true , Public:true }, "Serialize", 
      new JSIL.MethodSignature(null, [$asm14.TypeRef("System.IO.Stream"), $.Object]), 
      NonGeneric_Serialize
    );

    $.Method({Static:true , Public:true }, "SerializeWithLengthPrefix", 
      new JSIL.MethodSignature(null, [
          $asm14.TypeRef("System.IO.Stream"), $.Object, 
          $asm0E.TypeRef("ProtoBuf.PrefixStyle"), $.Int32
        ]), 
      NonGeneric_SerializeWithLengthPrefix
    );

    $.Method({Static:true , Public:true }, "TryDeserializeWithLengthPrefix", 
      new JSIL.MethodSignature($.Boolean, [
          $asm14.TypeRef("System.IO.Stream"), $asm0E.TypeRef("ProtoBuf.PrefixStyle"), 
          $asm0E.TypeRef("ProtoBuf.Serializer+TypeResolver"), $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ]), 
      NonGeneric_TryDeserializeWithLengthPrefix
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ProtoBuf.Serializer+GlobalOptions */ 

(function GlobalOptions$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0E.ProtoBuf.Meta.RuntimeTypeModel)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm14.System.Boolean)) ();
  };


  function GlobalOptions_get_InferTagFromName () {
    return $T00().get_Default().get_InferTagFromNameDefault();
  }; 

  function GlobalOptions_set_InferTagFromName (value) {
    $T00().get_Default().set_InferTagFromNameDefault(value);
  }; 

  JSIL.MakeStaticClass("ProtoBuf.Serializer+GlobalOptions", false, [], function ($ib) {
    $ = $ib;

    $.Method({Static:true , Public:true }, "get_InferTagFromName", 
      JSIL.MethodSignature.Return($.Boolean), 
      GlobalOptions_get_InferTagFromName
    );

    $.Method({Static:true , Public:true }, "set_InferTagFromName", 
      JSIL.MethodSignature.Action($.Boolean), 
      GlobalOptions_set_InferTagFromName
    );

    $.Property({Static:true , Public:true }, "InferTagFromName", $.Boolean)
      .Attribute($asm14.TypeRef("System.ObsoleteAttribute"), function () { return ["Please use RuntimeTypeModel.Default.InferTagFromNameDefault instead (or on a per-model basis)", false]; });


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate ProtoBuf.Serializer+TypeResolver */ 

JSIL.MakeDelegate("ProtoBuf.Serializer+TypeResolver", false, [], 
  new JSIL.MethodSignature($asm14.TypeRef("System.Type"), [$asm14.TypeRef("System.Int32")]));

/* struct ProtoBuf.SubItemToken */ 

(function SubItemToken$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm14.System.Int32)) ();
  };


  function SubItemToken__ctor (value) {
    this.value = (value | 0);
  }; 

  JSIL.MakeType({
      BaseType: $asm14.TypeRef("System.ValueType"), 
      Name: "ProtoBuf.SubItemToken", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 1, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Int32), 
      SubItemToken__ctor
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "value", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum ProtoBuf.WireType */ 

JSIL.MakeEnum(
  {
    FullName: "ProtoBuf.WireType", 
    BaseType: $asm14.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    None: -1, 
    Variant: 0, 
    Fixed64: 1, 
    String: 2, 
    StartGroup: 3, 
    EndGroup: 4, 
    Fixed32: 5, 
    SignedVariant: 8, 
  }
);

JSIL.DeclareNamespace("ProtoBuf.Serializers");
/* class ProtoBuf.Serializers.ProtoDecoratorBase */ 

(function ProtoDecoratorBase$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0E.ProtoBuf.Serializers.IProtoSerializer)) ();
  };


  function ProtoDecoratorBase__ctor (tail) {
    this.Tail = tail;
  }; 

  JSIL.MakeType({
      BaseType: $asm14.TypeRef("System.Object"), 
      Name: "ProtoBuf.Serializers.ProtoDecoratorBase", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm0E.TypeRef("ProtoBuf.Serializers.IProtoSerializer")), 
      ProtoDecoratorBase__ctor
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "Tail", $asm0E.TypeRef("ProtoBuf.Serializers.IProtoSerializer"));

    $.Property({Static:false, Public:true , Virtual:true }, "ExpectedType", $asm14.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "ReturnsValue", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "RequiresOldValue", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm0E.TypeRef("ProtoBuf.Serializers.IProtoSerializer")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ProtoBuf.Serializers.ArrayDecorator */ 

(function ArrayDecorator$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0E.ProtoBuf.Meta.TypeModel)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0E.ProtoBuf.Serializers.IProtoSerializer)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm14.System.Int32)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm14.System.Boolean)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm0E.ProtoBuf.WireType)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm14.System.Type)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm0E.ProtoBuf.Serializers.ProtoDecoratorBase)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm0E.ProtoBuf.Helpers)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm14.System.ArgumentOutOfRangeException)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm0E.ProtoBuf.Serializers.ListDecorator)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm14.System.InvalidOperationException)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm14.System.Object)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm0E.ProtoBuf.ProtoReader)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm0E.ProtoBuf.Meta.BasicList)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm0E.ProtoBuf.SubItemToken)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm14.System.Array)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm0E.ProtoBuf.ProtoWriter)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm14.System.Collections.IList)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm14.System.Collections.ICollection)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm14.System.NullReferenceException)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm14.TypeRef("System.ArgumentOutOfRangeException"), [$asm14.TypeRef("System.String")]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm14.TypeRef("System.InvalidOperationException"), [$asm14.TypeRef("System.String")]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm14.TypeRef("System.NullReferenceException"), null))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm0E.ProtoBuf.Serializers.IProtoSerializer.Read)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm14.System.Collections.ICollection.get_Count)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm14.System.Collections.IList.get_Item)) ();
  };
  var $IM03 = function () {
    return ($IM03 = JSIL.Memoize($asm0E.ProtoBuf.Serializers.IProtoSerializer.Write)) ();
  };


  function ArrayDecorator__ctor (model, tail, fieldNumber, writePacked, packedWireType, arrayType, overwriteList, supportNull) {
    $T06().prototype._ctor.call(this, tail);
    this.itemType = arrayType.GetElementType();
    var arg_37_0 = (
      supportNull
         ? this.itemType
         : JSIL.Coalesce($T07().GetUnderlyingType(this.itemType), this.itemType))
    ;
    var flag = !(!writePacked && 
      (packedWireType === $T04().None)) && 
    ((fieldNumber | 0) <= 0);
    if (flag) {
      throw $S00().Construct("fieldNumber");
    }
    var flag2 = !$T09().CanPack(packedWireType);
    if (flag2) {
      if (writePacked) {
        throw $S01().Construct("Only simple data-types can use packed encoding");
      }
      packedWireType = $T04().None;
    }
    this.fieldNumber = (fieldNumber | 0);
    this.packedWireType = packedWireType;
    if (writePacked) {
      this.options = (this.options | 0) | 1;
    }
    if (overwriteList) {
      this.options = (this.options | 0) | 2;
    }
    if (supportNull) {
      this.options = (this.options | 0) | 4;
    }
    this.arrayType = arrayType;
  }; 

  function ArrayDecorator_get_AppendToCollection () {
    return (((this.options | 0) & 2) === 0);
  }; 

  function ArrayDecorator_get_ExpectedType () {
    return this.arrayType;
  }; 

  function ArrayDecorator_get_RequiresOldValue () {
    return this.get_AppendToCollection();
  }; 

  function ArrayDecorator_get_ReturnsValue () {
    return true;
  }; 

  function ArrayDecorator_get_SupportNull () {
    return (((this.options | 0) & 4) > 0);
  }; 

  function ArrayDecorator_Read (value, source) {
    var field = (source.get_FieldNumber() | 0);
    var list = new ($T0D())();
    var flag = (this.packedWireType !== $T04().None) && 
    (source.get_WireType() === $T04().String);
    if (flag) {
      var token = $T0C().StartSubItem(source);

      while ($T0C().HasSubValue(this.packedWireType, source)) {
        list.Add($IM00().Call(this.Tail, null, null, source));
      }
      $T0C().EndSubItem(token, source);
    } else {

      do {
        list.Add($IM00().Call(this.Tail, null, null, source));
      } while (source.TryReadFieldHeader(field));
    }
    var oldLen = ((
      this.get_AppendToCollection()
         ? (
          (value === null)
             ? 0
             : $T0F().$Cast(value).length)

         : 0)
     | 0);
    var result = (JSIL.Array.New(this.itemType, ((oldLen + (list.get_Count() | 0)) | 0)));
    if (oldLen > 0) {
      JSIL.Array.CopyTo($T0F().$Cast(value), result, 0);
    }
    list.CopyTo(result, oldLen);
    return result;
  }; 

  function ArrayDecorator_Write (value, dest) {
    var arr = $T11().$Cast(value);
    var len = ($IM01().Call(arr, null) | 0);
    var writePacked = ((this.options | 0) & 1) > 0;
    var flag = writePacked;
    if (flag) {
      $T10().WriteFieldHeader(this.fieldNumber, $T04().String, dest);
      var token = $T10().StartSubItem(value, dest);
      $T10().SetPackedField(this.fieldNumber, dest);
    } else {
      token = new ($T0E())();
    }
    var checkForNull = !this.get_SupportNull();

    for (var i = 0; i < len; ) {
      var obj = $IM02().Call(arr, null, i);
      var flag2 = checkForNull && 
      (obj === null);
      if (flag2) {
        throw $S02().Construct();
      }
      $IM03().Call(this.Tail, null, obj, dest);
      var num = i;
      i = ((num + 1) | 0);
    }
    var flag3 = writePacked;
    if (flag3) {
      $T10().EndSubItem(token, dest);
    }
  }; 

  JSIL.MakeType({
      BaseType: $asm0E.TypeRef("ProtoBuf.Serializers.ProtoDecoratorBase"), 
      Name: "ProtoBuf.Serializers.ArrayDecorator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 8, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0E.TypeRef("ProtoBuf.Meta.TypeModel"), $asm0E.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), 
          $.Int32, $.Boolean, 
          $asm0E.TypeRef("ProtoBuf.WireType"), $asm14.TypeRef("System.Type"), 
          $.Boolean, $.Boolean
        ]), 
      ArrayDecorator__ctor
    );

    $.Method({Static:false, Public:false}, "get_AppendToCollection", 
      JSIL.MethodSignature.Return($.Boolean), 
      ArrayDecorator_get_AppendToCollection
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ExpectedType", 
      JSIL.MethodSignature.Return($asm14.TypeRef("System.Type")), 
      ArrayDecorator_get_ExpectedType
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_RequiresOldValue", 
      JSIL.MethodSignature.Return($.Boolean), 
      ArrayDecorator_get_RequiresOldValue
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ReturnsValue", 
      JSIL.MethodSignature.Return($.Boolean), 
      ArrayDecorator_get_ReturnsValue
    );

    $.Method({Static:false, Public:false}, "get_SupportNull", 
      JSIL.MethodSignature.Return($.Boolean), 
      ArrayDecorator_get_SupportNull
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Object, [$.Object, $asm0E.TypeRef("ProtoBuf.ProtoReader")]), 
      ArrayDecorator_Read
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [$.Object, $asm0E.TypeRef("ProtoBuf.ProtoWriter")]), 
      ArrayDecorator_Write
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "fieldNumber", $.Int32);

    $.Constant({Static:true , Public:false}, "OPTIONS_WritePacked", $.Byte, 1);

    $.Constant({Static:true , Public:false}, "OPTIONS_OverwriteList", $.Byte, 2);

    $.Constant({Static:true , Public:false}, "OPTIONS_SupportNull", $.Byte, 4);

    $.Field({Static:false, Public:false, ReadOnly:true }, "options", $.Byte);

    $.Field({Static:false, Public:false, ReadOnly:true }, "packedWireType", $asm0E.TypeRef("ProtoBuf.WireType"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "arrayType", $asm14.TypeRef("System.Type"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "itemType", $asm14.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "ExpectedType", $asm14.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "RequiresOldValue", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "ReturnsValue", $.Boolean);

    $.Property({Static:false, Public:false}, "AppendToCollection", $.Boolean);

    $.Property({Static:false, Public:false}, "SupportNull", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ProtoBuf.Serializers.BlobSerializer */ 

(function BlobSerializer$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize(System.Array.Of($asm14.System.Byte))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0E.ProtoBuf.Meta.TypeModel)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm14.System.Boolean)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm14.System.Object)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm0E.ProtoBuf.ProtoReader)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm0E.ProtoBuf.ProtoWriter)) ();
  };


  function BlobSerializer__ctor (model, overwriteList) {
    this.overwriteList = overwriteList;
  }; 

  function BlobSerializer_get_ExpectedType () {
    return $thisType.expectedType;
  }; 

  function BlobSerializer_ProtoBuf_Serializers_IProtoSerializer_get_RequiresOldValue () {
    return !this.overwriteList;
  }; 

  function BlobSerializer_ProtoBuf_Serializers_IProtoSerializer_get_ReturnsValue () {
    return true;
  }; 

  function BlobSerializer_Read (value, source) {
    return $T04().AppendBytes((
        this.overwriteList
           ? null
           : $T00().$Cast(value))
      , source);
  }; 

  function BlobSerializer_Write (value, dest) {
    $T05().WriteBytes($T00().$Cast(value), dest);
  }; 

  JSIL.MakeType({
      BaseType: $asm14.TypeRef("System.Object"), 
      Name: "ProtoBuf.Serializers.BlobSerializer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0E.TypeRef("ProtoBuf.Meta.TypeModel"), $.Boolean]), 
      BlobSerializer__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ExpectedType", 
      JSIL.MethodSignature.Return($asm14.TypeRef("System.Type")), 
      BlobSerializer_get_ExpectedType
    );

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.get_RequiresOldValue", 
      JSIL.MethodSignature.Return($.Boolean), 
      BlobSerializer_ProtoBuf_Serializers_IProtoSerializer_get_RequiresOldValue
    )
      .Overrides($asm0E.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "get_RequiresOldValue");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.get_ReturnsValue", 
      JSIL.MethodSignature.Return($.Boolean), 
      BlobSerializer_ProtoBuf_Serializers_IProtoSerializer_get_ReturnsValue
    )
      .Overrides($asm0E.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "get_ReturnsValue");

    $.Method({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Object, [$.Object, $asm0E.TypeRef("ProtoBuf.ProtoReader")]), 
      BlobSerializer_Read
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [$.Object, $asm0E.TypeRef("ProtoBuf.ProtoWriter")]), 
      BlobSerializer_Write
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "expectedType", $asm14.TypeRef("System.Type"), function ($pi) {
        return System.Array.Of($asm14.System.Byte).__Type__;
      });

    $.Field({Static:false, Public:false, ReadOnly:true }, "overwriteList", $.Boolean);


    function BlobSerializer__cctor () {
      $thisType.expectedType = $T00().__Type__;
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      BlobSerializer__cctor
    );

    $.Property({Static:false, Public:true , Virtual:true }, "ExpectedType", $asm14.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.RequiresOldValue", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.ReturnsValue", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm0E.TypeRef("ProtoBuf.Serializers.IProtoSerializer")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ProtoBuf.Serializers.BooleanSerializer */ 

(function BooleanSerializer$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm14.System.Boolean)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0E.ProtoBuf.Meta.TypeModel)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm14.System.Object)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0E.ProtoBuf.ProtoReader)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm0E.ProtoBuf.ProtoWriter)) ();
  };


  function BooleanSerializer__ctor (model) {
  }; 

  function BooleanSerializer_get_ExpectedType () {
    return $thisType.expectedType;
  }; 

  function BooleanSerializer_ProtoBuf_Serializers_IProtoSerializer_get_RequiresOldValue () {
    return false;
  }; 

  function BooleanSerializer_ProtoBuf_Serializers_IProtoSerializer_get_ReturnsValue () {
    return true;
  }; 

  function BooleanSerializer_Read (value, source) {
    return $T00().$Box(source.ReadBoolean());
  }; 

  function BooleanSerializer_Write (value, dest) {
    $T04().WriteBoolean($T00().$Cast(value), dest);
  }; 

  JSIL.MakeType({
      BaseType: $asm14.TypeRef("System.Object"), 
      Name: "ProtoBuf.Serializers.BooleanSerializer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm0E.TypeRef("ProtoBuf.Meta.TypeModel")), 
      BooleanSerializer__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ExpectedType", 
      JSIL.MethodSignature.Return($asm14.TypeRef("System.Type")), 
      BooleanSerializer_get_ExpectedType
    );

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.get_RequiresOldValue", 
      JSIL.MethodSignature.Return($.Boolean), 
      BooleanSerializer_ProtoBuf_Serializers_IProtoSerializer_get_RequiresOldValue
    )
      .Overrides($asm0E.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "get_RequiresOldValue");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.get_ReturnsValue", 
      JSIL.MethodSignature.Return($.Boolean), 
      BooleanSerializer_ProtoBuf_Serializers_IProtoSerializer_get_ReturnsValue
    )
      .Overrides($asm0E.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "get_ReturnsValue");

    $.Method({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Object, [$.Object, $asm0E.TypeRef("ProtoBuf.ProtoReader")]), 
      BooleanSerializer_Read
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [$.Object, $asm0E.TypeRef("ProtoBuf.ProtoWriter")]), 
      BooleanSerializer_Write
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "expectedType", $asm14.TypeRef("System.Type"), function ($pi) {
        return $asm14.System.Boolean.__Type__;
      });


    function BooleanSerializer__cctor () {
      $thisType.expectedType = $T00().__Type__;
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      BooleanSerializer__cctor
    );

    $.Property({Static:false, Public:true , Virtual:true }, "ExpectedType", $asm14.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.RequiresOldValue", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.ReturnsValue", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm0E.TypeRef("ProtoBuf.Serializers.IProtoSerializer")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ProtoBuf.Serializers.ByteSerializer */ 

(function ByteSerializer$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm14.System.Byte)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0E.ProtoBuf.Meta.TypeModel)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm14.System.Object)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0E.ProtoBuf.ProtoReader)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm0E.ProtoBuf.ProtoWriter)) ();
  };


  function ByteSerializer__ctor (model) {
  }; 

  function ByteSerializer_get_ExpectedType () {
    return $thisType.expectedType;
  }; 

  function ByteSerializer_ProtoBuf_Serializers_IProtoSerializer_get_RequiresOldValue () {
    return false;
  }; 

  function ByteSerializer_ProtoBuf_Serializers_IProtoSerializer_get_ReturnsValue () {
    return true;
  }; 

  function ByteSerializer_Read (value, source) {
    return $T00().$Box(source.ReadByte());
  }; 

  function ByteSerializer_Write (value, dest) {
    $T04().WriteByte($T00().$Cast(value), dest);
  }; 

  JSIL.MakeType({
      BaseType: $asm14.TypeRef("System.Object"), 
      Name: "ProtoBuf.Serializers.ByteSerializer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm0E.TypeRef("ProtoBuf.Meta.TypeModel")), 
      ByteSerializer__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ExpectedType", 
      JSIL.MethodSignature.Return($asm14.TypeRef("System.Type")), 
      ByteSerializer_get_ExpectedType
    );

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.get_RequiresOldValue", 
      JSIL.MethodSignature.Return($.Boolean), 
      ByteSerializer_ProtoBuf_Serializers_IProtoSerializer_get_RequiresOldValue
    )
      .Overrides($asm0E.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "get_RequiresOldValue");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.get_ReturnsValue", 
      JSIL.MethodSignature.Return($.Boolean), 
      ByteSerializer_ProtoBuf_Serializers_IProtoSerializer_get_ReturnsValue
    )
      .Overrides($asm0E.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "get_ReturnsValue");

    $.Method({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Object, [$.Object, $asm0E.TypeRef("ProtoBuf.ProtoReader")]), 
      ByteSerializer_Read
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [$.Object, $asm0E.TypeRef("ProtoBuf.ProtoWriter")]), 
      ByteSerializer_Write
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "expectedType", $asm14.TypeRef("System.Type"), function ($pi) {
        return $asm14.System.Byte.__Type__;
      });


    function ByteSerializer__cctor () {
      $thisType.expectedType = $T00().__Type__;
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      ByteSerializer__cctor
    );

    $.Property({Static:false, Public:true , Virtual:true }, "ExpectedType", $asm14.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.RequiresOldValue", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.ReturnsValue", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm0E.TypeRef("ProtoBuf.Serializers.IProtoSerializer")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ProtoBuf.Serializers.UInt16Serializer */ 

(function UInt16Serializer$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm14.System.UInt16)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0E.ProtoBuf.Meta.TypeModel)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm14.System.Object)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0E.ProtoBuf.ProtoReader)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm0E.ProtoBuf.ProtoWriter)) ();
  };


  function UInt16Serializer__ctor (model) {
  }; 

  function UInt16Serializer_get_ExpectedType () {
    return $thisType.expectedType;
  }; 

  function UInt16Serializer_ProtoBuf_Serializers_IProtoSerializer_get_RequiresOldValue () {
    return false;
  }; 

  function UInt16Serializer_ProtoBuf_Serializers_IProtoSerializer_get_ReturnsValue () {
    return true;
  }; 

  function UInt16Serializer_Read (value, source) {
    return $T00().$Box(source.ReadUInt16());
  }; 

  function UInt16Serializer_Write (value, dest) {
    $T04().WriteUInt16($T00().$Cast(value), dest);
  }; 

  JSIL.MakeType({
      BaseType: $asm14.TypeRef("System.Object"), 
      Name: "ProtoBuf.Serializers.UInt16Serializer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm0E.TypeRef("ProtoBuf.Meta.TypeModel")), 
      UInt16Serializer__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ExpectedType", 
      JSIL.MethodSignature.Return($asm14.TypeRef("System.Type")), 
      UInt16Serializer_get_ExpectedType
    );

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.get_RequiresOldValue", 
      JSIL.MethodSignature.Return($.Boolean), 
      UInt16Serializer_ProtoBuf_Serializers_IProtoSerializer_get_RequiresOldValue
    )
      .Overrides($asm0E.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "get_RequiresOldValue");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.get_ReturnsValue", 
      JSIL.MethodSignature.Return($.Boolean), 
      UInt16Serializer_ProtoBuf_Serializers_IProtoSerializer_get_ReturnsValue
    )
      .Overrides($asm0E.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "get_ReturnsValue");

    $.Method({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Object, [$.Object, $asm0E.TypeRef("ProtoBuf.ProtoReader")]), 
      UInt16Serializer_Read
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [$.Object, $asm0E.TypeRef("ProtoBuf.ProtoWriter")]), 
      UInt16Serializer_Write
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "expectedType", $asm14.TypeRef("System.Type"), function ($pi) {
        return $asm14.System.UInt16.__Type__;
      });


    function UInt16Serializer__cctor () {
      $thisType.expectedType = $T00().__Type__;
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      UInt16Serializer__cctor
    );

    $.Property({Static:false, Public:true , Virtual:true }, "ExpectedType", $asm14.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.RequiresOldValue", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.ReturnsValue", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm0E.TypeRef("ProtoBuf.Serializers.IProtoSerializer")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ProtoBuf.Serializers.CharSerializer */ 

(function CharSerializer$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm14.System.Char)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0E.ProtoBuf.Meta.TypeModel)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0E.ProtoBuf.Serializers.UInt16Serializer)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm14.System.Object)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm0E.ProtoBuf.ProtoReader)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm0E.ProtoBuf.ProtoWriter)) ();
  };


  function CharSerializer__ctor (model) {
    $T02().prototype._ctor.call(this, model);
  }; 

  function CharSerializer_get_ExpectedType () {
    return $thisType.expectedType;
  }; 

  function CharSerializer_Read (value, source) {
    return String.fromCharCode(source.ReadUInt16());
  }; 

  function CharSerializer_Write (value, dest) {
    $T05().WriteUInt16(($T00().$Cast(value)).charCodeAt(0), dest);
  }; 

  JSIL.MakeType({
      BaseType: $asm0E.TypeRef("ProtoBuf.Serializers.UInt16Serializer"), 
      Name: "ProtoBuf.Serializers.CharSerializer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm0E.TypeRef("ProtoBuf.Meta.TypeModel")), 
      CharSerializer__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ExpectedType", 
      JSIL.MethodSignature.Return($asm14.TypeRef("System.Type")), 
      CharSerializer_get_ExpectedType
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Object, [$.Object, $asm0E.TypeRef("ProtoBuf.ProtoReader")]), 
      CharSerializer_Read
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [$.Object, $asm0E.TypeRef("ProtoBuf.ProtoWriter")]), 
      CharSerializer_Write
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "expectedType", $asm14.TypeRef("System.Type"), function ($pi) {
        return $asm14.System.Char.__Type__;
      });


    function CharSerializer__cctor () {
      $thisType.expectedType = $T00().__Type__;
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      CharSerializer__cctor
    );

    $.Property({Static:false, Public:true , Virtual:true }, "ExpectedType", $asm14.TypeRef("System.Type"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ProtoBuf.Serializers.DateTimeSerializer */ 

(function DateTimeSerializer$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm14.System.DateTime)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0E.ProtoBuf.Meta.TypeModel)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm14.System.Object)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0E.ProtoBuf.ProtoReader)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm0E.ProtoBuf.BclHelpers)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm0E.ProtoBuf.ProtoWriter)) ();
  };


  function DateTimeSerializer__ctor (model) {
  }; 

  function DateTimeSerializer_get_ExpectedType () {
    return $thisType.expectedType;
  }; 

  function DateTimeSerializer_ProtoBuf_Serializers_IProtoSerializer_get_RequiresOldValue () {
    return false;
  }; 

  function DateTimeSerializer_ProtoBuf_Serializers_IProtoSerializer_get_ReturnsValue () {
    return true;
  }; 

  function DateTimeSerializer_Read (value, source) {
    return $T04().ReadDateTime(source);
  }; 

  function DateTimeSerializer_Write (value, dest) {
    $T04().WriteDateTime($T00().$Cast(value).MemberwiseClone(), dest);
  }; 

  JSIL.MakeType({
      BaseType: $asm14.TypeRef("System.Object"), 
      Name: "ProtoBuf.Serializers.DateTimeSerializer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm0E.TypeRef("ProtoBuf.Meta.TypeModel")), 
      DateTimeSerializer__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ExpectedType", 
      JSIL.MethodSignature.Return($asm14.TypeRef("System.Type")), 
      DateTimeSerializer_get_ExpectedType
    );

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.get_RequiresOldValue", 
      JSIL.MethodSignature.Return($.Boolean), 
      DateTimeSerializer_ProtoBuf_Serializers_IProtoSerializer_get_RequiresOldValue
    )
      .Overrides($asm0E.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "get_RequiresOldValue");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.get_ReturnsValue", 
      JSIL.MethodSignature.Return($.Boolean), 
      DateTimeSerializer_ProtoBuf_Serializers_IProtoSerializer_get_ReturnsValue
    )
      .Overrides($asm0E.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "get_ReturnsValue");

    $.Method({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Object, [$.Object, $asm0E.TypeRef("ProtoBuf.ProtoReader")]), 
      DateTimeSerializer_Read
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [$.Object, $asm0E.TypeRef("ProtoBuf.ProtoWriter")]), 
      DateTimeSerializer_Write
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "expectedType", $asm14.TypeRef("System.Type"), function ($pi) {
        return $asm14.System.DateTime.__Type__;
      });


    function DateTimeSerializer__cctor () {
      $thisType.expectedType = $T00().__Type__;
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      DateTimeSerializer__cctor
    );

    $.Property({Static:false, Public:true , Virtual:true }, "ExpectedType", $asm14.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.RequiresOldValue", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.ReturnsValue", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm0E.TypeRef("ProtoBuf.Serializers.IProtoSerializer")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ProtoBuf.Serializers.DecimalSerializer */ 

(function DecimalSerializer$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm14.System.Decimal)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0E.ProtoBuf.Meta.TypeModel)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm14.System.Object)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0E.ProtoBuf.ProtoReader)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm0E.ProtoBuf.BclHelpers)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm0E.ProtoBuf.ProtoWriter)) ();
  };


  function DecimalSerializer__ctor (model) {
  }; 

  function DecimalSerializer_get_ExpectedType () {
    return $thisType.expectedType;
  }; 

  function DecimalSerializer_ProtoBuf_Serializers_IProtoSerializer_get_RequiresOldValue () {
    return false;
  }; 

  function DecimalSerializer_ProtoBuf_Serializers_IProtoSerializer_get_ReturnsValue () {
    return true;
  }; 

  function DecimalSerializer_Read (value, source) {
    return $T04().ReadDecimal(source);
  }; 

  function DecimalSerializer_Write (value, dest) {
    $T04().WriteDecimal($T00().$Cast(value), dest);
  }; 

  JSIL.MakeType({
      BaseType: $asm14.TypeRef("System.Object"), 
      Name: "ProtoBuf.Serializers.DecimalSerializer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm0E.TypeRef("ProtoBuf.Meta.TypeModel")), 
      DecimalSerializer__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ExpectedType", 
      JSIL.MethodSignature.Return($asm14.TypeRef("System.Type")), 
      DecimalSerializer_get_ExpectedType
    );

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.get_RequiresOldValue", 
      JSIL.MethodSignature.Return($.Boolean), 
      DecimalSerializer_ProtoBuf_Serializers_IProtoSerializer_get_RequiresOldValue
    )
      .Overrides($asm0E.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "get_RequiresOldValue");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.get_ReturnsValue", 
      JSIL.MethodSignature.Return($.Boolean), 
      DecimalSerializer_ProtoBuf_Serializers_IProtoSerializer_get_ReturnsValue
    )
      .Overrides($asm0E.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "get_ReturnsValue");

    $.Method({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Object, [$.Object, $asm0E.TypeRef("ProtoBuf.ProtoReader")]), 
      DecimalSerializer_Read
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [$.Object, $asm0E.TypeRef("ProtoBuf.ProtoWriter")]), 
      DecimalSerializer_Write
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "expectedType", $asm14.TypeRef("System.Type"), function ($pi) {
        return $asm14.System.Decimal.__Type__;
      });


    function DecimalSerializer__cctor () {
      $thisType.expectedType = $T00().__Type__;
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      DecimalSerializer__cctor
    );

    $.Property({Static:false, Public:true , Virtual:true }, "ExpectedType", $asm14.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.RequiresOldValue", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.ReturnsValue", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm0E.TypeRef("ProtoBuf.Serializers.IProtoSerializer")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ProtoBuf.Serializers.DefaultValueDecorator */ 

(function DefaultValueDecorator$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0E.ProtoBuf.Meta.TypeModel)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm14.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0E.ProtoBuf.Serializers.IProtoSerializer)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0E.ProtoBuf.Serializers.ProtoDecoratorBase)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm14.System.ArgumentNullException)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm14.System.Boolean)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm14.System.ArgumentException)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm0E.ProtoBuf.ProtoReader)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm0E.ProtoBuf.ProtoWriter)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm14.TypeRef("System.ArgumentNullException"), [$asm14.TypeRef("System.String")]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm14.TypeRef("System.ArgumentException"), [$asm14.TypeRef("System.String"), $asm14.TypeRef("System.String")]))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm0E.ProtoBuf.Serializers.IProtoSerializer.get_ExpectedType)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm0E.ProtoBuf.Serializers.IProtoSerializer.get_RequiresOldValue)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm0E.ProtoBuf.Serializers.IProtoSerializer.get_ReturnsValue)) ();
  };
  var $IM03 = function () {
    return ($IM03 = JSIL.Memoize($asm0E.ProtoBuf.Serializers.IProtoSerializer.Read)) ();
  };
  var $IM04 = function () {
    return ($IM04 = JSIL.Memoize($asm0E.ProtoBuf.Serializers.IProtoSerializer.Write)) ();
  };


  function DefaultValueDecorator__ctor (model, defaultValue, tail) {
    $T03().prototype._ctor.call(this, tail);
    if (defaultValue === null) {
      throw $S00().Construct("defaultValue");
    }
    var flag2 = model.MapType(JSIL.GetType(defaultValue)) !== $IM00().Call(tail, null);
    if (flag2) {
      throw $S01().Construct("Default value is of incorrect type", "defaultValue");
    }
    this.defaultValue = defaultValue;
  }; 

  function DefaultValueDecorator_get_ExpectedType () {
    return $IM00().Call(this.Tail, null);
  }; 

  function DefaultValueDecorator_get_RequiresOldValue () {
    return $IM01().Call(this.Tail, null);
  }; 

  function DefaultValueDecorator_get_ReturnsValue () {
    return $IM02().Call(this.Tail, null);
  }; 

  function DefaultValueDecorator_Read (value, source) {
    return $IM03().Call(this.Tail, null, value, source);
  }; 

  function DefaultValueDecorator_Write (value, dest) {
    var flag = !(JSIL.ObjectEquals(value, this.defaultValue));
    if (flag) {
      $IM04().Call(this.Tail, null, value, dest);
    }
  }; 

  JSIL.MakeType({
      BaseType: $asm0E.TypeRef("ProtoBuf.Serializers.ProtoDecoratorBase"), 
      Name: "ProtoBuf.Serializers.DefaultValueDecorator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0E.TypeRef("ProtoBuf.Meta.TypeModel"), $.Object, 
          $asm0E.TypeRef("ProtoBuf.Serializers.IProtoSerializer")
        ]), 
      DefaultValueDecorator__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ExpectedType", 
      JSIL.MethodSignature.Return($asm14.TypeRef("System.Type")), 
      DefaultValueDecorator_get_ExpectedType
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_RequiresOldValue", 
      JSIL.MethodSignature.Return($.Boolean), 
      DefaultValueDecorator_get_RequiresOldValue
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ReturnsValue", 
      JSIL.MethodSignature.Return($.Boolean), 
      DefaultValueDecorator_get_ReturnsValue
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Object, [$.Object, $asm0E.TypeRef("ProtoBuf.ProtoReader")]), 
      DefaultValueDecorator_Read
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [$.Object, $asm0E.TypeRef("ProtoBuf.ProtoWriter")]), 
      DefaultValueDecorator_Write
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "defaultValue", $.Object);

    $.Property({Static:false, Public:true , Virtual:true }, "ExpectedType", $asm14.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "RequiresOldValue", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "ReturnsValue", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ProtoBuf.Serializers.DoubleSerializer */ 

(function DoubleSerializer$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm14.System.Double)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0E.ProtoBuf.Meta.TypeModel)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm14.System.Object)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0E.ProtoBuf.ProtoReader)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm0E.ProtoBuf.ProtoWriter)) ();
  };


  function DoubleSerializer__ctor (model) {
  }; 

  function DoubleSerializer_get_ExpectedType () {
    return $thisType.expectedType;
  }; 

  function DoubleSerializer_ProtoBuf_Serializers_IProtoSerializer_get_RequiresOldValue () {
    return false;
  }; 

  function DoubleSerializer_ProtoBuf_Serializers_IProtoSerializer_get_ReturnsValue () {
    return true;
  }; 

  function DoubleSerializer_Read (value, source) {
    return $T00().$Box(source.ReadDouble());
  }; 

  function DoubleSerializer_Write (value, dest) {
    $T04().WriteDouble($T00().$Cast(value), dest);
  }; 

  JSIL.MakeType({
      BaseType: $asm14.TypeRef("System.Object"), 
      Name: "ProtoBuf.Serializers.DoubleSerializer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm0E.TypeRef("ProtoBuf.Meta.TypeModel")), 
      DoubleSerializer__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ExpectedType", 
      JSIL.MethodSignature.Return($asm14.TypeRef("System.Type")), 
      DoubleSerializer_get_ExpectedType
    );

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.get_RequiresOldValue", 
      JSIL.MethodSignature.Return($.Boolean), 
      DoubleSerializer_ProtoBuf_Serializers_IProtoSerializer_get_RequiresOldValue
    )
      .Overrides($asm0E.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "get_RequiresOldValue");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.get_ReturnsValue", 
      JSIL.MethodSignature.Return($.Boolean), 
      DoubleSerializer_ProtoBuf_Serializers_IProtoSerializer_get_ReturnsValue
    )
      .Overrides($asm0E.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "get_ReturnsValue");

    $.Method({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Object, [$.Object, $asm0E.TypeRef("ProtoBuf.ProtoReader")]), 
      DoubleSerializer_Read
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [$.Object, $asm0E.TypeRef("ProtoBuf.ProtoWriter")]), 
      DoubleSerializer_Write
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "expectedType", $asm14.TypeRef("System.Type"), function ($pi) {
        return $asm14.System.Double.__Type__;
      });


    function DoubleSerializer__cctor () {
      $thisType.expectedType = $T00().__Type__;
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      DoubleSerializer__cctor
    );

    $.Property({Static:false, Public:true , Virtual:true }, "ExpectedType", $asm14.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.RequiresOldValue", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.ReturnsValue", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm0E.TypeRef("ProtoBuf.Serializers.IProtoSerializer")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ProtoBuf.Serializers.EnumSerializer */ 

(function EnumSerializer$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm14.System.Type)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize(System.Array.Of($asm0E.ProtoBuf.Serializers.EnumSerializer_EnumPair))) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm14.System.ArgumentNullException)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm14.System.Boolean)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm14.System.Int32)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm14.System.Object)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm0E.ProtoBuf.ProtoException)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm14.System.String)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm14.System.SByte)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm14.System.Byte)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm14.System.Int16)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm14.System.UInt16)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm14.System.UInt32)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm14.System.Int64)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm14.System.UInt64)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm14.System.InvalidOperationException)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm0E.ProtoBuf.Helpers)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm0E.ProtoBuf.ProtoReader)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm14.System.Enum)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm0E.ProtoBuf.ProtoWriter)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm14.TypeRef("System.ArgumentNullException"), [$asm14.TypeRef("System.String")]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0E.TypeRef("ProtoBuf.ProtoException"), [$asm14.TypeRef("System.String")]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm14.TypeRef("System.InvalidOperationException"), null))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.MethodSignature($asm14.TypeRef("System.Object"), [$asm14.TypeRef("System.Type"), $asm14.TypeRef("System.Object")]))) ();
  };


  function EnumSerializer__ctor (enumType, map) {
    if (enumType === null) {
      throw $S00().Construct("enumType");
    }
    this.enumType = enumType;
    this.map = map;
    var flag2 = map !== null;
    if (flag2) {

      for (var i = 1; i < (map.length | 0); ) {

        for (var j = 0; j < i; ) {
          var flag3 = ((map[i].WireValue | 0) === (map[j].WireValue | 0)) && 
          !(JSIL.ObjectEquals(map[i].RawValue, map[j].RawValue));
          if (flag3) {
            throw $S01().Construct(JSIL.ConcatString("Multiple enums with wire-value ", (map[i].WireValue).toString()));
          }
          var flag4 = (JSIL.ObjectEquals(map[i].RawValue, map[j].RawValue)) && 
          ((map[i].WireValue | 0) !== (map[j].WireValue | 0));
          if (flag4) {
            throw $S01().Construct(JSIL.ConcatString("Multiple enums with deserialized-value ", map[i].RawValue));
          }
          var num = j;
          j = ((num + 1) | 0);
        }
        num = i;
        i = ((num + 1) | 0);
      }
    }
  }; 

  function EnumSerializer_EnumToWire (value) {
    switch ((this.GetTypeCode()).valueOf()) {
      case 5: 
        var result = $T08().$Cast(value);
        break;

      case 6: 
        result = $T09().$Cast(value);
        break;

      case 7: 
        result = $T0A().$Cast(value);
        break;

      case 8: 
        result = $T0B().$Cast(value);
        break;

      case 9: 
        result = $T04().$Cast(value);
        break;

      case 10: 
        result = ($T0C().$Cast(value) | 0);
        break;

      case 11: 
        result = (($T0D().$Cast(value)).ToNumber(4294967295, true) | 0);
        break;

      case 12: 
        result = (($T0E().$Cast(value)).ToNumber(4294967295, true) | 0);
        break;

      default: 
        throw $S02().Construct();

    }
    return result;
  }; 

  function EnumSerializer_get_ExpectedType () {
    return this.enumType;
  }; 

  function EnumSerializer_GetTypeCode () {
    var type = $T10().GetUnderlyingType(this.enumType);
    var flag = type === null;
    if (flag) {
      type = this.enumType;
    }
    return $T10().GetTypeCode(type);
  }; 

  function EnumSerializer_ProtoBuf_Serializers_IProtoSerializer_get_RequiresOldValue () {
    return false;
  }; 

  function EnumSerializer_ProtoBuf_Serializers_IProtoSerializer_get_ReturnsValue () {
    return true;
  }; 

  function EnumSerializer_Read (value, source) {
    var wireValue = (source.ReadInt32() | 0);
    if (this.map === null) {
      var result = this.WireToEnum(wireValue);
    } else {

      for (var i = 0; i < (this.map.length | 0); ) {
        var flag2 = (this.map[i].WireValue | 0) === wireValue;
        if (flag2) {
          result = this.map[i].TypedValue;
          return result;
        }
        var num = i;
        i = ((num + 1) | 0);
      }
      source.ThrowEnumException(this.get_ExpectedType(), wireValue);
      result = null;
    }
    return result;
  }; 

  function EnumSerializer_WireToEnum (value) {
    switch ((this.GetTypeCode()).valueOf()) {
      case 5: 
        var result = $S03().CallStatic($T12(), "ToObject", null, this.enumType, ((value + 0x80 & 0xFF) - 0x80));
        break;

      case 6: 
        result = $S03().CallStatic($T12(), "ToObject", null, this.enumType, (value & 0xFF));
        break;

      case 7: 
        result = $S03().CallStatic($T12(), "ToObject", null, this.enumType, ((value + 0x8000 & 0xFFFF) - 0x8000));
        break;

      case 8: 
        result = $S03().CallStatic($T12(), "ToObject", null, this.enumType, (value & 0xFFFF));
        break;

      case 9: 
        result = $S03().CallStatic($T12(), "ToObject", null, this.enumType, $T04().$Box(value));
        break;

      case 10: 
        result = $S03().CallStatic($T12(), "ToObject", null, this.enumType, (value >>> 0));
        break;

      case 11: 
        result = $S03().CallStatic($T12(), "ToObject", null, this.enumType, $T0D().FromNumber(value));
        break;

      case 12: 
        result = $S03().CallStatic($T12(), "ToObject", null, this.enumType, ($T0D().FromNumber(value)).ToUInt64());
        break;

      default: 
        throw $S02().Construct();

    }
    return result;
  }; 

  function EnumSerializer_Write (value, dest) {
    if (this.map === null) {
      $T13().WriteInt32(this.EnumToWire(value), dest);
    } else {

      for (var i = 0; i < (this.map.length | 0); ) {
        var flag2 = (JSIL.ObjectEquals(this.map[i].TypedValue, value));
        if (flag2) {
          $T13().WriteInt32(this.map[i].WireValue, dest);
          return;
        }
        var num = i;
        i = ((num + 1) | 0);
      }
      $T13().ThrowEnumException(dest, value);
    }
  }; 

  JSIL.MakeType({
      BaseType: $asm14.TypeRef("System.Object"), 
      Name: "ProtoBuf.Serializers.EnumSerializer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm14.TypeRef("System.Type"), $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("ProtoBuf.Serializers.EnumSerializer+EnumPair")])]), 
      EnumSerializer__ctor
    );

    $.Method({Static:false, Public:false}, "EnumToWire", 
      new JSIL.MethodSignature($.Int32, [$.Object]), 
      EnumSerializer_EnumToWire
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ExpectedType", 
      JSIL.MethodSignature.Return($asm14.TypeRef("System.Type")), 
      EnumSerializer_get_ExpectedType
    );

    $.Method({Static:false, Public:false}, "GetTypeCode", 
      JSIL.MethodSignature.Return($asm0E.TypeRef("ProtoBuf.ProtoTypeCode")), 
      EnumSerializer_GetTypeCode
    );

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.get_RequiresOldValue", 
      JSIL.MethodSignature.Return($.Boolean), 
      EnumSerializer_ProtoBuf_Serializers_IProtoSerializer_get_RequiresOldValue
    )
      .Overrides($asm0E.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "get_RequiresOldValue");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.get_ReturnsValue", 
      JSIL.MethodSignature.Return($.Boolean), 
      EnumSerializer_ProtoBuf_Serializers_IProtoSerializer_get_ReturnsValue
    )
      .Overrides($asm0E.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "get_ReturnsValue");

    $.Method({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Object, [$.Object, $asm0E.TypeRef("ProtoBuf.ProtoReader")]), 
      EnumSerializer_Read
    );

    $.Method({Static:false, Public:false}, "WireToEnum", 
      new JSIL.MethodSignature($.Object, [$.Int32]), 
      EnumSerializer_WireToEnum
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [$.Object, $asm0E.TypeRef("ProtoBuf.ProtoWriter")]), 
      EnumSerializer_Write
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "enumType", $asm14.TypeRef("System.Type"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "map", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("ProtoBuf.Serializers.EnumSerializer+EnumPair")]));

    $.Property({Static:false, Public:true , Virtual:true }, "ExpectedType", $asm14.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.RequiresOldValue", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.ReturnsValue", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm0E.TypeRef("ProtoBuf.Serializers.IProtoSerializer")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct ProtoBuf.Serializers.EnumSerializer+EnumPair */ 

(function EnumPair$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm14.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm14.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm14.System.Type)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm14.System.Enum)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature($asm14.TypeRef("System.Object"), [$asm14.TypeRef("System.Type"), $asm14.TypeRef("System.Object")]))) ();
  };


  function EnumPair__ctor (wireValue, raw, type) {
    this.WireValue = (wireValue | 0);
    this.RawValue = raw;
    this.TypedValue = $T03().$Cast($S00().CallStatic($T03(), "ToObject", null, type, raw));
  }; 

  JSIL.MakeType({
      BaseType: $asm14.TypeRef("System.ValueType"), 
      Name: "ProtoBuf.Serializers.EnumSerializer+EnumPair", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 3, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Object, 
          $asm14.TypeRef("System.Type")
        ]), 
      EnumPair__ctor
    );

    $.Field({Static:false, Public:true , ReadOnly:true }, "RawValue", $.Object);

    $.Field({Static:false, Public:true , ReadOnly:true }, "TypedValue", $asm14.TypeRef("System.Enum"));

    $.Field({Static:false, Public:true , ReadOnly:true }, "WireValue", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ProtoBuf.Serializers.FieldDecorator */ 

(function FieldDecorator$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm14.System.Type)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm14.System.Reflection.FieldInfo)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0E.ProtoBuf.Serializers.IProtoSerializer)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0E.ProtoBuf.Serializers.ProtoDecoratorBase)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm14.System.Object)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm0E.ProtoBuf.ProtoReader)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm0E.ProtoBuf.ProtoWriter)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm14.System.Boolean)) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm0E.ProtoBuf.Serializers.IProtoSerializer.Read)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm0E.ProtoBuf.Serializers.IProtoSerializer.get_RequiresOldValue)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm0E.ProtoBuf.Serializers.IProtoSerializer.Write)) ();
  };


  function FieldDecorator__ctor (forType, field, tail) {
    $T03().prototype._ctor.call(this, tail);
    this.forType = forType;
    this.field = field;
  }; 

  function FieldDecorator_get_ExpectedType () {
    return this.forType;
  }; 

  function FieldDecorator_get_RequiresOldValue () {
    return true;
  }; 

  function FieldDecorator_get_ReturnsValue () {
    return false;
  }; 

  function FieldDecorator_Read (value, source) {
    var newValue = $IM00().Call(this.Tail, null, (
        $IM01().Call(this.Tail, null)
           ? (this.field).GetValue(value)
           : null)
      , source);
    if (newValue !== null) {
      (this.field).SetValue(value, newValue);
    }
    return null;
  }; 

  function FieldDecorator_Write (value, dest) {
    value = (this.field).GetValue(value);
    var flag = value !== null;
    if (flag) {
      $IM02().Call(this.Tail, null, value, dest);
    }
  }; 

  JSIL.MakeType({
      BaseType: $asm0E.TypeRef("ProtoBuf.Serializers.ProtoDecoratorBase"), 
      Name: "ProtoBuf.Serializers.FieldDecorator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm14.TypeRef("System.Type"), $asm14.TypeRef("System.Reflection.FieldInfo"), 
          $asm0E.TypeRef("ProtoBuf.Serializers.IProtoSerializer")
        ]), 
      FieldDecorator__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ExpectedType", 
      JSIL.MethodSignature.Return($asm14.TypeRef("System.Type")), 
      FieldDecorator_get_ExpectedType
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_RequiresOldValue", 
      JSIL.MethodSignature.Return($.Boolean), 
      FieldDecorator_get_RequiresOldValue
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ReturnsValue", 
      JSIL.MethodSignature.Return($.Boolean), 
      FieldDecorator_get_ReturnsValue
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Object, [$.Object, $asm0E.TypeRef("ProtoBuf.ProtoReader")]), 
      FieldDecorator_Read
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [$.Object, $asm0E.TypeRef("ProtoBuf.ProtoWriter")]), 
      FieldDecorator_Write
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "field", $asm14.TypeRef("System.Reflection.FieldInfo"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "forType", $asm14.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "ExpectedType", $asm14.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "RequiresOldValue", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "ReturnsValue", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ProtoBuf.Serializers.GuidSerializer */ 

(function GuidSerializer$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm14.System.Guid)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0E.ProtoBuf.Meta.TypeModel)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm14.System.Object)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0E.ProtoBuf.ProtoReader)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm0E.ProtoBuf.BclHelpers)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm0E.ProtoBuf.ProtoWriter)) ();
  };


  function GuidSerializer__ctor (model) {
  }; 

  function GuidSerializer_get_ExpectedType () {
    return $thisType.expectedType;
  }; 

  function GuidSerializer_ProtoBuf_Serializers_IProtoSerializer_get_RequiresOldValue () {
    return false;
  }; 

  function GuidSerializer_ProtoBuf_Serializers_IProtoSerializer_get_ReturnsValue () {
    return true;
  }; 

  function GuidSerializer_Read (value, source) {
    return $T04().ReadGuid(source);
  }; 

  function GuidSerializer_Write (value, dest) {
    $T04().WriteGuid($T00().$Cast(value).MemberwiseClone(), dest);
  }; 

  JSIL.MakeType({
      BaseType: $asm14.TypeRef("System.Object"), 
      Name: "ProtoBuf.Serializers.GuidSerializer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm0E.TypeRef("ProtoBuf.Meta.TypeModel")), 
      GuidSerializer__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ExpectedType", 
      JSIL.MethodSignature.Return($asm14.TypeRef("System.Type")), 
      GuidSerializer_get_ExpectedType
    );

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.get_RequiresOldValue", 
      JSIL.MethodSignature.Return($.Boolean), 
      GuidSerializer_ProtoBuf_Serializers_IProtoSerializer_get_RequiresOldValue
    )
      .Overrides($asm0E.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "get_RequiresOldValue");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.get_ReturnsValue", 
      JSIL.MethodSignature.Return($.Boolean), 
      GuidSerializer_ProtoBuf_Serializers_IProtoSerializer_get_ReturnsValue
    )
      .Overrides($asm0E.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "get_ReturnsValue");

    $.Method({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Object, [$.Object, $asm0E.TypeRef("ProtoBuf.ProtoReader")]), 
      GuidSerializer_Read
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [$.Object, $asm0E.TypeRef("ProtoBuf.ProtoWriter")]), 
      GuidSerializer_Write
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "expectedType", $asm14.TypeRef("System.Type"), function ($pi) {
        return $asm14.System.Guid.__Type__;
      });


    function GuidSerializer__cctor () {
      $thisType.expectedType = $T00().__Type__;
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      GuidSerializer__cctor
    );

    $.Property({Static:false, Public:true , Virtual:true }, "ExpectedType", $asm14.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.RequiresOldValue", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.ReturnsValue", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm0E.TypeRef("ProtoBuf.Serializers.IProtoSerializer")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ProtoBuf.Serializers.ListDecorator */ 

(function ListDecorator$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm14.System.Collections.IEnumerator)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm14.System.Collections.IEnumerable)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0E.ProtoBuf.Meta.TypeModel)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm14.System.Type)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm0E.ProtoBuf.Serializers.IProtoSerializer)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm14.System.Int32)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm14.System.Boolean)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm0E.ProtoBuf.WireType)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm0E.ProtoBuf.Serializers.ProtoDecoratorBase)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm14.System.ArgumentOutOfRangeException)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm14.System.InvalidOperationException)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm14.System.ArgumentNullException)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm14.System.ArgumentException)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm14.System.String)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm14.System.Reflection.MethodInfo)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm0E.ProtoBuf.Serializers.ImmutableCollectionDecorator)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm0E.ProtoBuf.Helpers)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm14.System.Reflection.PropertyInfo)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm14.System.Collections.Generic.IEnumerable$b1)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm14.System.Object)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm0E.ProtoBuf.ProtoReader)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm14.System.Activator)) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm0E.ProtoBuf.SubItemToken)) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm14.System.Collections.IList)) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize(System.Array.Of($asm14.System.Object))) ();
  };
  var $T19 = function () {
    return ($T19 = JSIL.Memoize($asm14.System.Reflection.MethodBase)) ();
  };
  var $T1A = function () {
    return ($T1A = JSIL.Memoize($asm0E.ProtoBuf.ProtoWriter)) ();
  };
  var $T1B = function () {
    return ($T1B = JSIL.Memoize($asm14.System.NullReferenceException)) ();
  };
  var $T1C = function () {
    return ($T1C = JSIL.Memoize($asm14.System.IDisposable)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm14.TypeRef("System.ArgumentOutOfRangeException"), [$asm14.TypeRef("System.String")]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm14.TypeRef("System.InvalidOperationException"), [$asm14.TypeRef("System.String")]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm14.TypeRef("System.ArgumentNullException"), [$asm14.TypeRef("System.String")]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm14.TypeRef("System.ArgumentException"), [$asm14.TypeRef("System.String"), $asm14.TypeRef("System.String")]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.MethodSignature($asm14.TypeRef("System.Object"), [$asm14.TypeRef("System.Type")]))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.ConstructorSignature($asm14.TypeRef("System.NullReferenceException"), null))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm0E.ProtoBuf.Serializers.IProtoSerializer.get_ExpectedType)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm14.System.Collections.IList.Add)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm0E.ProtoBuf.Serializers.IProtoSerializer.Read)) ();
  };
  var $IM03 = function () {
    return ($IM03 = JSIL.Memoize($asm14.System.Collections.IEnumerable.GetEnumerator)) ();
  };
  var $IM04 = function () {
    return ($IM04 = JSIL.Memoize($asm14.System.Collections.IEnumerator.MoveNext)) ();
  };
  var $IM05 = function () {
    return ($IM05 = JSIL.Memoize($asm14.System.Collections.IEnumerator.get_Current)) ();
  };
  var $IM06 = function () {
    return ($IM06 = JSIL.Memoize($asm0E.ProtoBuf.Serializers.IProtoSerializer.Write)) ();
  };
  var $IM07 = function () {
    return ($IM07 = JSIL.Memoize($asm14.System.IDisposable.Dispose)) ();
  };


  function ListDecorator__ctor (model, declaredType, concreteType, tail, fieldNumber, writePacked, packedWireType, returnList, overwriteList, supportNull) {
    var isList = new JSIL.BoxedVariable(false);
    $T08().prototype._ctor.call(this, tail);
    if (returnList) {
      this.options = (this.options | 0) | 8;
    }
    if (overwriteList) {
      this.options = (this.options | 0) | 16;
    }
    if (supportNull) {
      this.options = (this.options | 0) | 32;
    }
    var flag = !(!writePacked && 
      (packedWireType === $T07().None)) && 
    ((fieldNumber | 0) <= 0);
    if (flag) {
      throw $S00().Construct("fieldNumber");
    }
    var flag2 = !$thisType.CanPack(packedWireType);
    if (flag2) {
      if (writePacked) {
        throw $S01().Construct("Only simple data-types can use packed encoding");
      }
      packedWireType = $T07().None;
    }
    this.fieldNumber = (fieldNumber | 0);
    if (writePacked) {
      this.options = (this.options | 0) | 4;
    }
    this.packedWireType = packedWireType;
    var flag3 = declaredType === null;
    if (flag3) {
      throw $S02().Construct("declaredType");
    }
    var isArray = declaredType.get_IsArray();
    if (isArray) {
      throw $S03().Construct("Cannot treat arrays as lists", "declaredType");
    }
    this.declaredType = declaredType;
    this.concreteType = concreteType;
    var requireAdd = this.get_RequireAdd();
    if (requireAdd) {
      this.add = $T02().ResolveListAdd(model, declaredType, $IM00().Call(tail, null), /* ref */ isList);
      var flag4 = isList.get();
      if (flag4) {
        this.options = (this.options | 0) | 1;
        var fullName = declaredType.get_FullName();
        var flag5 = (fullName !== null) && 
        (System.String.StartsWith(fullName, "System.Data.Linq.EntitySet`1[["));
        if (flag5) {
          this.options = (this.options | 0) | 2;
        }
      }
      if (this.add === null) {
        throw $S01().Construct(JSIL.ConcatString("Unable to resolve a suitable Add method for ", declaredType.get_FullName()));
      }
    }
  }; 

  function ListDecorator_CanPack (wireType) {

    var $label0 = 0;
  $labelgroup0: 
    while (true) {
      switch ($label0) {
        case 0: /* $entry0 */ 
          if (wireType <= $T07().Fixed64) {
            if (!(((wireType.valueOf() | 0) === 0) || (wireType === $T07().Fixed64))) {
              $label0 = 1 /* goto IL_22 */ ;
              continue $labelgroup0;
            }
          } else if (!((wireType === $T07().Fixed32) || (wireType === $T07().SignedVariant))) {
            $label0 = 1 /* goto IL_22 */ ;
            continue $labelgroup0;
          }
          var result = true;
          return result;

          $label0 = 1 /* goto IL_22 */ ;
          continue $labelgroup0;
        case 1: /* IL_22 */ 
          result = false;
          return result;

          break $labelgroup0;
      }
    }
  }; 

  function ListDecorator_Create (model, declaredType, concreteType, tail, fieldNumber, writePacked, packedWireType, returnList, overwriteList, supportNull) {
    var builderFactory = new JSIL.BoxedVariable(null);
    var add = new JSIL.BoxedVariable(null);
    var addRange = new JSIL.BoxedVariable(null);
    var finish = new JSIL.BoxedVariable(null);
    var flag = returnList && 
    $T0F().IdentifyImmutable(
      model, 
      declaredType, 
      /* ref */ builderFactory, 
      /* ref */ add, 
      /* ref */ addRange, 
      /* ref */ finish
    );
    if (flag) {
      var result = new ($T0F())(model, declaredType, concreteType, tail, fieldNumber, writePacked, packedWireType, returnList, overwriteList, supportNull, builderFactory.get(), add.get(), addRange.get(), finish.get());
    } else {
      result = new $thisType(model, declaredType, concreteType, tail, fieldNumber, writePacked, packedWireType, returnList, overwriteList, supportNull);
    }
    return result;
  }; 

  function ListDecorator_get_AppendToCollection () {
    return (((this.options | 0) & 16) === 0);
  }; 

  function ListDecorator_get_ExpectedType () {
    return this.declaredType;
  }; 

  function ListDecorator_get_IsList () {
    return (((this.options | 0) & 1) > 0);
  }; 

  function ListDecorator_get_RequireAdd () {
    return true;
  }; 

  function ListDecorator_get_RequiresOldValue () {
    return this.get_AppendToCollection();
  }; 

  function ListDecorator_get_ReturnList () {
    return (((this.options | 0) & 8) > 0);
  }; 

  function ListDecorator_get_ReturnsValue () {
    return this.get_ReturnList();
  }; 

  function ListDecorator_get_SupportNull () {
    return (((this.options | 0) & 32) > 0);
  }; 

  function ListDecorator_get_SuppressIList () {
    return (((this.options | 0) & 2) > 0);
  }; 

  function ListDecorator_get_WritePacked () {
    return (((this.options | 0) & 4) > 0);
  }; 

  function ListDecorator_GetEnumeratorInfo (model, /* ref */ moveNext, /* ref */ current) {
    var methodInfo = null;
    var enumeratorType = null;
    var expectedType = this.get_ExpectedType();
    var getEnumerator = $T10().GetInstanceMethod(expectedType, "GetEnumerator", null);
    var itemType = $IM00().Call(this.Tail, null);
    var flag = getEnumerator !== null;
    if (flag) {
      var getReturnType = getEnumerator.get_ReturnType();
      var iteratorType = getReturnType;
      moveNext.set($T10().GetInstanceMethod(iteratorType, "MoveNext", null));
      var prop = $T10().GetProperty(iteratorType, "Current", false);
      current.set((
          (prop === null)
             ? null
             : $T10().GetGetMethod(prop, false, false))
      );
      var flag2 = (moveNext.get() === null) && 
      (model.MapType($thisType.ienumeratorType)).IsAssignableFrom(iteratorType);
      if (flag2) {
        moveNext.set($T10().GetInstanceMethod(model.MapType($thisType.ienumeratorType), "MoveNext", null));
      }
      var flag3 = !((moveNext.get() === null) || 
        ((moveNext.get()).get_ReturnType() !== model.MapType($T06().__Type__)) || 
        (current.get() === null)) && 
      ((current.get()).get_ReturnType() === itemType);
      if (flag3) {
        var result = getEnumerator;
        return result;
      }
      current.set(methodInfo = null);
      moveNext.set(methodInfo);
    }
    var tmp = model.MapType($T12().__Type__, false);
    var flag4 = tmp !== null;
    if (flag4) {
      tmp = tmp.MakeGenericType(JSIL.Array.New($T03(), [itemType]));
      enumeratorType = tmp;
    }
    var flag5 = (enumeratorType !== null) && 
    enumeratorType.IsAssignableFrom(expectedType);
    if (flag5) {
      getEnumerator = $T10().GetInstanceMethod(enumeratorType, "GetEnumerator");
      getReturnType = getEnumerator.get_ReturnType();
      iteratorType = getReturnType;
      moveNext.set($T10().GetInstanceMethod(model.MapType($thisType.ienumeratorType), "MoveNext"));
      current.set($T10().GetGetMethod($T10().GetProperty(iteratorType, "Current", false), false, false));
      result = getEnumerator;
    } else {
      enumeratorType = model.MapType($thisType.ienumerableType);
      getEnumerator = $T10().GetInstanceMethod(enumeratorType, "GetEnumerator");
      getReturnType = getEnumerator.get_ReturnType();
      iteratorType = getReturnType;
      moveNext.set($T10().GetInstanceMethod(iteratorType, "MoveNext"));
      current.set($T10().GetGetMethod($T10().GetProperty(iteratorType, "Current", false), false, false));
      result = getEnumerator;
    }
    return result;
  }; 

  function ListDecorator_Read (value, source) {
    var field = (source.get_FieldNumber() | 0);
    var origValue = value;
    var flag = value === null;
    if (flag) {
      value = $S04().CallStatic($T15(), "CreateInstance", null, this.concreteType);
    }
    var isList = this.get_IsList() && 
    !this.get_SuppressIList();
    var flag2 = (this.packedWireType !== $T07().None) && 
    (source.get_WireType() === $T07().String);
    if (flag2) {
      var token = $T14().StartSubItem(source);
      var flag3 = isList;
      if (flag3) {
        var list = $T17().$Cast(value);

        while ($T14().HasSubValue(this.packedWireType, source)) {
          $IM01().Call(list, null, $IM02().Call(this.Tail, null, null, source));
        }
      } else {
        var args = JSIL.Array.New($T13(), 1);

        while ($T14().HasSubValue(this.packedWireType, source)) {
          args[0] = $IM02().Call(this.Tail, null, null, source);
          (this.add).Invoke(value, args);
        }
      }
      $T14().EndSubItem(token, source);
    } else {
      var flag4 = isList;
      if (flag4) {
        var list2 = $T17().$Cast(value);

        do {
          $IM01().Call(list2, null, $IM02().Call(this.Tail, null, null, source));
        } while (source.TryReadFieldHeader(field));
      } else {
        var args2 = JSIL.Array.New($T13(), 1);

        do {
          args2[0] = $IM02().Call(this.Tail, null, null, source);
          (this.add).Invoke(value, args2);
        } while (source.TryReadFieldHeader(field));
      }
    }
    return (
      (origValue === value)
         ? null
         : value)
    ;
  }; 

  function ListDecorator_Write (value, dest) {
    var writePacked = this.get_WritePacked();
    var flag = writePacked;
    if (flag) {
      $T1A().WriteFieldHeader(this.fieldNumber, $T07().String, dest);
      var token = $T1A().StartSubItem(value, dest);
      $T1A().SetPackedField(this.fieldNumber, dest);
    } else {
      token = new ($T16())();
    }
    var checkForNull = !this.get_SupportNull();
    var enumerator = $IM03().Call($T01().$Cast(value), null);
    try {

      while ($IM04().Call(enumerator, null)) {
        var subItem = $IM05().Call(enumerator, null);
        var flag2 = checkForNull && 
        (subItem === null);
        if (flag2) {
          throw $S05().Construct();
        }
        $IM06().Call(this.Tail, null, subItem, dest);
      }
    } finally {
      var disposable = $T1C().$As(enumerator);
      if (disposable !== null) {
        $IM07().Call(disposable, null);
      }
    }
    var flag3 = writePacked;
    if (flag3) {
      $T1A().EndSubItem(token, dest);
    }
  }; 

  JSIL.MakeType({
      BaseType: $asm0E.TypeRef("ProtoBuf.Serializers.ProtoDecoratorBase"), 
      Name: "ProtoBuf.Serializers.ListDecorator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 10, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0E.TypeRef("ProtoBuf.Meta.TypeModel"), $asm14.TypeRef("System.Type"), 
          $asm14.TypeRef("System.Type"), $asm0E.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), 
          $.Int32, $.Boolean, 
          $asm0E.TypeRef("ProtoBuf.WireType"), $.Boolean, 
          $.Boolean, $.Boolean
        ]), 
      ListDecorator__ctor
    );

    $.Method({Static:true , Public:false}, "CanPack", 
      new JSIL.MethodSignature($.Boolean, [$asm0E.TypeRef("ProtoBuf.WireType")]), 
      ListDecorator_CanPack
    );

    $.Method({Static:true , Public:false}, "Create", 
      new JSIL.MethodSignature($.Type, [
          $asm0E.TypeRef("ProtoBuf.Meta.TypeModel"), $asm14.TypeRef("System.Type"), 
          $asm14.TypeRef("System.Type"), $asm0E.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), 
          $.Int32, $.Boolean, 
          $asm0E.TypeRef("ProtoBuf.WireType"), $.Boolean, 
          $.Boolean, $.Boolean
        ]), 
      ListDecorator_Create
    );

    $.Method({Static:false, Public:false}, "get_AppendToCollection", 
      JSIL.MethodSignature.Return($.Boolean), 
      ListDecorator_get_AppendToCollection
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ExpectedType", 
      JSIL.MethodSignature.Return($asm14.TypeRef("System.Type")), 
      ListDecorator_get_ExpectedType
    );

    $.Method({Static:false, Public:false}, "get_IsList", 
      JSIL.MethodSignature.Return($.Boolean), 
      ListDecorator_get_IsList
    );

    $.Method({Static:false, Public:false, Virtual:true }, "get_RequireAdd", 
      JSIL.MethodSignature.Return($.Boolean), 
      ListDecorator_get_RequireAdd
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_RequiresOldValue", 
      JSIL.MethodSignature.Return($.Boolean), 
      ListDecorator_get_RequiresOldValue
    );

    $.Method({Static:false, Public:false}, "get_ReturnList", 
      JSIL.MethodSignature.Return($.Boolean), 
      ListDecorator_get_ReturnList
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ReturnsValue", 
      JSIL.MethodSignature.Return($.Boolean), 
      ListDecorator_get_ReturnsValue
    );

    $.Method({Static:false, Public:false}, "get_SupportNull", 
      JSIL.MethodSignature.Return($.Boolean), 
      ListDecorator_get_SupportNull
    );

    $.Method({Static:false, Public:false}, "get_SuppressIList", 
      JSIL.MethodSignature.Return($.Boolean), 
      ListDecorator_get_SuppressIList
    );

    $.Method({Static:false, Public:false}, "get_WritePacked", 
      JSIL.MethodSignature.Return($.Boolean), 
      ListDecorator_get_WritePacked
    );

    $.Method({Static:false, Public:false}, "GetEnumeratorInfo", 
      new JSIL.MethodSignature($asm14.TypeRef("System.Reflection.MethodInfo"), [
          $asm0E.TypeRef("ProtoBuf.Meta.TypeModel"), $jsilcore.TypeRef("JSIL.Reference", [$asm14.TypeRef("System.Reflection.MethodInfo")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm14.TypeRef("System.Reflection.MethodInfo")])
        ]), 
      ListDecorator_GetEnumeratorInfo
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Object, [$.Object, $asm0E.TypeRef("ProtoBuf.ProtoReader")]), 
      ListDecorator_Read
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [$.Object, $asm0E.TypeRef("ProtoBuf.ProtoWriter")]), 
      ListDecorator_Write
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "options", $.Byte);

    $.Constant({Static:true , Public:false}, "OPTIONS_IsList", $.Byte, 1);

    $.Constant({Static:true , Public:false}, "OPTIONS_SuppressIList", $.Byte, 2);

    $.Constant({Static:true , Public:false}, "OPTIONS_WritePacked", $.Byte, 4);

    $.Constant({Static:true , Public:false}, "OPTIONS_ReturnList", $.Byte, 8);

    $.Constant({Static:true , Public:false}, "OPTIONS_OverwriteList", $.Byte, 16);

    $.Constant({Static:true , Public:false}, "OPTIONS_SupportNull", $.Byte, 32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "declaredType", $asm14.TypeRef("System.Type"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "concreteType", $asm14.TypeRef("System.Type"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "add", $asm14.TypeRef("System.Reflection.MethodInfo"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "fieldNumber", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "packedWireType", $asm0E.TypeRef("ProtoBuf.WireType"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "ienumeratorType", $asm14.TypeRef("System.Type"), function ($pi) {
        return $asm14.System.Collections.IEnumerator.__Type__;
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "ienumerableType", $asm14.TypeRef("System.Type"), function ($pi) {
        return $asm14.System.Collections.IEnumerable.__Type__;
      });


    function ListDecorator__cctor () {
      $thisType.ienumeratorType = $T00().__Type__;
      $thisType.ienumerableType = $T01().__Type__;
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      ListDecorator__cctor
    );

    $.Property({Static:false, Public:false}, "IsList", $.Boolean);

    $.Property({Static:false, Public:false}, "SuppressIList", $.Boolean);

    $.Property({Static:false, Public:false}, "WritePacked", $.Boolean);

    $.Property({Static:false, Public:false}, "SupportNull", $.Boolean);

    $.Property({Static:false, Public:false}, "ReturnList", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "RequireAdd", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "ExpectedType", $asm14.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "RequiresOldValue", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "ReturnsValue", $.Boolean);

    $.Property({Static:false, Public:false}, "AppendToCollection", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ProtoBuf.Serializers.ImmutableCollectionDecorator */ 

(function ImmutableCollectionDecorator$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0E.ProtoBuf.Meta.TypeModel)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm14.System.Type)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0E.ProtoBuf.Serializers.IProtoSerializer)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm14.System.Int32)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm14.System.Boolean)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm0E.ProtoBuf.WireType)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm14.System.Reflection.MethodInfo)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm0E.ProtoBuf.Serializers.ListDecorator)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize(System.Array.Of($asm14.System.Type))) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm14.System.Collections.Generic.KeyValuePair$b2)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm14.System.String)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm14.System.Reflection.MemberInfo)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm14.System.Char)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize(System.Array.Of($asm14.System.Reflection.MethodInfo))) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm14.System.Reflection.MethodBase)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize(System.Array.Of($asm14.System.Reflection.ParameterInfo))) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm14.System.Void)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm0E.ProtoBuf.Helpers)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm14.System.Collections.Generic.IEnumerable$b1)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm14.System.Object)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm0E.ProtoBuf.ProtoReader)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize(System.Array.Of($asm14.System.Object))) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm14.System.Collections.ICollection)) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm14.System.Collections.IList)) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize($asm14.System.Collections.IEnumerator)) ();
  };
  var $T19 = function () {
    return ($T19 = JSIL.Memoize($asm14.System.Collections.IEnumerable)) ();
  };
  var $T1A = function () {
    return ($T1A = JSIL.Memoize($asm14.System.IDisposable)) ();
  };
  var $T1B = function () {
    return ($T1B = JSIL.Memoize($asm0E.ProtoBuf.SubItemToken)) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm14.System.Collections.ICollection.get_Count)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm14.System.Collections.IEnumerable.GetEnumerator)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm14.System.Collections.IEnumerator.MoveNext)) ();
  };
  var $IM03 = function () {
    return ($IM03 = JSIL.Memoize($asm14.System.Collections.IEnumerator.get_Current)) ();
  };
  var $IM04 = function () {
    return ($IM04 = JSIL.Memoize($asm14.System.IDisposable.Dispose)) ();
  };
  var $IM05 = function () {
    return ($IM05 = JSIL.Memoize($asm0E.ProtoBuf.Serializers.IProtoSerializer.Read)) ();
  };


  function ImmutableCollectionDecorator__ctor (model, declaredType, concreteType, tail, fieldNumber, writePacked, packedWireType, returnList, overwriteList, supportNull, builderFactory, add, addRange, finish) {
    $T07().prototype._ctor.call(this, 
      model, 
      declaredType, 
      concreteType, 
      tail, 
      fieldNumber, 
      writePacked, 
      packedWireType, 
      returnList, 
      overwriteList, 
      supportNull
    );
    this.builderFactory = builderFactory;
    this.add = add;
    this.addRange = addRange;
    this.finish = finish;
  }; 

  function ImmutableCollectionDecorator_get_RequireAdd () {
    return false;
  }; 

  function ImmutableCollectionDecorator_IdentifyImmutable (model, declaredType, /* ref */ builderFactory, /* ref */ add, /* ref */ addRange, /* ref */ finish) {
    var methodInfo = null;
    finish.set(methodInfo = null);
    addRange.set(methodInfo = methodInfo);
    add.set(methodInfo = methodInfo);
    builderFactory.set(methodInfo);
    var flag = (model === null) || 
    (declaredType === null);
    if (flag) {
      var result = false;
    } else {
      var flag2 = !declaredType.get_IsGenericType();
      if (flag2) {
        result = false;
      } else {
        var typeArgs = declaredType.GetGenericArguments();
        var num = (typeArgs.length | 0);
        if (num !== 1) {
          if (num !== 2) {
            result = false;
            return result;
          }
          var kvp = model.MapType($T09().__Type__);
          var flag3 = kvp === null;
          if (flag3) {
            result = false;
            return result;
          }
          kvp = kvp.MakeGenericType(typeArgs);
          var effectiveType = JSIL.Array.New($T01(), [kvp]);
        } else {
          effectiveType = typeArgs;
        }
        var flag4 = $thisType.ResolveIReadOnlyCollection(declaredType, null) === null;
        if (flag4) {
          result = false;
        } else {
          var name = declaredType.get_Name();
          var i = (name.indexOf("`"));
          if (i <= 0) {
            result = false;
          } else {
            name = (
              declaredType.get_IsInterface()
                 ? name.substr(1, ((i - 1) | 0))
                 : name.substr(0, i))
            ;
            var outerType = model.GetType(
              (declaredType.get_Namespace() + "." + name), 
              declaredType.get_Assembly()
            );
            var flag6 = (outerType === null) && 
            (name == "ImmutableSet");
            if (flag6) {
              outerType = model.GetType(
                JSIL.ConcatString(declaredType.get_Namespace(), ".ImmutableHashSet"), 
                declaredType.get_Assembly()
              );
            }
            var flag7 = outerType === null;
            if (flag7) {
              result = false;
            } else {
              var methods = outerType.GetMethods();

            $loop0: 
              for (var j = 0; j < (methods.length | 0); j = ((j + 1) | 0)) {
                var method = methods[j];
                var flag8 = !method.get_IsStatic() || 
                (method.get_Name() != "CreateBuilder") || 
                !method.get_IsGenericMethodDefinition() || 
                ((method.GetParameters().length | 0) !== 0) || 
                ((method.GetGenericArguments().length | 0) !== (typeArgs.length | 0));
                if (!flag8) {
                  builderFactory.set(method.MakeGenericMethod(typeArgs));
                  break $loop0;
                }
              }
              var flag9 = (builderFactory.get() === null) || 
              ((builderFactory.get()).get_ReturnType() === null) || 
              ((builderFactory.get()).get_ReturnType() === model.MapType($T10().__Type__));
              if (flag9) {
                result = false;
              } else {
                add.set($T11().GetInstanceMethod((builderFactory.get()).get_ReturnType(), "Add", effectiveType));
                var flag10 = add.get() === null;
                if (flag10) {
                  result = false;
                } else {
                  finish.set($T11().GetInstanceMethod((builderFactory.get()).get_ReturnType(), "ToImmutable", $T11().EmptyTypes));
                  var flag11 = (finish.get() === null) || 
                  ((finish.get()).get_ReturnType() === null) || 
                  ((finish.get()).get_ReturnType() === model.MapType($T10().__Type__));
                  if (flag11) {
                    result = false;
                  } else {
                    var flag12 = ((finish.get()).get_ReturnType() !== declaredType) && 
                    !$T11().IsAssignableFrom(declaredType, (finish.get()).get_ReturnType());
                    if (flag12) {
                      result = false;
                    } else {
                      addRange.set($T11().GetInstanceMethod((builderFactory.get()).get_ReturnType(), "AddRange", JSIL.Array.New($T01(), [declaredType])));
                      var flag13 = addRange.get() === null;
                      if (flag13) {
                        if (model.MapType($T12().__Type__, false) !== null) {
                          addRange.set($T11().GetInstanceMethod(
                              (builderFactory.get()).get_ReturnType(), 
                              "AddRange", 
                              JSIL.Array.New($T01(), [(model.MapType($T12().__Type__, false)).MakeGenericType(effectiveType)])
                            ));
                        }
                      }
                      result = true;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    return result;
  }; 

  function ImmutableCollectionDecorator_Read (value, source) {
    var builderInstance = (this.builderFactory).Invoke(null, null);
    var field = (source.get_FieldNumber() | 0);
    var args = JSIL.Array.New($T13(), 1);
    var flag = !(!this.get_AppendToCollection() || 
      (value === null)) && 
    (($IM00().Call($T17().$Cast(value), null) | 0) > 0);
    if (flag) {
      if (this.addRange !== null) {
        args[0] = value;
        (this.addRange).Invoke(builderInstance, args);
      } else {
        var enumerator = $IM01().Call($T17().$Cast(value), null);
        try {

          while ($IM02().Call(enumerator, null)) {
            var item = $IM03().Call(enumerator, null);
            args[0] = item;
            (this.add).Invoke(builderInstance, args);
          }
        } finally {
          var disposable = $T1A().$As(enumerator);
          if (disposable !== null) {
            $IM04().Call(disposable, null);
          }
        }
      }
    }
    var flag3 = (this.packedWireType !== $T05().None) && 
    (source.get_WireType() === $T05().String);
    if (flag3) {
      var token = $T14().StartSubItem(source);

      while ($T14().HasSubValue(this.packedWireType, source)) {
        args[0] = $IM05().Call(this.Tail, null, null, source);
        (this.add).Invoke(builderInstance, args);
      }
      $T14().EndSubItem(token, source);
    } else {

      do {
        args[0] = $IM05().Call(this.Tail, null, null, source);
        (this.add).Invoke(builderInstance, args);
      } while (source.TryReadFieldHeader(field));
    }
    return (this.finish).Invoke(builderInstance, null);
  }; 

  function ImmutableCollectionDecorator_ResolveIReadOnlyCollection (declaredType, t) {
    var interfaces = declaredType.GetInterfaces();
    var i = 0;

  $loop0: 
    while (i < (interfaces.length | 0)) {

      var $label0 = 0;
    $labelgroup0: 
      while (true) {
        switch ($label0) {
          case 0: /* $entry0 */ 
            var intImpl = interfaces[i];
            var flag = intImpl.get_IsGenericType() && 
            (System.String.StartsWith(intImpl.get_Name(), "IReadOnlyCollection`"));
            if (flag) {
              if (t !== null) {
                var typeArgs = intImpl.GetGenericArguments();
                var flag3 = ((typeArgs.length | 0) !== 1) && 
                (typeArgs[0] !== t);
                if (flag3) {
                  $label0 = 1 /* goto IL_68 */ ;
                  continue $labelgroup0;
                }
              }
              var result = intImpl;
              return result;
            }

            $label0 = 1 /* goto IL_68 */ ;
            continue $labelgroup0;
          case 1: /* IL_68 */ 
            i = ((i + 1) | 0);

            break $labelgroup0;
        }
      }
    }
    result = null;
    return result;
  }; 

  JSIL.MakeType({
      BaseType: $asm0E.TypeRef("ProtoBuf.Serializers.ListDecorator"), 
      Name: "ProtoBuf.Serializers.ImmutableCollectionDecorator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 14, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0E.TypeRef("ProtoBuf.Meta.TypeModel"), $asm14.TypeRef("System.Type"), 
          $asm14.TypeRef("System.Type"), $asm0E.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), 
          $.Int32, $.Boolean, 
          $asm0E.TypeRef("ProtoBuf.WireType"), $.Boolean, 
          $.Boolean, $.Boolean, 
          $asm14.TypeRef("System.Reflection.MethodInfo"), $asm14.TypeRef("System.Reflection.MethodInfo"), 
          $asm14.TypeRef("System.Reflection.MethodInfo"), $asm14.TypeRef("System.Reflection.MethodInfo")
        ]), 
      ImmutableCollectionDecorator__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "get_RequireAdd", 
      JSIL.MethodSignature.Return($.Boolean), 
      ImmutableCollectionDecorator_get_RequireAdd
    );

    $.Method({Static:true , Public:false}, "IdentifyImmutable", 
      new JSIL.MethodSignature($.Boolean, [
          $asm0E.TypeRef("ProtoBuf.Meta.TypeModel"), $asm14.TypeRef("System.Type"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm14.TypeRef("System.Reflection.MethodInfo")]), $jsilcore.TypeRef("JSIL.Reference", [$asm14.TypeRef("System.Reflection.MethodInfo")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm14.TypeRef("System.Reflection.MethodInfo")]), $jsilcore.TypeRef("JSIL.Reference", [$asm14.TypeRef("System.Reflection.MethodInfo")])
        ]), 
      ImmutableCollectionDecorator_IdentifyImmutable
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Object, [$.Object, $asm0E.TypeRef("ProtoBuf.ProtoReader")]), 
      ImmutableCollectionDecorator_Read
    );

    $.Method({Static:true , Public:false}, "ResolveIReadOnlyCollection", 
      new JSIL.MethodSignature($asm14.TypeRef("System.Type"), [$asm14.TypeRef("System.Type"), $asm14.TypeRef("System.Type")]), 
      ImmutableCollectionDecorator_ResolveIReadOnlyCollection
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "builderFactory", $asm14.TypeRef("System.Reflection.MethodInfo"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "add", $asm14.TypeRef("System.Reflection.MethodInfo"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "addRange", $asm14.TypeRef("System.Reflection.MethodInfo"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "finish", $asm14.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false, Virtual:true }, "RequireAdd", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ProtoBuf.Serializers.Int16Serializer */ 

(function Int16Serializer$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm14.System.Int16)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0E.ProtoBuf.Meta.TypeModel)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm14.System.Object)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0E.ProtoBuf.ProtoReader)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm0E.ProtoBuf.ProtoWriter)) ();
  };


  function Int16Serializer__ctor (model) {
  }; 

  function Int16Serializer_get_ExpectedType () {
    return $thisType.expectedType;
  }; 

  function Int16Serializer_ProtoBuf_Serializers_IProtoSerializer_get_RequiresOldValue () {
    return false;
  }; 

  function Int16Serializer_ProtoBuf_Serializers_IProtoSerializer_get_ReturnsValue () {
    return true;
  }; 

  function Int16Serializer_Read (value, source) {
    return $T00().$Box(source.ReadInt16());
  }; 

  function Int16Serializer_Write (value, dest) {
    $T04().WriteInt16($T00().$Cast(value), dest);
  }; 

  JSIL.MakeType({
      BaseType: $asm14.TypeRef("System.Object"), 
      Name: "ProtoBuf.Serializers.Int16Serializer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm0E.TypeRef("ProtoBuf.Meta.TypeModel")), 
      Int16Serializer__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ExpectedType", 
      JSIL.MethodSignature.Return($asm14.TypeRef("System.Type")), 
      Int16Serializer_get_ExpectedType
    );

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.get_RequiresOldValue", 
      JSIL.MethodSignature.Return($.Boolean), 
      Int16Serializer_ProtoBuf_Serializers_IProtoSerializer_get_RequiresOldValue
    )
      .Overrides($asm0E.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "get_RequiresOldValue");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.get_ReturnsValue", 
      JSIL.MethodSignature.Return($.Boolean), 
      Int16Serializer_ProtoBuf_Serializers_IProtoSerializer_get_ReturnsValue
    )
      .Overrides($asm0E.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "get_ReturnsValue");

    $.Method({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Object, [$.Object, $asm0E.TypeRef("ProtoBuf.ProtoReader")]), 
      Int16Serializer_Read
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [$.Object, $asm0E.TypeRef("ProtoBuf.ProtoWriter")]), 
      Int16Serializer_Write
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "expectedType", $asm14.TypeRef("System.Type"), function ($pi) {
        return $asm14.System.Int16.__Type__;
      });


    function Int16Serializer__cctor () {
      $thisType.expectedType = $T00().__Type__;
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      Int16Serializer__cctor
    );

    $.Property({Static:false, Public:true , Virtual:true }, "ExpectedType", $asm14.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.RequiresOldValue", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.ReturnsValue", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm0E.TypeRef("ProtoBuf.Serializers.IProtoSerializer")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ProtoBuf.Serializers.Int32Serializer */ 

(function Int32Serializer$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm14.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0E.ProtoBuf.Meta.TypeModel)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm14.System.Object)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0E.ProtoBuf.ProtoReader)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm0E.ProtoBuf.ProtoWriter)) ();
  };


  function Int32Serializer__ctor (model) {
  }; 

  function Int32Serializer_get_ExpectedType () {
    return $thisType.expectedType;
  }; 

  function Int32Serializer_ProtoBuf_Serializers_IProtoSerializer_get_RequiresOldValue () {
    return false;
  }; 

  function Int32Serializer_ProtoBuf_Serializers_IProtoSerializer_get_ReturnsValue () {
    return true;
  }; 

  function Int32Serializer_Read (value, source) {
    return $T00().$Box(source.ReadInt32());
  }; 

  function Int32Serializer_Write (value, dest) {
    $T04().WriteInt32($T00().$Cast(value), dest);
  }; 

  JSIL.MakeType({
      BaseType: $asm14.TypeRef("System.Object"), 
      Name: "ProtoBuf.Serializers.Int32Serializer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm0E.TypeRef("ProtoBuf.Meta.TypeModel")), 
      Int32Serializer__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ExpectedType", 
      JSIL.MethodSignature.Return($asm14.TypeRef("System.Type")), 
      Int32Serializer_get_ExpectedType
    );

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.get_RequiresOldValue", 
      JSIL.MethodSignature.Return($.Boolean), 
      Int32Serializer_ProtoBuf_Serializers_IProtoSerializer_get_RequiresOldValue
    )
      .Overrides($asm0E.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "get_RequiresOldValue");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.get_ReturnsValue", 
      JSIL.MethodSignature.Return($.Boolean), 
      Int32Serializer_ProtoBuf_Serializers_IProtoSerializer_get_ReturnsValue
    )
      .Overrides($asm0E.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "get_ReturnsValue");

    $.Method({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Object, [$.Object, $asm0E.TypeRef("ProtoBuf.ProtoReader")]), 
      Int32Serializer_Read
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [$.Object, $asm0E.TypeRef("ProtoBuf.ProtoWriter")]), 
      Int32Serializer_Write
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "expectedType", $asm14.TypeRef("System.Type"), function ($pi) {
        return $asm14.System.Int32.__Type__;
      });


    function Int32Serializer__cctor () {
      $thisType.expectedType = $T00().__Type__;
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      Int32Serializer__cctor
    );

    $.Property({Static:false, Public:true , Virtual:true }, "ExpectedType", $asm14.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.RequiresOldValue", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.ReturnsValue", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm0E.TypeRef("ProtoBuf.Serializers.IProtoSerializer")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ProtoBuf.Serializers.Int64Serializer */ 

(function Int64Serializer$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm14.System.Int64)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0E.ProtoBuf.Meta.TypeModel)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm14.System.Object)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0E.ProtoBuf.ProtoReader)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm0E.ProtoBuf.ProtoWriter)) ();
  };


  function Int64Serializer__ctor (model) {
  }; 

  function Int64Serializer_get_ExpectedType () {
    return $thisType.expectedType;
  }; 

  function Int64Serializer_ProtoBuf_Serializers_IProtoSerializer_get_RequiresOldValue () {
    return false;
  }; 

  function Int64Serializer_ProtoBuf_Serializers_IProtoSerializer_get_ReturnsValue () {
    return true;
  }; 

  function Int64Serializer_Read (value, source) {
    return source.ReadInt64();
  }; 

  function Int64Serializer_Write (value, dest) {
    $T04().WriteInt64($T00().$Cast(value), dest);
  }; 

  JSIL.MakeType({
      BaseType: $asm14.TypeRef("System.Object"), 
      Name: "ProtoBuf.Serializers.Int64Serializer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm0E.TypeRef("ProtoBuf.Meta.TypeModel")), 
      Int64Serializer__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ExpectedType", 
      JSIL.MethodSignature.Return($asm14.TypeRef("System.Type")), 
      Int64Serializer_get_ExpectedType
    );

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.get_RequiresOldValue", 
      JSIL.MethodSignature.Return($.Boolean), 
      Int64Serializer_ProtoBuf_Serializers_IProtoSerializer_get_RequiresOldValue
    )
      .Overrides($asm0E.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "get_RequiresOldValue");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.get_ReturnsValue", 
      JSIL.MethodSignature.Return($.Boolean), 
      Int64Serializer_ProtoBuf_Serializers_IProtoSerializer_get_ReturnsValue
    )
      .Overrides($asm0E.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "get_ReturnsValue");

    $.Method({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Object, [$.Object, $asm0E.TypeRef("ProtoBuf.ProtoReader")]), 
      Int64Serializer_Read
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [$.Object, $asm0E.TypeRef("ProtoBuf.ProtoWriter")]), 
      Int64Serializer_Write
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "expectedType", $asm14.TypeRef("System.Type"), function ($pi) {
        return $asm14.System.Int64.__Type__;
      });


    function Int64Serializer__cctor () {
      $thisType.expectedType = $T00().__Type__;
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      Int64Serializer__cctor
    );

    $.Property({Static:false, Public:true , Virtual:true }, "ExpectedType", $asm14.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.RequiresOldValue", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.ReturnsValue", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm0E.TypeRef("ProtoBuf.Serializers.IProtoSerializer")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface ProtoBuf.Serializers.IProtoSerializer */ 

JSIL.MakeInterface(
  "ProtoBuf.Serializers.IProtoSerializer", false, [], function ($) {
    $.Method({}, "get_ExpectedType", JSIL.MethodSignature.Return($asm14.TypeRef("System.Type")));
    $.Method({}, "Write", new JSIL.MethodSignature(null, [$.Object, $asm0E.TypeRef("ProtoBuf.ProtoWriter")]));
    $.Method({}, "Read", new JSIL.MethodSignature($.Object, [$.Object, $asm0E.TypeRef("ProtoBuf.ProtoReader")]));
    $.Method({}, "get_RequiresOldValue", JSIL.MethodSignature.Return($.Boolean));
    $.Method({}, "get_ReturnsValue", JSIL.MethodSignature.Return($.Boolean));
    $.Property({}, "ExpectedType");
    $.Property({}, "RequiresOldValue");
    $.Property({}, "ReturnsValue");
  }, []);

/* interface ProtoBuf.Serializers.IProtoTypeSerializer */ 

JSIL.MakeInterface(
  "ProtoBuf.Serializers.IProtoTypeSerializer", false, [], function ($) {
    $.Method({}, "HasCallbacks", new JSIL.MethodSignature($.Boolean, [$asm0E.TypeRef("ProtoBuf.Meta.TypeModel+CallbackType")]));
    $.Method({}, "CanCreateInstance", JSIL.MethodSignature.Return($.Boolean));
    $.Method({}, "CreateInstance", new JSIL.MethodSignature($.Object, [$asm0E.TypeRef("ProtoBuf.ProtoReader")]));
    $.Method({}, "Callback", new JSIL.MethodSignature(null, [
          $.Object, $asm0E.TypeRef("ProtoBuf.Meta.TypeModel+CallbackType"), 
          $asm0E.TypeRef("ProtoBuf.SerializationContext")
        ]));
  }, [$asm0E.TypeRef("ProtoBuf.Serializers.IProtoSerializer")]);

/* interface ProtoBuf.Serializers.ISerializerProxy */ 

JSIL.MakeInterface(
  "ProtoBuf.Serializers.ISerializerProxy", false, [], function ($) {
    $.Method({}, "get_Serializer", JSIL.MethodSignature.Return($asm0E.TypeRef("ProtoBuf.Serializers.IProtoSerializer")));
    $.Property({}, "Serializer");
  }, []);

/* class ProtoBuf.Serializers.MemberSpecifiedDecorator */ 

(function MemberSpecifiedDecorator$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm14.System.Reflection.MethodInfo)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0E.ProtoBuf.Serializers.IProtoSerializer)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0E.ProtoBuf.Serializers.ProtoDecoratorBase)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm14.System.InvalidOperationException)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm14.System.Object)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm0E.ProtoBuf.ProtoReader)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm14.System.Reflection.MethodBase)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm14.System.Boolean)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm0E.ProtoBuf.ProtoWriter)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm14.TypeRef("System.InvalidOperationException"), null))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm0E.ProtoBuf.Serializers.IProtoSerializer.get_ExpectedType)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm0E.ProtoBuf.Serializers.IProtoSerializer.get_RequiresOldValue)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm0E.ProtoBuf.Serializers.IProtoSerializer.get_ReturnsValue)) ();
  };
  var $IM03 = function () {
    return ($IM03 = JSIL.Memoize($asm0E.ProtoBuf.Serializers.IProtoSerializer.Read)) ();
  };
  var $IM04 = function () {
    return ($IM04 = JSIL.Memoize($asm0E.ProtoBuf.Serializers.IProtoSerializer.Write)) ();
  };


  function MemberSpecifiedDecorator__ctor (getSpecified, setSpecified, tail) {
    $T02().prototype._ctor.call(this, tail);
    if ((getSpecified === null) && (setSpecified === null)) {
      throw $S00().Construct();
    }
    this.getSpecified = getSpecified;
    this.setSpecified = setSpecified;
  }; 

  function MemberSpecifiedDecorator_get_ExpectedType () {
    return $IM00().Call(this.Tail, null);
  }; 

  function MemberSpecifiedDecorator_get_RequiresOldValue () {
    return $IM01().Call(this.Tail, null);
  }; 

  function MemberSpecifiedDecorator_get_ReturnsValue () {
    return $IM02().Call(this.Tail, null);
  }; 

  function MemberSpecifiedDecorator_Read (value, source) {
    var result = $IM03().Call(this.Tail, null, value, source);
    if (this.setSpecified !== null) {
      (this.setSpecified).Invoke(value, JSIL.Array.New($T04(), [$T07().$Box(true)]));
    }
    return result;
  }; 

  function MemberSpecifiedDecorator_Write (value, dest) {
    var flag = (this.getSpecified === null) || 
    $T07().$Cast((this.getSpecified).Invoke(value, null));
    if (flag) {
      $IM04().Call(this.Tail, null, value, dest);
    }
  }; 

  JSIL.MakeType({
      BaseType: $asm0E.TypeRef("ProtoBuf.Serializers.ProtoDecoratorBase"), 
      Name: "ProtoBuf.Serializers.MemberSpecifiedDecorator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm14.TypeRef("System.Reflection.MethodInfo"), $asm14.TypeRef("System.Reflection.MethodInfo"), 
          $asm0E.TypeRef("ProtoBuf.Serializers.IProtoSerializer")
        ]), 
      MemberSpecifiedDecorator__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ExpectedType", 
      JSIL.MethodSignature.Return($asm14.TypeRef("System.Type")), 
      MemberSpecifiedDecorator_get_ExpectedType
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_RequiresOldValue", 
      JSIL.MethodSignature.Return($.Boolean), 
      MemberSpecifiedDecorator_get_RequiresOldValue
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ReturnsValue", 
      JSIL.MethodSignature.Return($.Boolean), 
      MemberSpecifiedDecorator_get_ReturnsValue
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Object, [$.Object, $asm0E.TypeRef("ProtoBuf.ProtoReader")]), 
      MemberSpecifiedDecorator_Read
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [$.Object, $asm0E.TypeRef("ProtoBuf.ProtoWriter")]), 
      MemberSpecifiedDecorator_Write
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "getSpecified", $asm14.TypeRef("System.Reflection.MethodInfo"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "setSpecified", $asm14.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:true , Virtual:true }, "ExpectedType", $asm14.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "RequiresOldValue", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "ReturnsValue", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ProtoBuf.Serializers.NetObjectSerializer */ 

(function NetObjectSerializer$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0E.ProtoBuf.Meta.TypeModel)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm14.System.Type)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm14.System.Int32)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0E.ProtoBuf.BclHelpers_NetObjectOptions)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm14.System.Boolean)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm14.System.Object)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm0E.ProtoBuf.ProtoReader)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm0E.ProtoBuf.BclHelpers)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm0E.ProtoBuf.ProtoWriter)) ();
  };


  function NetObjectSerializer__ctor (model, type, key, options) {
    var dynamicType = $T03().$Cast(options & $T03().DynamicType) > $T03().None;
    this.key = ((
      dynamicType
         ? -1
         : key)
     | 0);
    this.type = (
      dynamicType
         ? model.MapType($T05().__Type__)
         : type)
    ;
    this.options = options;
  }; 

  function NetObjectSerializer_get_ExpectedType () {
    return this.type;
  }; 

  function NetObjectSerializer_get_RequiresOldValue () {
    return true;
  }; 

  function NetObjectSerializer_get_ReturnsValue () {
    return true;
  }; 

  function NetObjectSerializer_Read (value, source) {
    return $T07().ReadNetObject(
      value, 
      source, 
      this.key, 
      (
        (this.type === $T05().__Type__)
           ? null
           : this.type)
      , 
      this.options
    );
  }; 

  function NetObjectSerializer_Write (value, dest) {
    $T07().WriteNetObject(value, dest, this.key, this.options);
  }; 

  JSIL.MakeType({
      BaseType: $asm14.TypeRef("System.Object"), 
      Name: "ProtoBuf.Serializers.NetObjectSerializer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0E.TypeRef("ProtoBuf.Meta.TypeModel"), $asm14.TypeRef("System.Type"), 
          $.Int32, $asm0E.TypeRef("ProtoBuf.BclHelpers+NetObjectOptions")
        ]), 
      NetObjectSerializer__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ExpectedType", 
      JSIL.MethodSignature.Return($asm14.TypeRef("System.Type")), 
      NetObjectSerializer_get_ExpectedType
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_RequiresOldValue", 
      JSIL.MethodSignature.Return($.Boolean), 
      NetObjectSerializer_get_RequiresOldValue
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ReturnsValue", 
      JSIL.MethodSignature.Return($.Boolean), 
      NetObjectSerializer_get_ReturnsValue
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Object, [$.Object, $asm0E.TypeRef("ProtoBuf.ProtoReader")]), 
      NetObjectSerializer_Read
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [$.Object, $asm0E.TypeRef("ProtoBuf.ProtoWriter")]), 
      NetObjectSerializer_Write
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "key", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "type", $asm14.TypeRef("System.Type"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "options", $asm0E.TypeRef("ProtoBuf.BclHelpers+NetObjectOptions"));

    $.Property({Static:false, Public:true , Virtual:true }, "ExpectedType", $asm14.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "ReturnsValue", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "RequiresOldValue", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm0E.TypeRef("ProtoBuf.Serializers.IProtoSerializer")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ProtoBuf.Serializers.NullDecorator */ 

(function NullDecorator$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0E.ProtoBuf.Meta.TypeModel)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0E.ProtoBuf.Serializers.IProtoSerializer)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0E.ProtoBuf.Serializers.ProtoDecoratorBase)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm14.System.Boolean)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm14.System.NotSupportedException)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm14.System.Type)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm0E.ProtoBuf.Helpers)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm14.System.Nullable$b1)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm14.System.Object)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm0E.ProtoBuf.ProtoReader)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm14.System.Int32)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm0E.ProtoBuf.SubItemToken)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm0E.ProtoBuf.ProtoWriter)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm14.TypeRef("System.NotSupportedException"), [$asm14.TypeRef("System.String")]))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm0E.ProtoBuf.Serializers.IProtoSerializer.get_ReturnsValue)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm0E.ProtoBuf.Serializers.IProtoSerializer.get_ExpectedType)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm0E.ProtoBuf.Serializers.IProtoSerializer.Read)) ();
  };
  var $IM03 = function () {
    return ($IM03 = JSIL.Memoize($asm0E.ProtoBuf.Serializers.IProtoSerializer.Write)) ();
  };


  function NullDecorator__ctor (model, tail) {
    $T02().prototype._ctor.call(this, tail);
    var flag = !$IM00().Call(tail, null);
    if (flag) {
      throw $S00().Construct("NullDecorator only supports implementations that return values");
    }
    var tailType = $IM01().Call(tail, null);
    var flag2 = $T06().IsValueType(tailType);
    if (flag2) {
      this.expectedType = (model.MapType($T07().__Type__)).MakeGenericType(JSIL.Array.New($T05(), [tailType]));
    } else {
      this.expectedType = tailType;
    }
  }; 

  function NullDecorator_get_ExpectedType () {
    return this.expectedType;
  }; 

  function NullDecorator_get_RequiresOldValue () {
    return true;
  }; 

  function NullDecorator_get_ReturnsValue () {
    return true;
  }; 

  function NullDecorator_Read (value, source) {
    var field = 0;
    var tok = $T09().StartSubItem(source);

    while ((field = (source.ReadFieldHeader() | 0)) > 0) {
      var flag = field === 1;
      if (flag) {
        value = $IM02().Call(this.Tail, null, value, source);
      } else {
        source.SkipField();
      }
    }
    $T09().EndSubItem(tok, source);
    return value;
  }; 

  function NullDecorator_Write (value, dest) {
    var token = $T0C().StartSubItem(null, dest);
    if (value !== null) {
      $IM03().Call(this.Tail, null, value, dest);
    }
    $T0C().EndSubItem(token, dest);
  }; 

  JSIL.MakeType({
      BaseType: $asm0E.TypeRef("ProtoBuf.Serializers.ProtoDecoratorBase"), 
      Name: "ProtoBuf.Serializers.NullDecorator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0E.TypeRef("ProtoBuf.Meta.TypeModel"), $asm0E.TypeRef("ProtoBuf.Serializers.IProtoSerializer")]), 
      NullDecorator__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ExpectedType", 
      JSIL.MethodSignature.Return($asm14.TypeRef("System.Type")), 
      NullDecorator_get_ExpectedType
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_RequiresOldValue", 
      JSIL.MethodSignature.Return($.Boolean), 
      NullDecorator_get_RequiresOldValue
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ReturnsValue", 
      JSIL.MethodSignature.Return($.Boolean), 
      NullDecorator_get_ReturnsValue
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Object, [$.Object, $asm0E.TypeRef("ProtoBuf.ProtoReader")]), 
      NullDecorator_Read
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [$.Object, $asm0E.TypeRef("ProtoBuf.ProtoWriter")]), 
      NullDecorator_Write
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "expectedType", $asm14.TypeRef("System.Type"));

    $.Constant({Static:true , Public:true }, "Tag", $.Int32, 1);

    $.Property({Static:false, Public:true , Virtual:true }, "ExpectedType", $asm14.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "ReturnsValue", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "RequiresOldValue", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ProtoBuf.Serializers.ParseableSerializer */ 

(function ParseableSerializer$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm14.System.Reflection.MethodInfo)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm14.System.Reflection.MemberInfo)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm14.System.Type)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0E.ProtoBuf.Helpers)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm14.System.Boolean)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm14.System.Reflection.MethodBase)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm14.System.Object)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm0E.ProtoBuf.ProtoReader)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm0E.ProtoBuf.Meta.TypeModel)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize(System.Array.Of($asm14.System.Reflection.ParameterInfo))) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm14.System.ArgumentNullException)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize(System.Array.Of($asm14.System.Reflection.MethodInfo))) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm14.System.Reflection.BindingFlags)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm14.System.Int32)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm14.System.String)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm14.System.Reflection.ParameterInfo)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm0E.ProtoBuf.ProtoWriter)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm14.TypeRef("System.ArgumentNullException"), [$asm14.TypeRef("System.String")]))) ();
  };


  function ParseableSerializer__ctor (parse) {
    this.parse = parse;
  }; 

  function ParseableSerializer_get_ExpectedType () {
    return (this.parse).get_DeclaringType();
  }; 

  function ParseableSerializer_GetCustomToString (type) {
    var method = $T03().GetInstanceMethod(type, "ToString", $T03().EmptyTypes);
    var flag = (method === null) || 
    !method.get_IsPublic() || 
    method.get_IsStatic() || 
    (method.get_DeclaringType() !== type);
    if (flag) {
      var result = null;
    } else {
      result = method;
    }
    return result;
  }; 

  function ParseableSerializer_ProtoBuf_Serializers_IProtoSerializer_get_RequiresOldValue () {
    return false;
  }; 

  function ParseableSerializer_ProtoBuf_Serializers_IProtoSerializer_get_ReturnsValue () {
    return true;
  }; 

  function ParseableSerializer_Read (value, source) {
    return (this.parse).Invoke(null, JSIL.Array.New($T06(), [source.ReadString()]));
  }; 

  function ParseableSerializer_TryCreate (type, model) {
    var p = null;
    var flag = type === null;
    if (flag) {
      throw $S00().Construct("type");
    }
    var method = null;
    var methods = type.GetMethods($T0C().$Flags("DeclaredOnly", "Public", "Static"));

  $loop0: 
    for (var i = 0; i < (methods.length | 0); i = ((i + 1) | 0)) {
      var tmp = methods[i];
      var flag2 = !(!(tmp.get_Name() == "Parse") || 
        !tmp.get_IsPublic() || 
        !tmp.get_IsStatic() || 
        (tmp.get_DeclaringType() !== type) || 
        ((p = tmp.GetParameters()) === null) || 
        ((p.length | 0) !== 1)) && 
      ((p[0]).get_ParameterType() === $T0E().__Type__);
      if (flag2) {
        method = tmp;
        break $loop0;
      }
    }
    var flag3 = (method !== null) && 
    (method.get_ReturnType() === type);
    if (flag3) {
      var flag4 = $T03().IsValueType(type);
      if (flag4) {
        var toString = $thisType.GetCustomToString(type);
        var flag5 = (toString === null) || 
        (toString.get_ReturnType() !== model.MapType($T0E().__Type__));
        if (flag5) {
          var result = null;
          return result;
        }
      }
      result = new $thisType(method);
    } else {
      result = null;
    }
    return result;
  }; 

  function ParseableSerializer_Write (value, dest) {
    $T10().WriteString(value.toString(), dest);
  }; 

  JSIL.MakeType({
      BaseType: $asm14.TypeRef("System.Object"), 
      Name: "ProtoBuf.Serializers.ParseableSerializer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm14.TypeRef("System.Reflection.MethodInfo")), 
      ParseableSerializer__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ExpectedType", 
      JSIL.MethodSignature.Return($asm14.TypeRef("System.Type")), 
      ParseableSerializer_get_ExpectedType
    );

    $.Method({Static:true , Public:false}, "GetCustomToString", 
      new JSIL.MethodSignature($asm14.TypeRef("System.Reflection.MethodInfo"), [$asm14.TypeRef("System.Type")]), 
      ParseableSerializer_GetCustomToString
    );

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.get_RequiresOldValue", 
      JSIL.MethodSignature.Return($.Boolean), 
      ParseableSerializer_ProtoBuf_Serializers_IProtoSerializer_get_RequiresOldValue
    )
      .Overrides($asm0E.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "get_RequiresOldValue");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.get_ReturnsValue", 
      JSIL.MethodSignature.Return($.Boolean), 
      ParseableSerializer_ProtoBuf_Serializers_IProtoSerializer_get_ReturnsValue
    )
      .Overrides($asm0E.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "get_ReturnsValue");

    $.Method({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Object, [$.Object, $asm0E.TypeRef("ProtoBuf.ProtoReader")]), 
      ParseableSerializer_Read
    );

    $.Method({Static:true , Public:true }, "TryCreate", 
      new JSIL.MethodSignature($.Type, [$asm14.TypeRef("System.Type"), $asm0E.TypeRef("ProtoBuf.Meta.TypeModel")]), 
      ParseableSerializer_TryCreate
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [$.Object, $asm0E.TypeRef("ProtoBuf.ProtoWriter")]), 
      ParseableSerializer_Write
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "parse", $asm14.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:true , Virtual:true }, "ExpectedType", $asm14.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.RequiresOldValue", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.ReturnsValue", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm0E.TypeRef("ProtoBuf.Serializers.IProtoSerializer")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ProtoBuf.Serializers.PropertyDecorator */ 

(function PropertyDecorator$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0E.ProtoBuf.Meta.TypeModel)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm14.System.Type)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm14.System.Reflection.PropertyInfo)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0E.ProtoBuf.Serializers.IProtoSerializer)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm0E.ProtoBuf.Serializers.ProtoDecoratorBase)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm14.System.Reflection.MemberInfo)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm14.System.ArgumentNullException)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm14.System.Boolean)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm14.System.Reflection.FieldInfo)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm14.System.Reflection.MethodInfo)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm0E.ProtoBuf.Helpers)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm14.System.String)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm14.System.Reflection.MethodBase)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm14.System.Void)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm14.System.Object)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm0E.ProtoBuf.ProtoReader)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm14.System.InvalidOperationException)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm0E.ProtoBuf.ProtoWriter)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm14.TypeRef("System.ArgumentNullException"), [$asm14.TypeRef("System.String")]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm14.TypeRef("System.InvalidOperationException"), [$asm14.TypeRef("System.String")]))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm0E.ProtoBuf.Serializers.IProtoSerializer.get_RequiresOldValue)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm0E.ProtoBuf.Serializers.IProtoSerializer.Read)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm0E.ProtoBuf.Serializers.IProtoSerializer.get_ReturnsValue)) ();
  };
  var $IM03 = function () {
    return ($IM03 = JSIL.Memoize($asm0E.ProtoBuf.Serializers.IProtoSerializer.get_ExpectedType)) ();
  };
  var $IM04 = function () {
    return ($IM04 = JSIL.Memoize($asm0E.ProtoBuf.Serializers.IProtoSerializer.Write)) ();
  };


  function PropertyDecorator__ctor (model, forType, property, tail) {
    $T04().prototype._ctor.call(this, tail);
    this.forType = forType;
    this.property = property;
    $thisType.SanityCheck(
      model, 
      property, 
      tail, 
      /* ref */ new JSIL.MemberReference(this, "readOptionsWriteValue"), 
      true, 
      true
    );
    this.shadowSetter = $thisType.GetShadowSetter(model, property);
  }; 

  function PropertyDecorator_CanWrite (model, member) {
    if (member === null) {
      throw $S00().Construct("member");
    }
    var prop = $T02().$As(member);
    var flag2 = prop !== null;
    if (flag2) {
      var result = prop.get_CanWrite() || 
      ($thisType.GetShadowSetter(model, prop) !== null);
    } else {
      result = $T08().$Is(member);
    }
    return result;
  }; 

  function PropertyDecorator_get_ExpectedType () {
    return this.forType;
  }; 

  function PropertyDecorator_get_RequiresOldValue () {
    return true;
  }; 

  function PropertyDecorator_get_ReturnsValue () {
    return false;
  }; 

  function PropertyDecorator_GetShadowSetter (model, property) {
    var reflectedType = property.get_ReflectedType();
    var method = $T0A().GetInstanceMethod(
      reflectedType, 
      JSIL.ConcatString("Set", property.get_Name()), 
      JSIL.Array.New($T01(), [property.get_PropertyType()])
    );
    var flag = (method === null) || 
    !method.get_IsPublic() || 
    (method.get_ReturnType() !== model.MapType($T0D().__Type__));
    if (flag) {
      var result = null;
    } else {
      result = method;
    }
    return result;
  }; 

  function PropertyDecorator_Read (value, source) {
    var oldVal = (
      $IM00().Call(this.Tail, null)
         ? (this.property).GetValue(value, null)
         : null)
    ;
    var newVal = $IM01().Call(this.Tail, null, oldVal, source);
    if (this.readOptionsWriteValue && (newVal !== null)) {
      if (this.shadowSetter === null) {
        (this.property).SetValue(value, newVal, null);
      } else {
        (this.shadowSetter).Invoke(value, JSIL.Array.New($T0E(), [newVal]));
      }
    }
    return null;
  }; 

  function PropertyDecorator_SanityCheck (model, property, tail, /* ref */ writeValue, nonPublic, allowInternal) {
    var flag = property === null;
    if (flag) {
      throw $S00().Construct("property");
    }
    writeValue.set($IM02().Call(tail, null) && 
      (($thisType.GetShadowSetter(model, property) !== null) || 
        (property.get_CanWrite() && 
          ($T0A().GetSetMethod(property, nonPublic, allowInternal) !== null))));
    var flag2 = !property.get_CanRead() || 
    ($T0A().GetGetMethod(property, nonPublic, allowInternal) === null);
    if (flag2) {
      throw $S01().Construct("Cannot serialize property without a get accessor");
    }
    var flag3 = !writeValue.get() && 
    (!$IM00().Call(tail, null) || 
      $T0A().IsValueType($IM03().Call(tail, null)));
    if (flag3) {
      throw $S01().Construct(("Cannot apply changes to property " + (property.get_DeclaringType()).get_FullName() + "." + property.get_Name()));
    }
  }; 

  function PropertyDecorator_Write (value, dest) {
    value = (this.property).GetValue(value, null);
    var flag = value !== null;
    if (flag) {
      $IM04().Call(this.Tail, null, value, dest);
    }
  }; 

  JSIL.MakeType({
      BaseType: $asm0E.TypeRef("ProtoBuf.Serializers.ProtoDecoratorBase"), 
      Name: "ProtoBuf.Serializers.PropertyDecorator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0E.TypeRef("ProtoBuf.Meta.TypeModel"), $asm14.TypeRef("System.Type"), 
          $asm14.TypeRef("System.Reflection.PropertyInfo"), $asm0E.TypeRef("ProtoBuf.Serializers.IProtoSerializer")
        ]), 
      PropertyDecorator__ctor
    );

    $.Method({Static:true , Public:false}, "CanWrite", 
      new JSIL.MethodSignature($.Boolean, [$asm0E.TypeRef("ProtoBuf.Meta.TypeModel"), $asm14.TypeRef("System.Reflection.MemberInfo")]), 
      PropertyDecorator_CanWrite
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ExpectedType", 
      JSIL.MethodSignature.Return($asm14.TypeRef("System.Type")), 
      PropertyDecorator_get_ExpectedType
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_RequiresOldValue", 
      JSIL.MethodSignature.Return($.Boolean), 
      PropertyDecorator_get_RequiresOldValue
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ReturnsValue", 
      JSIL.MethodSignature.Return($.Boolean), 
      PropertyDecorator_get_ReturnsValue
    );

    $.Method({Static:true , Public:false}, "GetShadowSetter", 
      new JSIL.MethodSignature($asm14.TypeRef("System.Reflection.MethodInfo"), [$asm0E.TypeRef("ProtoBuf.Meta.TypeModel"), $asm14.TypeRef("System.Reflection.PropertyInfo")]), 
      PropertyDecorator_GetShadowSetter
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Object, [$.Object, $asm0E.TypeRef("ProtoBuf.ProtoReader")]), 
      PropertyDecorator_Read
    );

    $.Method({Static:true , Public:false}, "SanityCheck", 
      new JSIL.MethodSignature(null, [
          $asm0E.TypeRef("ProtoBuf.Meta.TypeModel"), $asm14.TypeRef("System.Reflection.PropertyInfo"), 
          $asm0E.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), 
          $.Boolean, $.Boolean
        ]), 
      PropertyDecorator_SanityCheck
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [$.Object, $asm0E.TypeRef("ProtoBuf.ProtoWriter")]), 
      PropertyDecorator_Write
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "property", $asm14.TypeRef("System.Reflection.PropertyInfo"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "forType", $asm14.TypeRef("System.Type"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "readOptionsWriteValue", $.Boolean);

    $.Field({Static:false, Public:false, ReadOnly:true }, "shadowSetter", $asm14.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:true , Virtual:true }, "ExpectedType", $asm14.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "RequiresOldValue", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "ReturnsValue", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ProtoBuf.Serializers.SByteSerializer */ 

(function SByteSerializer$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm14.System.SByte)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0E.ProtoBuf.Meta.TypeModel)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm14.System.Object)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0E.ProtoBuf.ProtoReader)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm0E.ProtoBuf.ProtoWriter)) ();
  };


  function SByteSerializer__ctor (model) {
  }; 

  function SByteSerializer_get_ExpectedType () {
    return $thisType.expectedType;
  }; 

  function SByteSerializer_ProtoBuf_Serializers_IProtoSerializer_get_RequiresOldValue () {
    return false;
  }; 

  function SByteSerializer_ProtoBuf_Serializers_IProtoSerializer_get_ReturnsValue () {
    return true;
  }; 

  function SByteSerializer_Read (value, source) {
    return $T00().$Box(source.ReadSByte());
  }; 

  function SByteSerializer_Write (value, dest) {
    $T04().WriteSByte($T00().$Cast(value), dest);
  }; 

  JSIL.MakeType({
      BaseType: $asm14.TypeRef("System.Object"), 
      Name: "ProtoBuf.Serializers.SByteSerializer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm0E.TypeRef("ProtoBuf.Meta.TypeModel")), 
      SByteSerializer__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ExpectedType", 
      JSIL.MethodSignature.Return($asm14.TypeRef("System.Type")), 
      SByteSerializer_get_ExpectedType
    );

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.get_RequiresOldValue", 
      JSIL.MethodSignature.Return($.Boolean), 
      SByteSerializer_ProtoBuf_Serializers_IProtoSerializer_get_RequiresOldValue
    )
      .Overrides($asm0E.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "get_RequiresOldValue");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.get_ReturnsValue", 
      JSIL.MethodSignature.Return($.Boolean), 
      SByteSerializer_ProtoBuf_Serializers_IProtoSerializer_get_ReturnsValue
    )
      .Overrides($asm0E.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "get_ReturnsValue");

    $.Method({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Object, [$.Object, $asm0E.TypeRef("ProtoBuf.ProtoReader")]), 
      SByteSerializer_Read
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [$.Object, $asm0E.TypeRef("ProtoBuf.ProtoWriter")]), 
      SByteSerializer_Write
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "expectedType", $asm14.TypeRef("System.Type"), function ($pi) {
        return $asm14.System.SByte.__Type__;
      });


    function SByteSerializer__cctor () {
      $thisType.expectedType = $T00().__Type__;
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      SByteSerializer__cctor
    );

    $.Property({Static:false, Public:true , Virtual:true }, "ExpectedType", $asm14.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.RequiresOldValue", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.ReturnsValue", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm0E.TypeRef("ProtoBuf.Serializers.IProtoSerializer")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ProtoBuf.Serializers.SingleSerializer */ 

(function SingleSerializer$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm14.System.Single)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0E.ProtoBuf.Meta.TypeModel)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm14.System.Object)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0E.ProtoBuf.ProtoReader)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm0E.ProtoBuf.ProtoWriter)) ();
  };


  function SingleSerializer__ctor (model) {
  }; 

  function SingleSerializer_get_ExpectedType () {
    return $thisType.expectedType;
  }; 

  function SingleSerializer_ProtoBuf_Serializers_IProtoSerializer_get_RequiresOldValue () {
    return false;
  }; 

  function SingleSerializer_ProtoBuf_Serializers_IProtoSerializer_get_ReturnsValue () {
    return true;
  }; 

  function SingleSerializer_Read (value, source) {
    return $T00().$Box(source.ReadSingle());
  }; 

  function SingleSerializer_Write (value, dest) {
    $T04().WriteSingle($T00().$Cast(value), dest);
  }; 

  JSIL.MakeType({
      BaseType: $asm14.TypeRef("System.Object"), 
      Name: "ProtoBuf.Serializers.SingleSerializer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm0E.TypeRef("ProtoBuf.Meta.TypeModel")), 
      SingleSerializer__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ExpectedType", 
      JSIL.MethodSignature.Return($asm14.TypeRef("System.Type")), 
      SingleSerializer_get_ExpectedType
    );

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.get_RequiresOldValue", 
      JSIL.MethodSignature.Return($.Boolean), 
      SingleSerializer_ProtoBuf_Serializers_IProtoSerializer_get_RequiresOldValue
    )
      .Overrides($asm0E.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "get_RequiresOldValue");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.get_ReturnsValue", 
      JSIL.MethodSignature.Return($.Boolean), 
      SingleSerializer_ProtoBuf_Serializers_IProtoSerializer_get_ReturnsValue
    )
      .Overrides($asm0E.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "get_ReturnsValue");

    $.Method({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Object, [$.Object, $asm0E.TypeRef("ProtoBuf.ProtoReader")]), 
      SingleSerializer_Read
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [$.Object, $asm0E.TypeRef("ProtoBuf.ProtoWriter")]), 
      SingleSerializer_Write
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "expectedType", $asm14.TypeRef("System.Type"), function ($pi) {
        return $asm14.System.Single.__Type__;
      });


    function SingleSerializer__cctor () {
      $thisType.expectedType = $T00().__Type__;
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      SingleSerializer__cctor
    );

    $.Property({Static:false, Public:true , Virtual:true }, "ExpectedType", $asm14.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.RequiresOldValue", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.ReturnsValue", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm0E.TypeRef("ProtoBuf.Serializers.IProtoSerializer")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ProtoBuf.Serializers.StringSerializer */ 

(function StringSerializer$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm14.System.String)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0E.ProtoBuf.Meta.TypeModel)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm14.System.Object)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0E.ProtoBuf.ProtoReader)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm0E.ProtoBuf.ProtoWriter)) ();
  };


  function StringSerializer__ctor (model) {
  }; 

  function StringSerializer_get_ExpectedType () {
    return $thisType.expectedType;
  }; 

  function StringSerializer_ProtoBuf_Serializers_IProtoSerializer_get_RequiresOldValue () {
    return false;
  }; 

  function StringSerializer_ProtoBuf_Serializers_IProtoSerializer_get_ReturnsValue () {
    return true;
  }; 

  function StringSerializer_Read (value, source) {
    return source.ReadString();
  }; 

  function StringSerializer_Write (value, dest) {
    $T04().WriteString($T00().$Cast(value), dest);
  }; 

  JSIL.MakeType({
      BaseType: $asm14.TypeRef("System.Object"), 
      Name: "ProtoBuf.Serializers.StringSerializer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm0E.TypeRef("ProtoBuf.Meta.TypeModel")), 
      StringSerializer__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ExpectedType", 
      JSIL.MethodSignature.Return($asm14.TypeRef("System.Type")), 
      StringSerializer_get_ExpectedType
    );

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.get_RequiresOldValue", 
      JSIL.MethodSignature.Return($.Boolean), 
      StringSerializer_ProtoBuf_Serializers_IProtoSerializer_get_RequiresOldValue
    )
      .Overrides($asm0E.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "get_RequiresOldValue");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.get_ReturnsValue", 
      JSIL.MethodSignature.Return($.Boolean), 
      StringSerializer_ProtoBuf_Serializers_IProtoSerializer_get_ReturnsValue
    )
      .Overrides($asm0E.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "get_ReturnsValue");

    $.Method({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Object, [$.Object, $asm0E.TypeRef("ProtoBuf.ProtoReader")]), 
      StringSerializer_Read
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [$.Object, $asm0E.TypeRef("ProtoBuf.ProtoWriter")]), 
      StringSerializer_Write
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "expectedType", $asm14.TypeRef("System.Type"), function ($pi) {
        return $asm14.System.String.__Type__;
      });


    function StringSerializer__cctor () {
      $thisType.expectedType = $T00().__Type__;
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      StringSerializer__cctor
    );

    $.Property({Static:false, Public:true , Virtual:true }, "ExpectedType", $asm14.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.RequiresOldValue", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.ReturnsValue", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm0E.TypeRef("ProtoBuf.Serializers.IProtoSerializer")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ProtoBuf.Serializers.SubItemSerializer */ 

(function SubItemSerializer$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm14.System.Type)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm14.System.Int32)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0E.ProtoBuf.Serializers.ISerializerProxy)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm14.System.Boolean)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm14.System.ArgumentNullException)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm14.System.Object)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm0E.ProtoBuf.ProtoReader)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm0E.ProtoBuf.ProtoWriter)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm0E.ProtoBuf.Meta.TypeModel_CallbackType)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm0E.ProtoBuf.SerializationContext)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm0E.ProtoBuf.Serializers.IProtoTypeSerializer)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm14.TypeRef("System.ArgumentNullException"), [$asm14.TypeRef("System.String")]))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm0E.ProtoBuf.Serializers.IProtoTypeSerializer.Callback)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm0E.ProtoBuf.Serializers.ISerializerProxy.get_Serializer)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm0E.ProtoBuf.Serializers.IProtoTypeSerializer.CanCreateInstance)) ();
  };
  var $IM03 = function () {
    return ($IM03 = JSIL.Memoize($asm0E.ProtoBuf.Serializers.IProtoTypeSerializer.CreateInstance)) ();
  };
  var $IM04 = function () {
    return ($IM04 = JSIL.Memoize($asm0E.ProtoBuf.Serializers.IProtoTypeSerializer.HasCallbacks)) ();
  };


  function SubItemSerializer__ctor (type, key, proxy, recursionCheck) {
    if (type === null) {
      throw $S00().Construct("type");
    }
    if (proxy === null) {
      throw $S00().Construct("proxy");
    }
    this.type = type;
    this.proxy = proxy;
    this.key = (key | 0);
    this.recursionCheck = recursionCheck;
  }; 

  function SubItemSerializer_ProtoBuf_Serializers_IProtoSerializer_get_ExpectedType () {
    return this.type;
  }; 

  function SubItemSerializer_ProtoBuf_Serializers_IProtoSerializer_get_RequiresOldValue () {
    return true;
  }; 

  function SubItemSerializer_ProtoBuf_Serializers_IProtoSerializer_get_ReturnsValue () {
    return true;
  }; 

  function SubItemSerializer_ProtoBuf_Serializers_IProtoSerializer_Read (value, source) {
    return $T06().ReadObject(value, this.key, source);
  }; 

  function SubItemSerializer_ProtoBuf_Serializers_IProtoSerializer_Write (value, dest) {
    if (this.recursionCheck) {
      $T07().WriteObject(value, this.key, dest);
    } else {
      $T07().WriteRecursionSafeObject(value, this.key, dest);
    }
  }; 

  function SubItemSerializer_ProtoBuf_Serializers_IProtoTypeSerializer_Callback (value, callbackType, context) {
    $IM00().Call($T0A().$Cast($IM01().Call(this.proxy, null)), null, value, callbackType, context);
  }; 

  function SubItemSerializer_ProtoBuf_Serializers_IProtoTypeSerializer_CanCreateInstance () {
    return $IM02().Call($T0A().$Cast($IM01().Call(this.proxy, null)), null);
  }; 

  function SubItemSerializer_ProtoBuf_Serializers_IProtoTypeSerializer_CreateInstance (source) {
    return $IM03().Call($T0A().$Cast($IM01().Call(this.proxy, null)), null, source);
  }; 

  function SubItemSerializer_ProtoBuf_Serializers_IProtoTypeSerializer_HasCallbacks (callbackType) {
    return $IM04().Call($T0A().$Cast($IM01().Call(this.proxy, null)), null, callbackType);
  }; 

  JSIL.MakeType({
      BaseType: $asm14.TypeRef("System.Object"), 
      Name: "ProtoBuf.Serializers.SubItemSerializer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm14.TypeRef("System.Type"), $.Int32, 
          $asm0E.TypeRef("ProtoBuf.Serializers.ISerializerProxy"), $.Boolean
        ]), 
      SubItemSerializer__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.get_ExpectedType", 
      JSIL.MethodSignature.Return($asm14.TypeRef("System.Type")), 
      SubItemSerializer_ProtoBuf_Serializers_IProtoSerializer_get_ExpectedType
    )
      .Overrides($asm0E.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "get_ExpectedType");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.get_RequiresOldValue", 
      JSIL.MethodSignature.Return($.Boolean), 
      SubItemSerializer_ProtoBuf_Serializers_IProtoSerializer_get_RequiresOldValue
    )
      .Overrides($asm0E.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "get_RequiresOldValue");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.get_ReturnsValue", 
      JSIL.MethodSignature.Return($.Boolean), 
      SubItemSerializer_ProtoBuf_Serializers_IProtoSerializer_get_ReturnsValue
    )
      .Overrides($asm0E.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "get_ReturnsValue");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.Read", 
      new JSIL.MethodSignature($.Object, [$.Object, $asm0E.TypeRef("ProtoBuf.ProtoReader")]), 
      SubItemSerializer_ProtoBuf_Serializers_IProtoSerializer_Read
    )
      .Overrides($asm0E.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "Read");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.Write", 
      new JSIL.MethodSignature(null, [$.Object, $asm0E.TypeRef("ProtoBuf.ProtoWriter")]), 
      SubItemSerializer_ProtoBuf_Serializers_IProtoSerializer_Write
    )
      .Overrides($asm0E.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "Write");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoTypeSerializer.Callback", 
      new JSIL.MethodSignature(null, [
          $.Object, $asm0E.TypeRef("ProtoBuf.Meta.TypeModel+CallbackType"), 
          $asm0E.TypeRef("ProtoBuf.SerializationContext")
        ]), 
      SubItemSerializer_ProtoBuf_Serializers_IProtoTypeSerializer_Callback
    )
      .Overrides($asm0E.TypeRef("ProtoBuf.Serializers.IProtoTypeSerializer"), "Callback");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoTypeSerializer.CanCreateInstance", 
      JSIL.MethodSignature.Return($.Boolean), 
      SubItemSerializer_ProtoBuf_Serializers_IProtoTypeSerializer_CanCreateInstance
    )
      .Overrides($asm0E.TypeRef("ProtoBuf.Serializers.IProtoTypeSerializer"), "CanCreateInstance");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoTypeSerializer.CreateInstance", 
      new JSIL.MethodSignature($.Object, [$asm0E.TypeRef("ProtoBuf.ProtoReader")]), 
      SubItemSerializer_ProtoBuf_Serializers_IProtoTypeSerializer_CreateInstance
    )
      .Overrides($asm0E.TypeRef("ProtoBuf.Serializers.IProtoTypeSerializer"), "CreateInstance");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoTypeSerializer.HasCallbacks", 
      new JSIL.MethodSignature($.Boolean, [$asm0E.TypeRef("ProtoBuf.Meta.TypeModel+CallbackType")]), 
      SubItemSerializer_ProtoBuf_Serializers_IProtoTypeSerializer_HasCallbacks
    )
      .Overrides($asm0E.TypeRef("ProtoBuf.Serializers.IProtoTypeSerializer"), "HasCallbacks");

    $.Field({Static:false, Public:false, ReadOnly:true }, "key", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "type", $asm14.TypeRef("System.Type"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "proxy", $asm0E.TypeRef("ProtoBuf.Serializers.ISerializerProxy"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "recursionCheck", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.ExpectedType", $asm14.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.RequiresOldValue", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.ReturnsValue", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm0E.TypeRef("ProtoBuf.Serializers.IProtoTypeSerializer"), 
      /* 1 */ $asm0E.TypeRef("ProtoBuf.Serializers.IProtoSerializer")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ProtoBuf.Serializers.SurrogateSerializer */ 

(function SurrogateSerializer$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0E.ProtoBuf.Meta.TypeModel)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm14.System.Type)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0E.ProtoBuf.Serializers.IProtoTypeSerializer)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm14.System.Boolean)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm14.System.Reflection.MethodInfo)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm14.System.InvalidOperationException)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm14.System.String)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize(System.Array.Of($asm14.System.Reflection.MethodInfo))) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm14.System.Reflection.BindingFlags)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm14.System.Int32)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize(System.Array.Of($asm14.System.Reflection.ParameterInfo))) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm14.System.Reflection.MethodBase)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm14.System.Reflection.ParameterInfo)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm0E.ProtoBuf.ProtoConverterAttribute)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm14.System.Reflection.MemberInfo)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm14.System.Object)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm0E.ProtoBuf.Meta.TypeModel_CallbackType)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm0E.ProtoBuf.SerializationContext)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm0E.ProtoBuf.ProtoReader)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm14.System.NotSupportedException)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize(System.Array.Of($asm14.System.Object))) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm0E.ProtoBuf.Serializers.IProtoSerializer)) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm0E.ProtoBuf.ProtoWriter)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm14.TypeRef("System.InvalidOperationException"), [$asm14.TypeRef("System.String")]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm14.TypeRef("System.NotSupportedException"), null))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm0E.ProtoBuf.Serializers.IProtoSerializer.Read)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm0E.ProtoBuf.Serializers.IProtoSerializer.Write)) ();
  };


  function SurrogateSerializer__ctor (model, forType, declaredType, rootTail) {
    this.forType = forType;
    this.declaredType = declaredType;
    this.rootTail = rootTail;
    this.toTail = this.GetConversion(model, true);
    this.fromTail = this.GetConversion(model, false);
  }; 

  function SurrogateSerializer_get_ExpectedType () {
    return this.forType;
  }; 

  function SurrogateSerializer_get_RequiresOldValue () {
    return true;
  }; 

  function SurrogateSerializer_get_ReturnsValue () {
    return false;
  }; 

  function SurrogateSerializer_GetConversion (model, toTail) {
    var op = new JSIL.BoxedVariable(null);
    var to = (
      toTail
         ? this.declaredType
         : this.forType)
    ;
    var from = (
      toTail
         ? this.forType
         : this.declaredType)
    ;
    var flag = $thisType.HasCast(
      model, 
      this.declaredType, 
      from, 
      to, 
      /* ref */ op
    ) || 
    $thisType.HasCast(
      model, 
      this.forType, 
      from, 
      to, 
      /* ref */ op
    );
    if (flag) {
      return op.get();
    }
    throw $S00().Construct(("No suitable conversion operator found for surrogate: " + (this.forType).get_FullName() + " / " + (this.declaredType).get_FullName()));
  }; 

  function SurrogateSerializer_HasCast (model, type, from, to, /* ref */ op) {
    var found = type.GetMethods($T08().$Flags("NonPublic", "Public", "Static"));
    var convertAttributeType = null;

  $loop0: 
    for (var i = 0; i < (found.length | 0); ) {
      var j = found[i];
      var flag = j.get_ReturnType() !== to;
      if (!flag) {
        var paramTypes = j.GetParameters();
        var flag2 = ((paramTypes.length | 0) === 1) && 
        ((paramTypes[0]).get_ParameterType() === from);
        if (flag2) {
          var flag3 = convertAttributeType === null;
          if (flag3) {
            convertAttributeType = model.MapType($T0D().__Type__, false);
            var flag4 = convertAttributeType === null;
            if (flag4) {
              break $loop0;
            }
          }
          var flag5 = j.IsDefined(convertAttributeType, true);
          if (flag5) {
            op.set(j);
            var result = true;
            return result;
          }
        }
      }
      var num = i;
      i = ((num + 1) | 0);
    }

    for (var k = 0; k < (found.length | 0); ) {
      var l = found[k];
      var flag6 = ((l.get_Name() != "op_Implicit") && 
        (l.get_Name() != "op_Explicit")) || 
      (l.get_ReturnType() !== to);
      if (!flag6) {
        paramTypes = l.GetParameters();
        var flag7 = ((paramTypes.length | 0) === 1) && 
        ((paramTypes[0]).get_ParameterType() === from);
        if (flag7) {
          op.set(l);
          result = true;
          return result;
        }
      }
      num = k;
      k = ((num + 1) | 0);
    }
    op.set(null);
    result = false;
    return result;
  }; 

  function SurrogateSerializer_ProtoBuf_Serializers_IProtoTypeSerializer_Callback (value, callbackType, context) {
  }; 

  function SurrogateSerializer_ProtoBuf_Serializers_IProtoTypeSerializer_CanCreateInstance () {
    return false;
  }; 

  function SurrogateSerializer_ProtoBuf_Serializers_IProtoTypeSerializer_CreateInstance (source) {
    throw $S01().Construct();
  }; 

  function SurrogateSerializer_ProtoBuf_Serializers_IProtoTypeSerializer_HasCallbacks (callbackType) {
    return false;
  }; 

  function SurrogateSerializer_Read (value, source) {
    var args = JSIL.Array.New($T0F(), [value]);
    value = (this.toTail).Invoke(null, args);
    args[0] = $IM00().Call(this.rootTail, null, value, source);
    return (this.fromTail).Invoke(null, args);
  }; 

  function SurrogateSerializer_Write (value, writer) {
    $IM01().Call(this.rootTail, null, (this.toTail).Invoke(null, JSIL.Array.New($T0F(), [value])), writer);
  }; 

  JSIL.MakeType({
      BaseType: $asm14.TypeRef("System.Object"), 
      Name: "ProtoBuf.Serializers.SurrogateSerializer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0E.TypeRef("ProtoBuf.Meta.TypeModel"), $asm14.TypeRef("System.Type"), 
          $asm14.TypeRef("System.Type"), $asm0E.TypeRef("ProtoBuf.Serializers.IProtoTypeSerializer")
        ]), 
      SurrogateSerializer__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ExpectedType", 
      JSIL.MethodSignature.Return($asm14.TypeRef("System.Type")), 
      SurrogateSerializer_get_ExpectedType
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_RequiresOldValue", 
      JSIL.MethodSignature.Return($.Boolean), 
      SurrogateSerializer_get_RequiresOldValue
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ReturnsValue", 
      JSIL.MethodSignature.Return($.Boolean), 
      SurrogateSerializer_get_ReturnsValue
    );

    $.Method({Static:false, Public:true }, "GetConversion", 
      new JSIL.MethodSignature($asm14.TypeRef("System.Reflection.MethodInfo"), [$asm0E.TypeRef("ProtoBuf.Meta.TypeModel"), $.Boolean]), 
      SurrogateSerializer_GetConversion
    );

    $.Method({Static:true , Public:false}, "HasCast", 
      new JSIL.MethodSignature($.Boolean, [
          $asm0E.TypeRef("ProtoBuf.Meta.TypeModel"), $asm14.TypeRef("System.Type"), 
          $asm14.TypeRef("System.Type"), $asm14.TypeRef("System.Type"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm14.TypeRef("System.Reflection.MethodInfo")])
        ]), 
      SurrogateSerializer_HasCast
    );

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoTypeSerializer.Callback", 
      new JSIL.MethodSignature(null, [
          $.Object, $asm0E.TypeRef("ProtoBuf.Meta.TypeModel+CallbackType"), 
          $asm0E.TypeRef("ProtoBuf.SerializationContext")
        ]), 
      SurrogateSerializer_ProtoBuf_Serializers_IProtoTypeSerializer_Callback
    )
      .Overrides($asm0E.TypeRef("ProtoBuf.Serializers.IProtoTypeSerializer"), "Callback");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoTypeSerializer.CanCreateInstance", 
      JSIL.MethodSignature.Return($.Boolean), 
      SurrogateSerializer_ProtoBuf_Serializers_IProtoTypeSerializer_CanCreateInstance
    )
      .Overrides($asm0E.TypeRef("ProtoBuf.Serializers.IProtoTypeSerializer"), "CanCreateInstance");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoTypeSerializer.CreateInstance", 
      new JSIL.MethodSignature($.Object, [$asm0E.TypeRef("ProtoBuf.ProtoReader")]), 
      SurrogateSerializer_ProtoBuf_Serializers_IProtoTypeSerializer_CreateInstance
    )
      .Overrides($asm0E.TypeRef("ProtoBuf.Serializers.IProtoTypeSerializer"), "CreateInstance");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoTypeSerializer.HasCallbacks", 
      new JSIL.MethodSignature($.Boolean, [$asm0E.TypeRef("ProtoBuf.Meta.TypeModel+CallbackType")]), 
      SurrogateSerializer_ProtoBuf_Serializers_IProtoTypeSerializer_HasCallbacks
    )
      .Overrides($asm0E.TypeRef("ProtoBuf.Serializers.IProtoTypeSerializer"), "HasCallbacks");

    $.Method({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Object, [$.Object, $asm0E.TypeRef("ProtoBuf.ProtoReader")]), 
      SurrogateSerializer_Read
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [$.Object, $asm0E.TypeRef("ProtoBuf.ProtoWriter")]), 
      SurrogateSerializer_Write
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "forType", $asm14.TypeRef("System.Type"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "declaredType", $asm14.TypeRef("System.Type"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "toTail", $asm14.TypeRef("System.Reflection.MethodInfo"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "fromTail", $asm14.TypeRef("System.Reflection.MethodInfo"));

    $.Field({Static:false, Public:false}, "rootTail", $asm0E.TypeRef("ProtoBuf.Serializers.IProtoTypeSerializer"));

    $.Property({Static:false, Public:true , Virtual:true }, "ReturnsValue", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "RequiresOldValue", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "ExpectedType", $asm14.TypeRef("System.Type"));

    $.ImplementInterfaces(
      /* 0 */ $asm0E.TypeRef("ProtoBuf.Serializers.IProtoTypeSerializer"), 
      /* 1 */ $asm0E.TypeRef("ProtoBuf.Serializers.IProtoSerializer")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ProtoBuf.Serializers.SystemTypeSerializer */ 

(function SystemTypeSerializer$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm14.System.Type)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0E.ProtoBuf.Meta.TypeModel)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm14.System.Object)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0E.ProtoBuf.ProtoReader)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm0E.ProtoBuf.ProtoWriter)) ();
  };


  function SystemTypeSerializer__ctor (model) {
  }; 

  function SystemTypeSerializer_get_ExpectedType () {
    return $thisType.expectedType;
  }; 

  function SystemTypeSerializer_ProtoBuf_Serializers_IProtoSerializer_get_RequiresOldValue () {
    return false;
  }; 

  function SystemTypeSerializer_ProtoBuf_Serializers_IProtoSerializer_get_ReturnsValue () {
    return true;
  }; 

  function SystemTypeSerializer_ProtoBuf_Serializers_IProtoSerializer_Read (value, source) {
    return source.ReadType();
  }; 

  function SystemTypeSerializer_ProtoBuf_Serializers_IProtoSerializer_Write (value, dest) {
    $T04().WriteType($T00().$Cast(value), dest);
  }; 

  JSIL.MakeType({
      BaseType: $asm14.TypeRef("System.Object"), 
      Name: "ProtoBuf.Serializers.SystemTypeSerializer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm0E.TypeRef("ProtoBuf.Meta.TypeModel")), 
      SystemTypeSerializer__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ExpectedType", 
      JSIL.MethodSignature.Return($asm14.TypeRef("System.Type")), 
      SystemTypeSerializer_get_ExpectedType
    );

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.get_RequiresOldValue", 
      JSIL.MethodSignature.Return($.Boolean), 
      SystemTypeSerializer_ProtoBuf_Serializers_IProtoSerializer_get_RequiresOldValue
    )
      .Overrides($asm0E.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "get_RequiresOldValue");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.get_ReturnsValue", 
      JSIL.MethodSignature.Return($.Boolean), 
      SystemTypeSerializer_ProtoBuf_Serializers_IProtoSerializer_get_ReturnsValue
    )
      .Overrides($asm0E.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "get_ReturnsValue");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.Read", 
      new JSIL.MethodSignature($.Object, [$.Object, $asm0E.TypeRef("ProtoBuf.ProtoReader")]), 
      SystemTypeSerializer_ProtoBuf_Serializers_IProtoSerializer_Read
    )
      .Overrides($asm0E.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "Read");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.Write", 
      new JSIL.MethodSignature(null, [$.Object, $asm0E.TypeRef("ProtoBuf.ProtoWriter")]), 
      SystemTypeSerializer_ProtoBuf_Serializers_IProtoSerializer_Write
    )
      .Overrides($asm0E.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "Write");

    $.Field({Static:true , Public:false, ReadOnly:true }, "expectedType", $asm14.TypeRef("System.Type"), function ($pi) {
        return $asm14.System.Type.__Type__;
      });


    function SystemTypeSerializer__cctor () {
      $thisType.expectedType = $T00().__Type__;
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      SystemTypeSerializer__cctor
    );

    $.Property({Static:false, Public:true , Virtual:true }, "ExpectedType", $asm14.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.RequiresOldValue", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.ReturnsValue", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm0E.TypeRef("ProtoBuf.Serializers.IProtoSerializer")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ProtoBuf.Serializers.TagDecorator */ 

(function TagDecorator$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm14.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0E.ProtoBuf.WireType)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm14.System.Boolean)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0E.ProtoBuf.Serializers.IProtoSerializer)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm0E.ProtoBuf.Serializers.ProtoDecoratorBase)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm14.System.Object)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm0E.ProtoBuf.Meta.TypeModel_CallbackType)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm0E.ProtoBuf.SerializationContext)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm0E.ProtoBuf.Serializers.IProtoTypeSerializer)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm0E.ProtoBuf.ProtoReader)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm0E.ProtoBuf.ProtoWriter)) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm0E.ProtoBuf.Serializers.IProtoTypeSerializer.Callback)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm0E.ProtoBuf.Serializers.IProtoTypeSerializer.CanCreateInstance)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm0E.ProtoBuf.Serializers.IProtoTypeSerializer.CreateInstance)) ();
  };
  var $IM03 = function () {
    return ($IM03 = JSIL.Memoize($asm0E.ProtoBuf.Serializers.IProtoSerializer.get_ExpectedType)) ();
  };
  var $IM04 = function () {
    return ($IM04 = JSIL.Memoize($asm0E.ProtoBuf.Serializers.IProtoSerializer.get_RequiresOldValue)) ();
  };
  var $IM05 = function () {
    return ($IM05 = JSIL.Memoize($asm0E.ProtoBuf.Serializers.IProtoSerializer.get_ReturnsValue)) ();
  };
  var $IM06 = function () {
    return ($IM06 = JSIL.Memoize($asm0E.ProtoBuf.Serializers.IProtoTypeSerializer.HasCallbacks)) ();
  };
  var $IM07 = function () {
    return ($IM07 = JSIL.Memoize($asm0E.ProtoBuf.Serializers.IProtoSerializer.Read)) ();
  };
  var $IM08 = function () {
    return ($IM08 = JSIL.Memoize($asm0E.ProtoBuf.Serializers.IProtoSerializer.Write)) ();
  };


  function TagDecorator__ctor (fieldNumber, wireType, strict, tail) {
    $T04().prototype._ctor.call(this, tail);
    this.fieldNumber = (fieldNumber | 0);
    this.wireType = wireType;
    this.strict = strict;
  }; 

  function TagDecorator_Callback (value, callbackType, context) {
    if ($T08().$As(this.Tail) !== null) {
      $IM00().Call($T08().$As(this.Tail), null, value, callbackType, context);
    }
  }; 

  function TagDecorator_CanCreateInstance () {
    var pts = $T08().$As(this.Tail);
    return ((pts !== null) && $IM01().Call(pts, null));
  }; 

  function TagDecorator_CreateInstance (source) {
    return $IM02().Call($T08().$Cast(this.Tail), null, source);
  }; 

  function TagDecorator_get_ExpectedType () {
    return $IM03().Call(this.Tail, null);
  }; 

  function TagDecorator_get_NeedsHint () {
    return ($T01().$Cast(this.wireType & $T01().$Cast(-8)) > $T01().Variant);
  }; 

  function TagDecorator_get_RequiresOldValue () {
    return $IM04().Call(this.Tail, null);
  }; 

  function TagDecorator_get_ReturnsValue () {
    return $IM05().Call(this.Tail, null);
  }; 

  function TagDecorator_HasCallbacks (callbackType) {
    var pts = $T08().$As(this.Tail);
    return ((pts !== null) && $IM06().Call(pts, null, callbackType));
  }; 

  function TagDecorator_Read (value, source) {
    if (this.strict) {
      source.Assert(this.wireType);
    } else {
      var needsHint = this.get_NeedsHint();
      if (needsHint) {
        source.Hint(this.wireType);
      }
    }
    return $IM07().Call(this.Tail, null, value, source);
  }; 

  function TagDecorator_Write (value, dest) {
    $T0A().WriteFieldHeader(this.fieldNumber, this.wireType, dest);
    $IM08().Call(this.Tail, null, value, dest);
  }; 

  JSIL.MakeType({
      BaseType: $asm0E.TypeRef("ProtoBuf.Serializers.ProtoDecoratorBase"), 
      Name: "ProtoBuf.Serializers.TagDecorator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $asm0E.TypeRef("ProtoBuf.WireType"), 
          $.Boolean, $asm0E.TypeRef("ProtoBuf.Serializers.IProtoSerializer")
        ]), 
      TagDecorator__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Callback", 
      new JSIL.MethodSignature(null, [
          $.Object, $asm0E.TypeRef("ProtoBuf.Meta.TypeModel+CallbackType"), 
          $asm0E.TypeRef("ProtoBuf.SerializationContext")
        ]), 
      TagDecorator_Callback
    );

    $.Method({Static:false, Public:true , Virtual:true }, "CanCreateInstance", 
      JSIL.MethodSignature.Return($.Boolean), 
      TagDecorator_CanCreateInstance
    );

    $.Method({Static:false, Public:true , Virtual:true }, "CreateInstance", 
      new JSIL.MethodSignature($.Object, [$asm0E.TypeRef("ProtoBuf.ProtoReader")]), 
      TagDecorator_CreateInstance
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ExpectedType", 
      JSIL.MethodSignature.Return($asm14.TypeRef("System.Type")), 
      TagDecorator_get_ExpectedType
    );

    $.Method({Static:false, Public:false}, "get_NeedsHint", 
      JSIL.MethodSignature.Return($.Boolean), 
      TagDecorator_get_NeedsHint
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_RequiresOldValue", 
      JSIL.MethodSignature.Return($.Boolean), 
      TagDecorator_get_RequiresOldValue
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ReturnsValue", 
      JSIL.MethodSignature.Return($.Boolean), 
      TagDecorator_get_ReturnsValue
    );

    $.Method({Static:false, Public:true , Virtual:true }, "HasCallbacks", 
      new JSIL.MethodSignature($.Boolean, [$asm0E.TypeRef("ProtoBuf.Meta.TypeModel+CallbackType")]), 
      TagDecorator_HasCallbacks
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Object, [$.Object, $asm0E.TypeRef("ProtoBuf.ProtoReader")]), 
      TagDecorator_Read
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [$.Object, $asm0E.TypeRef("ProtoBuf.ProtoWriter")]), 
      TagDecorator_Write
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "strict", $.Boolean);

    $.Field({Static:false, Public:false, ReadOnly:true }, "fieldNumber", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "wireType", $asm0E.TypeRef("ProtoBuf.WireType"));

    $.Property({Static:false, Public:true , Virtual:true }, "ExpectedType", $asm14.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "RequiresOldValue", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "ReturnsValue", $.Boolean);

    $.Property({Static:false, Public:false}, "NeedsHint", $.Boolean);

    $.ImplementInterfaces(
      /* 1 */ $asm0E.TypeRef("ProtoBuf.Serializers.IProtoTypeSerializer")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ProtoBuf.Serializers.TimeSpanSerializer */ 

(function TimeSpanSerializer$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm14.System.TimeSpan)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0E.ProtoBuf.Meta.TypeModel)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm14.System.Object)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0E.ProtoBuf.ProtoReader)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm0E.ProtoBuf.BclHelpers)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm0E.ProtoBuf.ProtoWriter)) ();
  };


  function TimeSpanSerializer__ctor (model) {
  }; 

  function TimeSpanSerializer_get_ExpectedType () {
    return $thisType.expectedType;
  }; 

  function TimeSpanSerializer_ProtoBuf_Serializers_IProtoSerializer_get_RequiresOldValue () {
    return false;
  }; 

  function TimeSpanSerializer_ProtoBuf_Serializers_IProtoSerializer_get_ReturnsValue () {
    return true;
  }; 

  function TimeSpanSerializer_Read (value, source) {
    return $T04().ReadTimeSpan(source);
  }; 

  function TimeSpanSerializer_Write (value, dest) {
    $T04().WriteTimeSpan($T00().$Cast(value).MemberwiseClone(), dest);
  }; 

  JSIL.MakeType({
      BaseType: $asm14.TypeRef("System.Object"), 
      Name: "ProtoBuf.Serializers.TimeSpanSerializer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm0E.TypeRef("ProtoBuf.Meta.TypeModel")), 
      TimeSpanSerializer__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ExpectedType", 
      JSIL.MethodSignature.Return($asm14.TypeRef("System.Type")), 
      TimeSpanSerializer_get_ExpectedType
    );

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.get_RequiresOldValue", 
      JSIL.MethodSignature.Return($.Boolean), 
      TimeSpanSerializer_ProtoBuf_Serializers_IProtoSerializer_get_RequiresOldValue
    )
      .Overrides($asm0E.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "get_RequiresOldValue");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.get_ReturnsValue", 
      JSIL.MethodSignature.Return($.Boolean), 
      TimeSpanSerializer_ProtoBuf_Serializers_IProtoSerializer_get_ReturnsValue
    )
      .Overrides($asm0E.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "get_ReturnsValue");

    $.Method({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Object, [$.Object, $asm0E.TypeRef("ProtoBuf.ProtoReader")]), 
      TimeSpanSerializer_Read
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [$.Object, $asm0E.TypeRef("ProtoBuf.ProtoWriter")]), 
      TimeSpanSerializer_Write
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "expectedType", $asm14.TypeRef("System.Type"), function ($pi) {
        return $asm14.System.TimeSpan.__Type__;
      });


    function TimeSpanSerializer__cctor () {
      $thisType.expectedType = $T00().__Type__;
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      TimeSpanSerializer__cctor
    );

    $.Property({Static:false, Public:true , Virtual:true }, "ExpectedType", $asm14.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.RequiresOldValue", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.ReturnsValue", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm0E.TypeRef("ProtoBuf.Serializers.IProtoSerializer")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ProtoBuf.Serializers.TupleSerializer */ 

(function TupleSerializer$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0E.ProtoBuf.Meta.RuntimeTypeModel)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm14.System.Reflection.ConstructorInfo)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize(System.Array.Of($asm14.System.Reflection.MemberInfo))) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0E.ProtoBuf.WireType)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm14.System.Boolean)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm14.System.ArgumentNullException)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm0E.ProtoBuf.Serializers.IProtoSerializer)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize(System.Array.Of($asm14.System.Reflection.ParameterInfo))) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm14.System.Reflection.MethodBase)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm14.System.Int32)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm14.System.Type)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm14.System.Reflection.ParameterInfo)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm0E.ProtoBuf.Meta.MetaType)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm0E.ProtoBuf.Meta.ValueMember)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm0E.ProtoBuf.DataFormat)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm14.System.InvalidOperationException)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm14.System.String)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm0E.ProtoBuf.Serializers.TagDecorator)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm0E.ProtoBuf.Serializers.ArrayDecorator)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm0E.ProtoBuf.Serializers.ListDecorator)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm14.System.Reflection.MemberInfo)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm0E.ProtoBuf.Helpers)) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm14.System.Object)) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm14.System.Reflection.PropertyInfo)) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize($asm14.System.Reflection.FieldInfo)) ();
  };
  var $T19 = function () {
    return ($T19 = JSIL.Memoize($asm14.System.Activator)) ();
  };
  var $T1A = function () {
    return ($T1A = JSIL.Memoize($asm0E.ProtoBuf.Meta.TypeModel_CallbackType)) ();
  };
  var $T1B = function () {
    return ($T1B = JSIL.Memoize($asm0E.ProtoBuf.SerializationContext)) ();
  };
  var $T1C = function () {
    return ($T1C = JSIL.Memoize($asm0E.ProtoBuf.ProtoReader)) ();
  };
  var $T1D = function () {
    return ($T1D = JSIL.Memoize($asm14.System.NotSupportedException)) ();
  };
  var $T1E = function () {
    return ($T1E = JSIL.Memoize(System.Array.Of($asm14.System.Object))) ();
  };
  var $T1F = function () {
    return ($T1F = JSIL.Memoize(System.Array.Of($asm0E.ProtoBuf.Serializers.IProtoSerializer))) ();
  };
  var $T20 = function () {
    return ($T20 = JSIL.Memoize($asm0E.ProtoBuf.ProtoWriter)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm14.TypeRef("System.ArgumentNullException"), [$asm14.TypeRef("System.String")]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm14.TypeRef("System.InvalidOperationException"), [$asm14.TypeRef("System.String")]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm14.TypeRef("System.InvalidOperationException"), null))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.MethodSignature($asm14.TypeRef("System.Object"), [$asm14.TypeRef("System.Type")]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.ConstructorSignature($asm14.TypeRef("System.NotSupportedException"), null))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm0E.ProtoBuf.Serializers.IProtoSerializer.Read)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm0E.ProtoBuf.Serializers.IProtoSerializer.get_RequiresOldValue)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm0E.ProtoBuf.Serializers.IProtoSerializer.Write)) ();
  };


  function TupleSerializer__ctor (model, ctor, members) {
    var wireType = new JSIL.BoxedVariable($asm0E.ProtoBuf.WireType.Variant);
    var flag = ctor === null;
    if (flag) {
      throw $S00().Construct("ctor");
    }
    if (members === null) {
      throw $S00().Construct("members");
    }
    this.ctor = ctor;
    this.members = members;
    this.tails = JSIL.Array.New($T06(), members.length);
    var parameters = ctor.GetParameters();
    var i = 0;
    var itemType = new JSIL.BoxedVariable(null);
    var defaultType = new JSIL.BoxedVariable(null);

    while (i < (members.length | 0)) {
      var finalType = (parameters[i]).get_ParameterType();
      itemType.set(null);
      defaultType.set(null);
      $T0C().ResolveListTypes(model, finalType, /* ref */ itemType, /* ref */ defaultType);
      var tmp = (
        (itemType.get() === null)
           ? finalType
           : itemType.get())
      ;
      var asReference = false;
      var typeIndex = (model.FindOrAddAuto(tmp, false, true, false) | 0);
      var flag3 = typeIndex >= 0;
      if (flag3) {
        asReference = (model.get_Item(tmp)).get_AsReferenceDefault();
      }
      var tail = $T0D().TryGetCoreSerializer(
        model, 
        $T0E().Default, 
        tmp, 
        /* ref */ wireType, 
        asReference, 
        false, 
        false, 
        true
      );
      var flag4 = tail === null;
      if (flag4) {
        throw $S01().Construct(JSIL.ConcatString("No serializer defined for type: ", tmp.get_FullName()));
      }
      tail = new ($T11())(((i + 1) | 0), wireType.get(), false, tail);
      var flag5 = itemType.get() === null;
      if (flag5) {
        var serializer = tail;
      } else {
        var isArray = finalType.get_IsArray();
        if (isArray) {
          serializer = new ($T12())(model, tail, ((i + 1) | 0), false, wireType.get(), finalType, false, false);
        } else {
          serializer = $T13().Create(
            model, 
            finalType, 
            defaultType.get(), 
            tail, 
            ((i + 1) | 0), 
            false, 
            wireType.get(), 
            true, 
            false, 
            false
          );
        }
      }
      this.tails[i] = serializer;
      var num = i;
      i = ((num + 1) | 0);
    }
  }; 

  function TupleSerializer_get_ExpectedType () {
    return (this.ctor).get_DeclaringType();
  }; 

  function TupleSerializer_get_RequiresOldValue () {
    return true;
  }; 

  function TupleSerializer_get_ReturnsValue () {
    return false;
  }; 

  function TupleSerializer_GetMemberType (index) {
    var result = $T15().GetMemberType(this.members[index]);
    if (result === null) {
      throw $S02().Construct();
    }
    return result;
  }; 

  function TupleSerializer_GetValue (obj, index) {
    var prop = null, field = null;
    var flag = (prop = $T17().$As(this.members[index])) !== null;
    if (flag) {
      if (obj === null) {
        var result = (
          $T15().IsValueType(prop.get_PropertyType())
             ? $S03().CallStatic($T19(), "CreateInstance", null, prop.get_PropertyType())
             : null)
        ;
      } else {
        result = prop.GetValue(obj, null);
      }
    } else {
      var flag3 = (field = $T18().$As(this.members[index])) !== null;
      if (!flag3) {
        throw $S02().Construct();
      }
      if (obj === null) {
        result = (
          $T15().IsValueType(field.get_FieldType())
             ? $S03().CallStatic($T19(), "CreateInstance", null, field.get_FieldType())
             : null)
        ;
      } else {
        result = field.GetValue(obj);
      }
    }
    return result;
  }; 

  function TupleSerializer_HasCallbacks (callbackType) {
    return false;
  }; 

  function TupleSerializer_ProtoBuf_Serializers_IProtoTypeSerializer_Callback (value, callbackType, context) {
  }; 

  function TupleSerializer_ProtoBuf_Serializers_IProtoTypeSerializer_CanCreateInstance () {
    return false;
  }; 

  function TupleSerializer_ProtoBuf_Serializers_IProtoTypeSerializer_CreateInstance (source) {
    throw $S04().Construct();
  }; 

  function TupleSerializer_Read (value, source) {
    var field = 0;
    var values = JSIL.Array.New($T16(), this.members.length);
    var invokeCtor = false;
    if (value === null) {
      invokeCtor = true;
    }

    for (var i = 0; i < (values.length | 0); ) {
      values[i] = this.GetValue(value, i);
      var num = i;
      i = ((num + 1) | 0);
    }

    while ((field = (source.ReadFieldHeader() | 0)) > 0) {
      invokeCtor = true;
      var flag2 = field <= (this.tails.length | 0);
      if (flag2) {
        var tail = this.tails[((field - 1) | 0)];
        values[((field - 1) | 0)] = $IM00().Call(this.tails[((field - 1) | 0)], null, (
            $IM01().Call(tail, null)
               ? values[((field - 1) | 0)]
               : null)
          , source);
      } else {
        source.SkipField();
      }
    }
    return (
      invokeCtor
         ? (this.ctor).Invoke(values)
         : value)
    ;
  }; 

  function TupleSerializer_Write (value, dest) {

    for (var i = 0; i < (this.tails.length | 0); ) {
      var val = this.GetValue(value, i);
      if (val !== null) {
        $IM02().Call(this.tails[i], null, val, dest);
      }
      var num = i;
      i = ((num + 1) | 0);
    }
  }; 

  JSIL.MakeType({
      BaseType: $asm14.TypeRef("System.Object"), 
      Name: "ProtoBuf.Serializers.TupleSerializer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0E.TypeRef("ProtoBuf.Meta.RuntimeTypeModel"), $asm14.TypeRef("System.Reflection.ConstructorInfo"), 
          $jsilcore.TypeRef("System.Array", [$asm14.TypeRef("System.Reflection.MemberInfo")])
        ]), 
      TupleSerializer__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ExpectedType", 
      JSIL.MethodSignature.Return($asm14.TypeRef("System.Type")), 
      TupleSerializer_get_ExpectedType
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_RequiresOldValue", 
      JSIL.MethodSignature.Return($.Boolean), 
      TupleSerializer_get_RequiresOldValue
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ReturnsValue", 
      JSIL.MethodSignature.Return($.Boolean), 
      TupleSerializer_get_ReturnsValue
    );

    $.Method({Static:false, Public:false}, "GetMemberType", 
      new JSIL.MethodSignature($asm14.TypeRef("System.Type"), [$.Int32]), 
      TupleSerializer_GetMemberType
    );

    $.Method({Static:false, Public:false}, "GetValue", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Int32]), 
      TupleSerializer_GetValue
    );

    $.Method({Static:false, Public:true , Virtual:true }, "HasCallbacks", 
      new JSIL.MethodSignature($.Boolean, [$asm0E.TypeRef("ProtoBuf.Meta.TypeModel+CallbackType")]), 
      TupleSerializer_HasCallbacks
    );

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoTypeSerializer.Callback", 
      new JSIL.MethodSignature(null, [
          $.Object, $asm0E.TypeRef("ProtoBuf.Meta.TypeModel+CallbackType"), 
          $asm0E.TypeRef("ProtoBuf.SerializationContext")
        ]), 
      TupleSerializer_ProtoBuf_Serializers_IProtoTypeSerializer_Callback
    )
      .Overrides($asm0E.TypeRef("ProtoBuf.Serializers.IProtoTypeSerializer"), "Callback");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoTypeSerializer.CanCreateInstance", 
      JSIL.MethodSignature.Return($.Boolean), 
      TupleSerializer_ProtoBuf_Serializers_IProtoTypeSerializer_CanCreateInstance
    )
      .Overrides($asm0E.TypeRef("ProtoBuf.Serializers.IProtoTypeSerializer"), "CanCreateInstance");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoTypeSerializer.CreateInstance", 
      new JSIL.MethodSignature($.Object, [$asm0E.TypeRef("ProtoBuf.ProtoReader")]), 
      TupleSerializer_ProtoBuf_Serializers_IProtoTypeSerializer_CreateInstance
    )
      .Overrides($asm0E.TypeRef("ProtoBuf.Serializers.IProtoTypeSerializer"), "CreateInstance");

    $.Method({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Object, [$.Object, $asm0E.TypeRef("ProtoBuf.ProtoReader")]), 
      TupleSerializer_Read
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [$.Object, $asm0E.TypeRef("ProtoBuf.ProtoWriter")]), 
      TupleSerializer_Write
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "members", $jsilcore.TypeRef("System.Array", [$asm14.TypeRef("System.Reflection.MemberInfo")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "ctor", $asm14.TypeRef("System.Reflection.ConstructorInfo"));

    $.Field({Static:false, Public:false}, "tails", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("ProtoBuf.Serializers.IProtoSerializer")]));

    $.Property({Static:false, Public:true , Virtual:true }, "ExpectedType", $asm14.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "RequiresOldValue", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "ReturnsValue", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm0E.TypeRef("ProtoBuf.Serializers.IProtoTypeSerializer"), 
      /* 1 */ $asm0E.TypeRef("ProtoBuf.Serializers.IProtoSerializer")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ProtoBuf.Serializers.TypeSerializer */ 

(function TypeSerializer$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0E.ProtoBuf.IExtensible)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0E.ProtoBuf.Meta.TypeModel)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm14.System.Type)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize(System.Array.Of($asm14.System.Int32))) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize(System.Array.Of($asm0E.ProtoBuf.Serializers.IProtoSerializer))) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize(System.Array.Of($asm14.System.Reflection.MethodInfo))) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm14.System.Boolean)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm0E.ProtoBuf.Meta.CallbackSet)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm14.System.Reflection.MethodInfo)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm0E.ProtoBuf.Helpers)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize(System.Array.Of($asm14.System.Object))) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm14.System.Int32)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm14.System.InvalidOperationException)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm14.System.String)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm0E.ProtoBuf.Serializers.IProtoSerializer)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm14.System.ArgumentException)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm14.System.NotSupportedException)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm14.System.Object)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm0E.ProtoBuf.Meta.TypeModel_CallbackType)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm0E.ProtoBuf.SerializationContext)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm0E.ProtoBuf.Serializers.IProtoTypeSerializer)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm0E.ProtoBuf.ProtoReader)) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm14.System.Activator)) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm0E.ProtoBuf.BclHelpers)) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize(System.Array.Of($asm14.System.Reflection.ParameterInfo))) ();
  };
  var $T19 = function () {
    return ($T19 = JSIL.Memoize($asm14.System.Reflection.MethodBase)) ();
  };
  var $T1A = function () {
    return ($T1A = JSIL.Memoize($asm14.System.Reflection.ParameterInfo)) ();
  };
  var $T1B = function () {
    return ($T1B = JSIL.Memoize($asm0E.ProtoBuf.ProtoWriter)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm14.TypeRef("System.InvalidOperationException"), [$asm14.TypeRef("System.String")]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm14.TypeRef("System.ArgumentException"), [$asm14.TypeRef("System.String"), $asm14.TypeRef("System.String")]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm14.TypeRef("System.NotSupportedException"), [$asm14.TypeRef("System.String")]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.MethodSignature($asm14.TypeRef("System.Object"), [$asm14.TypeRef("System.Type")]))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm0E.ProtoBuf.Serializers.IProtoSerializer.get_ExpectedType)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm0E.ProtoBuf.Serializers.IProtoTypeSerializer.Callback)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm0E.ProtoBuf.Serializers.IProtoTypeSerializer.HasCallbacks)) ();
  };
  var $IM03 = function () {
    return ($IM03 = JSIL.Memoize($asm0E.ProtoBuf.Serializers.IProtoTypeSerializer.CanCreateInstance)) ();
  };
  var $IM04 = function () {
    return ($IM04 = JSIL.Memoize($asm0E.ProtoBuf.Serializers.IProtoTypeSerializer.CreateInstance)) ();
  };
  var $IM05 = function () {
    return ($IM05 = JSIL.Memoize($asm0E.ProtoBuf.Serializers.IProtoSerializer.get_ReturnsValue)) ();
  };
  var $IM06 = function () {
    return ($IM06 = JSIL.Memoize($asm0E.ProtoBuf.Serializers.IProtoSerializer.Read)) ();
  };
  var $IM07 = function () {
    return ($IM07 = JSIL.Memoize($asm0E.ProtoBuf.Serializers.IProtoSerializer.Write)) ();
  };


  function TypeSerializer__ctor (model, forType, fieldNumbers, serializers, baseCtorCallbacks, isRootType, useConstructor, callbacks, constructType, factory) {
    $T09().Sort(fieldNumbers, $T0A().$Cast(serializers));
    var hasSubTypes = false;

    for (var i = 1; i < (fieldNumbers.length | 0); ) {
      var flag = (fieldNumbers[i] | 0) === (fieldNumbers[((i - 1) | 0)] | 0);
      if (flag) {
        throw $S00().Construct(("Duplicate field-number detected; " + (fieldNumbers[i]).toString() + " on: " + forType.get_FullName()));
      }
      var flag2 = !hasSubTypes && 
      ($IM00().Call(serializers[i], null) !== forType);
      if (flag2) {
        hasSubTypes = true;
      }
      var num = i;
      i = ((num + 1) | 0);
    }
    this.forType = forType;
    this.factory = factory;
    var flag3 = constructType === null;
    if (flag3) {
      constructType = forType;
    } else {
      var flag4 = !forType.IsAssignableFrom(constructType);
      if (flag4) {
        throw $S00().Construct((forType.get_FullName() + " cannot be assigned from " + constructType.get_FullName()));
      }
    }
    this.constructType = constructType;
    this.serializers = serializers;
    this.fieldNumbers = fieldNumbers;
    this.callbacks = callbacks;
    this.isRootType = isRootType;
    this.useConstructor = useConstructor;
    var flag5 = (baseCtorCallbacks !== null) && 
    ((baseCtorCallbacks.length | 0) === 0);
    if (flag5) {
      baseCtorCallbacks = null;
    }
    this.baseCtorCallbacks = baseCtorCallbacks;
    var flag6 = $T09().GetUnderlyingType(forType) !== null;
    if (flag6) {
      throw $S01().Construct("Cannot create a TypeSerializer for nullable types", "forType");
    }
    var flag7 = (model.MapType($thisType.iextensible)).IsAssignableFrom(forType);
    if (flag7) {
      var flag8 = (forType.get_IsValueType() || 
        !isRootType) | hasSubTypes;
      if (flag8) {
        throw $S02().Construct("IExtensible is not supported in structs or classes with inheritance");
      }
      this.isExtensible = true;
    }
    this.hasConstructor = !constructType.get_IsAbstract() && 
    ($T09().GetConstructor(constructType, $T09().EmptyTypes, true) !== null);
    var flag9 = ((constructType !== forType) & useConstructor) && 
    !this.hasConstructor;
    if (flag9) {
      throw $S01().Construct(JSIL.ConcatString("The supplied default implementation cannot be created: ", constructType.get_FullName()), "constructType");
    }
  }; 

  function TypeSerializer_Callback (value, callbackType, context) {
    if (this.callbacks !== null) {
      this.InvokeCallback((this.callbacks).get_Item(callbackType), value, context);
    }
    var ser = $T14().$Cast(this.GetMoreSpecificSerializer(value));
    var flag2 = ser !== null;
    if (flag2) {
      $IM01().Call(ser, null, value, callbackType, context);
    }
  }; 

  function TypeSerializer_CreateInstance (source, includeLocalCallback) {
    if (this.factory !== null) {
      var obj = this.InvokeCallback(this.factory, null, source.get_Context());
    } else {
      if (this.useConstructor) {
        if (!this.hasConstructor) {
          $T01().ThrowCannotCreateInstance(this.constructType);
        }
        obj = $S03().CallStatic($T16(), "CreateInstance", null, this.constructType);
      } else {
        obj = $T17().GetUninitializedObject(this.constructType);
      }
    }
    $T15().NoteObject(obj, source);
    if (this.baseCtorCallbacks !== null) {

      for (var i = 0; i < (this.baseCtorCallbacks.length | 0); ) {
        this.InvokeCallback(this.baseCtorCallbacks[i], obj, source.get_Context());
        var num = i;
        i = ((num + 1) | 0);
      }
    }
    var flag5 = includeLocalCallback && 
    (this.callbacks !== null);
    if (flag5) {
      this.InvokeCallback(
        (this.callbacks).get_BeforeDeserialize(), 
        obj, 
        source.get_Context()
      );
    }
    return obj;
  }; 

  function TypeSerializer_get_CanHaveInheritance () {
    return (!(!(this.forType).get_IsClass() && 
        !(this.forType).get_IsInterface()) && !(this.forType).get_IsSealed());
  }; 

  function TypeSerializer_get_ExpectedType () {
    return this.forType;
  }; 

  function TypeSerializer_GetMoreSpecificSerializer (value) {
    var flag = !this.get_CanHaveInheritance();
    if (flag) {
      var result = null;
    } else {
      var actualType = JSIL.GetType(value);
      var flag2 = actualType === this.forType;
      if (flag2) {
        result = null;
      } else {

        for (var i = 0; i < (this.serializers.length | 0); ) {
          var ser = this.serializers[i];
          var flag3 = ($IM00().Call(ser, null) !== this.forType) && 
          $T09().IsAssignableFrom($IM00().Call(ser, null), actualType);
          if (flag3) {
            result = ser;
            return result;
          }
          var num = i;
          i = ((num + 1) | 0);
        }
        var flag4 = actualType === this.constructType;
        if (flag4) {
          result = null;
        } else {
          $T01().ThrowUnexpectedSubtype(this.forType, actualType);
          result = null;
        }
      }
    }
    return result;
  }; 

  function TypeSerializer_HasCallbacks (callbackType) {
    var flag = (this.callbacks !== null) && 
    ((this.callbacks).get_Item(callbackType) !== null);
    if (flag) {
      var result = true;
    } else {

      for (var i = 0; i < (this.serializers.length | 0); ) {
        var flag2 = ($IM00().Call(this.serializers[i], null) !== this.forType) && 
        $IM02().Call($T14().$Cast(this.serializers[i]), null, callbackType);
        if (flag2) {
          result = true;
          return result;
        }
        var num = i;
        i = ((num + 1) | 0);
      }
      result = false;
    }
    return result;
  }; 

  function TypeSerializer_InvokeCallback (method, obj, context) {
    var result = null;
    var flag = method !== null;
    if (flag) {
      var parameters = method.GetParameters();
      var num = (parameters.length | 0);
      if (num !== 0) {
        var args = JSIL.Array.New($T11(), parameters.length);
        var handled = true;

        for (var i = 0; i < (args.length | 0); ) {
          var paramType = (parameters[i]).get_ParameterType();
          if (paramType === $T13().__Type__) {
            var val = context;
          } else {
            if (paramType === $T02().__Type__) {
              val = this.constructType;
            } else {
              val = null;
              handled = false;
            }
          }
          args[i] = val;
          var num2 = i;
          i = ((num2 + 1) | 0);
        }
      } else {
        args = null;
        handled = true;
      }
      var flag4 = handled;
      if (!flag4) {
        throw $T07().CreateInvalidCallbackSignature(method);
      }
      result = method.Invoke(obj, args);
    }
    return result;
  }; 

  function TypeSerializer_ProtoBuf_Serializers_IProtoSerializer_get_RequiresOldValue () {
    return true;
  }; 

  function TypeSerializer_ProtoBuf_Serializers_IProtoSerializer_get_ReturnsValue () {
    return false;
  }; 

  function TypeSerializer_ProtoBuf_Serializers_IProtoTypeSerializer_CanCreateInstance () {
    return true;
  }; 

  function TypeSerializer_ProtoBuf_Serializers_IProtoTypeSerializer_CreateInstance (source) {
    return this.CreateInstance(source, false);
  }; 

  function TypeSerializer_Read (value, source) {
    var fieldNumber = 0;
    var flag = this.isRootType && 
    (value !== null);
    if (flag) {
      this.Callback(value, $T12().BeforeDeserialize, source.get_Context());
    }
    var lastFieldNumber = 0;
    var lastFieldIndex = 0;

    while ((fieldNumber = (source.ReadFieldHeader() | 0)) > 0) {
      var fieldHandled = false;
      var flag2 = fieldNumber < lastFieldNumber;
      if (flag2) {
        lastFieldIndex = lastFieldNumber = 0;
      }

    $loop1: 
      for (var i = lastFieldIndex; i < (this.fieldNumbers.length | 0); ) {
        var flag3 = (this.fieldNumbers[i] | 0) === fieldNumber;
        if (flag3) {
          var ser = this.serializers[i];
          var serType = $IM00().Call(ser, null);
          var flag4 = value === null;
          if (flag4) {
            var flag5 = serType === this.forType;
            if (flag5) {
              value = this.CreateInstance(source, true);
            }
          } else {
            var flag6 = !((serType === this.forType) || 
              !$IM03().Call($T14().$Cast(ser), null)) && 
            serType.IsSubclassOf(JSIL.GetType(value));
            if (flag6) {
              value = $T15().Merge(source, value, $IM04().Call($T14().$Cast(ser), null, source));
            }
          }
          var returnsValue = $IM05().Call(ser, null);
          if (returnsValue) {
            value = $IM06().Call(ser, null, value, source);
          } else {
            $IM06().Call(ser, null, value, source);
          }
          lastFieldIndex = i;
          lastFieldNumber = fieldNumber;
          fieldHandled = true;
          break $loop1;
        }
        var num = i;
        i = ((num + 1) | 0);
      }
      var flag7 = !fieldHandled;
      if (flag7) {
        var flag8 = value === null;
        if (flag8) {
          value = this.CreateInstance(source, true);
        }
        if (this.isExtensible) {
          source.AppendExtensionData($T00().$Cast(value));
        } else {
          source.SkipField();
        }
      }
    }
    var flag10 = value === null;
    if (flag10) {
      value = this.CreateInstance(source, true);
    }
    if (this.isRootType) {
      this.Callback(value, $T12().AfterDeserialize, source.get_Context());
    }
    return value;
  }; 

  function TypeSerializer_Write (value, dest) {
    if (this.isRootType) {
      this.Callback(value, $T12().BeforeSerialize, dest.get_Context());
    }
    var next = this.GetMoreSpecificSerializer(value);
    var flag2 = next !== null;
    if (flag2) {
      $IM07().Call(next, null, value, dest);
    }

    for (var i = 0; i < (this.serializers.length | 0); ) {
      var ser = this.serializers[i];
      var flag3 = $IM00().Call(ser, null) === this.forType;
      if (flag3) {
        $IM07().Call(ser, null, value, dest);
      }
      var num = i;
      i = ((num + 1) | 0);
    }
    if (this.isExtensible) {
      $T1B().AppendExtensionData($T00().$Cast(value), dest);
    }
    if (this.isRootType) {
      this.Callback(value, $T12().AfterSerialize, dest.get_Context());
    }
  }; 

  JSIL.MakeType({
      BaseType: $asm14.TypeRef("System.Object"), 
      Name: "ProtoBuf.Serializers.TypeSerializer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 10, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0E.TypeRef("ProtoBuf.Meta.TypeModel"), $asm14.TypeRef("System.Type"), 
          $jsilcore.TypeRef("System.Array", [$.Int32]), $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("ProtoBuf.Serializers.IProtoSerializer")]), 
          $jsilcore.TypeRef("System.Array", [$asm14.TypeRef("System.Reflection.MethodInfo")]), $.Boolean, 
          $.Boolean, $asm0E.TypeRef("ProtoBuf.Meta.CallbackSet"), 
          $asm14.TypeRef("System.Type"), $asm14.TypeRef("System.Reflection.MethodInfo")
        ]), 
      TypeSerializer__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Callback", 
      new JSIL.MethodSignature(null, [
          $.Object, $asm0E.TypeRef("ProtoBuf.Meta.TypeModel+CallbackType"), 
          $asm0E.TypeRef("ProtoBuf.SerializationContext")
        ]), 
      TypeSerializer_Callback
    );

    $.Method({Static:false, Public:false}, "CreateInstance", 
      new JSIL.MethodSignature($.Object, [$asm0E.TypeRef("ProtoBuf.ProtoReader"), $.Boolean]), 
      TypeSerializer_CreateInstance
    );

    $.Method({Static:false, Public:false}, "get_CanHaveInheritance", 
      JSIL.MethodSignature.Return($.Boolean), 
      TypeSerializer_get_CanHaveInheritance
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ExpectedType", 
      JSIL.MethodSignature.Return($asm14.TypeRef("System.Type")), 
      TypeSerializer_get_ExpectedType
    );

    $.Method({Static:false, Public:false}, "GetMoreSpecificSerializer", 
      new JSIL.MethodSignature($asm0E.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), [$.Object]), 
      TypeSerializer_GetMoreSpecificSerializer
    );

    $.Method({Static:false, Public:true , Virtual:true }, "HasCallbacks", 
      new JSIL.MethodSignature($.Boolean, [$asm0E.TypeRef("ProtoBuf.Meta.TypeModel+CallbackType")]), 
      TypeSerializer_HasCallbacks
    );

    $.Method({Static:false, Public:false}, "InvokeCallback", 
      new JSIL.MethodSignature($.Object, [
          $asm14.TypeRef("System.Reflection.MethodInfo"), $.Object, 
          $asm0E.TypeRef("ProtoBuf.SerializationContext")
        ]), 
      TypeSerializer_InvokeCallback
    );

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.get_RequiresOldValue", 
      JSIL.MethodSignature.Return($.Boolean), 
      TypeSerializer_ProtoBuf_Serializers_IProtoSerializer_get_RequiresOldValue
    )
      .Overrides($asm0E.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "get_RequiresOldValue");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.get_ReturnsValue", 
      JSIL.MethodSignature.Return($.Boolean), 
      TypeSerializer_ProtoBuf_Serializers_IProtoSerializer_get_ReturnsValue
    )
      .Overrides($asm0E.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "get_ReturnsValue");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoTypeSerializer.CanCreateInstance", 
      JSIL.MethodSignature.Return($.Boolean), 
      TypeSerializer_ProtoBuf_Serializers_IProtoTypeSerializer_CanCreateInstance
    )
      .Overrides($asm0E.TypeRef("ProtoBuf.Serializers.IProtoTypeSerializer"), "CanCreateInstance");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoTypeSerializer.CreateInstance", 
      new JSIL.MethodSignature($.Object, [$asm0E.TypeRef("ProtoBuf.ProtoReader")]), 
      TypeSerializer_ProtoBuf_Serializers_IProtoTypeSerializer_CreateInstance
    )
      .Overrides($asm0E.TypeRef("ProtoBuf.Serializers.IProtoTypeSerializer"), "CreateInstance");

    $.Method({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Object, [$.Object, $asm0E.TypeRef("ProtoBuf.ProtoReader")]), 
      TypeSerializer_Read
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [$.Object, $asm0E.TypeRef("ProtoBuf.ProtoWriter")]), 
      TypeSerializer_Write
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "forType", $asm14.TypeRef("System.Type"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "constructType", $asm14.TypeRef("System.Type"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "serializers", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("ProtoBuf.Serializers.IProtoSerializer")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "fieldNumbers", $jsilcore.TypeRef("System.Array", [$.Int32]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "isRootType", $.Boolean);

    $.Field({Static:false, Public:false, ReadOnly:true }, "useConstructor", $.Boolean);

    $.Field({Static:false, Public:false, ReadOnly:true }, "isExtensible", $.Boolean);

    $.Field({Static:false, Public:false, ReadOnly:true }, "hasConstructor", $.Boolean);

    $.Field({Static:false, Public:false, ReadOnly:true }, "callbacks", $asm0E.TypeRef("ProtoBuf.Meta.CallbackSet"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "baseCtorCallbacks", $jsilcore.TypeRef("System.Array", [$asm14.TypeRef("System.Reflection.MethodInfo")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "factory", $asm14.TypeRef("System.Reflection.MethodInfo"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "iextensible", $asm14.TypeRef("System.Type"), function ($pi) {
        return $asm0E.ProtoBuf.IExtensible.__Type__;
      });


    function TypeSerializer__cctor () {
      $thisType.iextensible = $T00().__Type__;
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      TypeSerializer__cctor
    );

    $.Property({Static:false, Public:true , Virtual:true }, "ExpectedType", $asm14.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "CanHaveInheritance", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.RequiresOldValue", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.ReturnsValue", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm0E.TypeRef("ProtoBuf.Serializers.IProtoTypeSerializer"), 
      /* 1 */ $asm0E.TypeRef("ProtoBuf.Serializers.IProtoSerializer")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ProtoBuf.Serializers.UInt32Serializer */ 

(function UInt32Serializer$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm14.System.UInt32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0E.ProtoBuf.Meta.TypeModel)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm14.System.Object)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0E.ProtoBuf.ProtoReader)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm0E.ProtoBuf.ProtoWriter)) ();
  };


  function UInt32Serializer__ctor (model) {
  }; 

  function UInt32Serializer_get_ExpectedType () {
    return $thisType.expectedType;
  }; 

  function UInt32Serializer_ProtoBuf_Serializers_IProtoSerializer_get_RequiresOldValue () {
    return false;
  }; 

  function UInt32Serializer_ProtoBuf_Serializers_IProtoSerializer_get_ReturnsValue () {
    return true;
  }; 

  function UInt32Serializer_Read (value, source) {
    return $T00().$Box(source.ReadUInt32());
  }; 

  function UInt32Serializer_Write (value, dest) {
    $T04().WriteUInt32($T00().$Cast(value), dest);
  }; 

  JSIL.MakeType({
      BaseType: $asm14.TypeRef("System.Object"), 
      Name: "ProtoBuf.Serializers.UInt32Serializer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm0E.TypeRef("ProtoBuf.Meta.TypeModel")), 
      UInt32Serializer__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ExpectedType", 
      JSIL.MethodSignature.Return($asm14.TypeRef("System.Type")), 
      UInt32Serializer_get_ExpectedType
    );

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.get_RequiresOldValue", 
      JSIL.MethodSignature.Return($.Boolean), 
      UInt32Serializer_ProtoBuf_Serializers_IProtoSerializer_get_RequiresOldValue
    )
      .Overrides($asm0E.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "get_RequiresOldValue");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.get_ReturnsValue", 
      JSIL.MethodSignature.Return($.Boolean), 
      UInt32Serializer_ProtoBuf_Serializers_IProtoSerializer_get_ReturnsValue
    )
      .Overrides($asm0E.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "get_ReturnsValue");

    $.Method({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Object, [$.Object, $asm0E.TypeRef("ProtoBuf.ProtoReader")]), 
      UInt32Serializer_Read
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [$.Object, $asm0E.TypeRef("ProtoBuf.ProtoWriter")]), 
      UInt32Serializer_Write
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "expectedType", $asm14.TypeRef("System.Type"), function ($pi) {
        return $asm14.System.UInt32.__Type__;
      });


    function UInt32Serializer__cctor () {
      $thisType.expectedType = $T00().__Type__;
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      UInt32Serializer__cctor
    );

    $.Property({Static:false, Public:true , Virtual:true }, "ExpectedType", $asm14.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.RequiresOldValue", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.ReturnsValue", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm0E.TypeRef("ProtoBuf.Serializers.IProtoSerializer")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ProtoBuf.Serializers.UInt64Serializer */ 

(function UInt64Serializer$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm14.System.UInt64)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0E.ProtoBuf.Meta.TypeModel)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm14.System.Object)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0E.ProtoBuf.ProtoReader)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm0E.ProtoBuf.ProtoWriter)) ();
  };


  function UInt64Serializer__ctor (model) {
  }; 

  function UInt64Serializer_get_ExpectedType () {
    return $thisType.expectedType;
  }; 

  function UInt64Serializer_ProtoBuf_Serializers_IProtoSerializer_get_RequiresOldValue () {
    return false;
  }; 

  function UInt64Serializer_ProtoBuf_Serializers_IProtoSerializer_get_ReturnsValue () {
    return true;
  }; 

  function UInt64Serializer_Read (value, source) {
    return source.ReadUInt64();
  }; 

  function UInt64Serializer_Write (value, dest) {
    $T04().WriteUInt64($T00().$Cast(value), dest);
  }; 

  JSIL.MakeType({
      BaseType: $asm14.TypeRef("System.Object"), 
      Name: "ProtoBuf.Serializers.UInt64Serializer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm0E.TypeRef("ProtoBuf.Meta.TypeModel")), 
      UInt64Serializer__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ExpectedType", 
      JSIL.MethodSignature.Return($asm14.TypeRef("System.Type")), 
      UInt64Serializer_get_ExpectedType
    );

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.get_RequiresOldValue", 
      JSIL.MethodSignature.Return($.Boolean), 
      UInt64Serializer_ProtoBuf_Serializers_IProtoSerializer_get_RequiresOldValue
    )
      .Overrides($asm0E.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "get_RequiresOldValue");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.get_ReturnsValue", 
      JSIL.MethodSignature.Return($.Boolean), 
      UInt64Serializer_ProtoBuf_Serializers_IProtoSerializer_get_ReturnsValue
    )
      .Overrides($asm0E.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "get_ReturnsValue");

    $.Method({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Object, [$.Object, $asm0E.TypeRef("ProtoBuf.ProtoReader")]), 
      UInt64Serializer_Read
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [$.Object, $asm0E.TypeRef("ProtoBuf.ProtoWriter")]), 
      UInt64Serializer_Write
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "expectedType", $asm14.TypeRef("System.Type"), function ($pi) {
        return $asm14.System.UInt64.__Type__;
      });


    function UInt64Serializer__cctor () {
      $thisType.expectedType = $T00().__Type__;
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      UInt64Serializer__cctor
    );

    $.Property({Static:false, Public:true , Virtual:true }, "ExpectedType", $asm14.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.RequiresOldValue", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.ReturnsValue", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm0E.TypeRef("ProtoBuf.Serializers.IProtoSerializer")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ProtoBuf.Serializers.UriDecorator */ 

(function UriDecorator$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0F.System.Uri)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0E.ProtoBuf.Meta.TypeModel)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0E.ProtoBuf.Serializers.IProtoSerializer)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0E.ProtoBuf.Serializers.ProtoDecoratorBase)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm14.System.Object)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm0E.ProtoBuf.ProtoReader)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm14.System.String)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm14.System.Int32)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm0E.ProtoBuf.ProtoWriter)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.TypeRef("System.Uri"), [$asm0D.TypeRef("System.String")]))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm0E.ProtoBuf.Serializers.IProtoSerializer.Read)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm0E.ProtoBuf.Serializers.IProtoSerializer.Write)) ();
  };


  function UriDecorator__ctor (model, tail) {
    $T03().prototype._ctor.call(this, tail);
  }; 

  function UriDecorator_get_ExpectedType () {
    return $thisType.expectedType;
  }; 

  function UriDecorator_get_RequiresOldValue () {
    return false;
  }; 

  function UriDecorator_get_ReturnsValue () {
    return true;
  }; 

  function UriDecorator_Read (value, source) {
    var s = $T06().$Cast($IM00().Call(this.Tail, null, null, source));
    return (
      ((s.length | 0) === 0)
         ? null
         : $S00().Construct(s))
    ;
  }; 

  function UriDecorator_Write (value, dest) {
    $IM01().Call(this.Tail, null, ($T00().$Cast(value)).get_AbsoluteUri(), dest);
  }; 

  JSIL.MakeType({
      BaseType: $asm0E.TypeRef("ProtoBuf.Serializers.ProtoDecoratorBase"), 
      Name: "ProtoBuf.Serializers.UriDecorator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0E.TypeRef("ProtoBuf.Meta.TypeModel"), $asm0E.TypeRef("ProtoBuf.Serializers.IProtoSerializer")]), 
      UriDecorator__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ExpectedType", 
      JSIL.MethodSignature.Return($asm14.TypeRef("System.Type")), 
      UriDecorator_get_ExpectedType
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_RequiresOldValue", 
      JSIL.MethodSignature.Return($.Boolean), 
      UriDecorator_get_RequiresOldValue
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ReturnsValue", 
      JSIL.MethodSignature.Return($.Boolean), 
      UriDecorator_get_ReturnsValue
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Object, [$.Object, $asm0E.TypeRef("ProtoBuf.ProtoReader")]), 
      UriDecorator_Read
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [$.Object, $asm0E.TypeRef("ProtoBuf.ProtoWriter")]), 
      UriDecorator_Write
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "expectedType", $asm14.TypeRef("System.Type"), function ($pi) {
        return $asm0F.System.Uri.__Type__;
      });


    function UriDecorator__cctor () {
      $thisType.expectedType = $T00().__Type__;
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      UriDecorator__cctor
    );

    $.Property({Static:false, Public:true , Virtual:true }, "ExpectedType", $asm14.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "RequiresOldValue", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "ReturnsValue", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("ProtoBuf.Meta");
/* class ProtoBuf.Meta.AttributeMap */ 

(function AttributeMap$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0E.ProtoBuf.Meta.TypeModel)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm14.System.Type)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm14.System.Boolean)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize(System.Array.Of($asm14.System.Object))) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm14.System.Reflection.MemberInfo)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize(System.Array.Of($asm0E.ProtoBuf.Meta.AttributeMap))) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm14.System.Int32)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm0E.ProtoBuf.Meta.AttributeMap_ReflectionAttributeMap)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm14.System.Attribute)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm14.System.Reflection.Assembly)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm14.System.String)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm14.System.Object)) ();
  };


  function AttributeMap__ctor () {
  }; 

  function AttributeMap_Create$00 (model, type, inherit) {
    var all = type.GetCustomAttributes(inherit);
    var result = JSIL.Array.New($thisType, all.length);

    for (var i = 0; i < (all.length | 0); ) {
      result[i] = new ($T07())($T08().$Cast(all[i]));
      var num = i;
      i = ((num + 1) | 0);
    }
    return result;
  }; 

  function AttributeMap_Create$01 (model, member, inherit) {
    var all = member.GetCustomAttributes(inherit);
    var result = JSIL.Array.New($thisType, all.length);

    for (var i = 0; i < (all.length | 0); ) {
      result[i] = new ($T07())($T08().$Cast(all[i]));
      var num = i;
      i = ((num + 1) | 0);
    }
    return result;
  }; 

  function AttributeMap_Create$02 (model, assembly) {
    var all = assembly.GetCustomAttributes(false);
    var result = JSIL.Array.New($thisType, all.length);

    for (var i = 0; i < (all.length | 0); ) {
      result[i] = new ($T07())($T08().$Cast(all[i]));
      var num = i;
      i = ((num + 1) | 0);
    }
    return result;
  }; 

  function AttributeMap_TryGet$03 (key, /* ref */ value) {
    return this.TryGet(key, true, /* ref */ value);
  }; 

  JSIL.MakeType({
      BaseType: $asm14.TypeRef("System.Object"), 
      Name: "ProtoBuf.Meta.AttributeMap", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void, 
      AttributeMap__ctor
    );

    $.Method({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Type]), [
          $asm0E.TypeRef("ProtoBuf.Meta.TypeModel"), $asm14.TypeRef("System.Type"), 
          $.Boolean
        ]), 
      AttributeMap_Create$00
    );

    $.Method({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Type]), [
          $asm0E.TypeRef("ProtoBuf.Meta.TypeModel"), $asm14.TypeRef("System.Reflection.MemberInfo"), 
          $.Boolean
        ]), 
      AttributeMap_Create$01
    );

    $.Method({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Type]), [$asm0E.TypeRef("ProtoBuf.Meta.TypeModel"), $asm14.TypeRef("System.Reflection.Assembly")]), 
      AttributeMap_Create$02
    );

    $.Method({Static:false, Public:true }, "TryGet", 
      new JSIL.MethodSignature($.Boolean, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Object])]), 
      AttributeMap_TryGet$03
    );

    $.Property({Static:false, Public:true , Virtual:true }, "AttributeType", $asm14.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "Target", $.Object);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ProtoBuf.Meta.AttributeMap+ReflectionAttributeMap */ 

(function ReflectionAttributeMap$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm14.System.Attribute)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0E.ProtoBuf.Meta.AttributeMap)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm14.System.String)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm14.System.Boolean)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm14.System.Object)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize(System.Array.Of($asm14.System.Reflection.MemberInfo))) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm0E.ProtoBuf.Helpers)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm14.System.Int32)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm14.System.Reflection.MemberInfo)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm14.System.StringComparison)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm14.System.Reflection.PropertyInfo)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm14.System.Reflection.FieldInfo)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm14.System.NotSupportedException)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm14.TypeRef("System.NotSupportedException"), [$asm14.TypeRef("System.String")]))) ();
  };


  function ReflectionAttributeMap__ctor (attribute) {
    $T01().prototype._ctor.call(this);
    this.attribute = attribute;
  }; 

  function ReflectionAttributeMap_get_AttributeType () {
    return JSIL.GetType(this.attribute);
  }; 

  function ReflectionAttributeMap_get_Target () {
    return this.attribute;
  }; 

  function ReflectionAttributeMap_TryGet$00 (key, publicOnly, /* ref */ value) {
    var members = $T06().GetInstanceFieldsAndProperties(JSIL.GetType(this.attribute), publicOnly);
    var array = members;

    for (var i = 0; i < (array.length | 0); i = ((i + 1) | 0)) {
      var member = array[i];
      var flag = ((System.String.Compare(member.get_Name(), key, $T09().OrdinalIgnoreCase) === 0));
      if (flag) {
        var prop = $T0A().$As(member);
        var flag2 = prop !== null;
        if (flag2) {
          value.set(prop.GetValue(this.attribute, null));
          var result = true;
        } else {
          var field = $T0B().$As(member);
          var flag3 = field !== null;
          if (!flag3) {
            throw $S00().Construct((JSIL.GetType(member)).get_Name());
          }
          value.set(field.GetValue(this.attribute));
          result = true;
        }
        return result;
      }
    }
    value.set(null);
    result = false;
    return result;
  }; 

  JSIL.MakeType({
      BaseType: $asm0E.TypeRef("ProtoBuf.Meta.AttributeMap"), 
      Name: "ProtoBuf.Meta.AttributeMap+ReflectionAttributeMap", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm14.TypeRef("System.Attribute")), 
      ReflectionAttributeMap__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_AttributeType", 
      JSIL.MethodSignature.Return($asm14.TypeRef("System.Type")), 
      ReflectionAttributeMap_get_AttributeType
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_Target", 
      JSIL.MethodSignature.Return($.Object), 
      ReflectionAttributeMap_get_Target
    );

    $.Method({Static:false, Public:true , Virtual:true }, "TryGet", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $.Boolean, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ]), 
      ReflectionAttributeMap_TryGet$00
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "attribute", $asm14.TypeRef("System.Attribute"));

    $.Property({Static:false, Public:true , Virtual:true }, "Target", $.Object);

    $.Property({Static:false, Public:true , Virtual:true }, "AttributeType", $asm14.TypeRef("System.Type"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ProtoBuf.Meta.BasicList */ 

(function BasicList$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0E.ProtoBuf.Meta.BasicList_Node)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm14.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0E.ProtoBuf.Meta.BasicList_NodeEnumerator)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm14.System.Boolean)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm14.System.Array)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm14.System.Int32)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize(System.Array.Of($asm14.System.Int32))) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize(System.Array.Of($asm14.System.Object))) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm14.System.ArgumentNullException)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm14.System.ArgumentException)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm0E.ProtoBuf.Meta.BasicList_Group)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm0E.ProtoBuf.Meta.BasicList_MatchPredicate)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm14.System.String)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm14.TypeRef("System.ArgumentNullException"), [$asm14.TypeRef("System.String")]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm14.TypeRef("System.ArgumentException"), [$asm14.TypeRef("System.String"), $asm14.TypeRef("System.String")]))) ();
  };


  function BasicList__ctor () {
    this.head = $thisType.nil;
  }; 

  function BasicList_Add (value) {
    return ((((this.head = (this.head).Append(value)).get_Length() | 0) - 1) | 0);
  }; 

  function BasicList_Contains (value) {

    for (var enumerator = this.GetEnumerator(); enumerator.MoveNext(); ) {
      var obj = enumerator.get_Current();
      var flag = (JSIL.ObjectEquals(obj, value));
      if (flag) {
        var result = true;
        return result;
      }
    }
    result = false;
    return result;
  }; 

  function BasicList_CopyTo (array, offset) {
    (this.head).CopyTo(array, offset);
  }; 

  function BasicList_get_Count () {
    return (this.head).get_Length();
  }; 

  function BasicList_get_Item (index) {
    return (this.head).get_Item(index);
  }; 

  function BasicList_GetContiguousGroups (keys, values) {
    var flag = keys === null;
    if (flag) {
      throw $S00().Construct("keys");
    }
    var flag2 = values === null;
    if (flag2) {
      throw $S00().Construct("values");
    }
    var flag3 = (values.length | 0) < (keys.length | 0);
    if (flag3) {
      throw $S01().Construct("Not all keys are covered by values", "values");
    }
    var outer = new $thisType();
    var group = null;

    for (var i = 0; i < (keys.length | 0); ) {
      var flag4 = (i === 0) || 
      ((keys[i] | 0) !== (keys[((i - 1) | 0)] | 0));
      if (flag4) {
        group = null;
      }
      var flag5 = group === null;
      if (flag5) {
        group = new ($T0A())(keys[i]);
        outer.Add(group);
      }
      (group.Items).Add(values[i]);
      var num = i;
      i = ((num + 1) | 0);
    }
    return outer;
  }; 

  function BasicList_GetEnumerator () {
    return new ($T02())(this.head);
  }; 

  function BasicList_IndexOf (predicate, ctx) {
    return (this.head).IndexOf(predicate, ctx);
  }; 

  function BasicList_IndexOfReference (instance) {
    return (this.head).IndexOfReference(instance);
  }; 

  function BasicList_IndexOfString (value) {
    return (this.head).IndexOfString(value);
  }; 

  function BasicList_System_Collections_IEnumerable_GetEnumerator () {
    return new ($T02())(this.head);
  }; 

  function BasicList_Trim () {
    this.head = (this.head).Trim();
  }; 

  JSIL.MakeType({
      BaseType: $asm14.TypeRef("System.Object"), 
      Name: "ProtoBuf.Meta.BasicList", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      BasicList__ctor
    );

    $.Method({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($.Int32, [$.Object]), 
      BasicList_Add
    );

    $.Method({Static:false, Public:false}, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$.Object]), 
      BasicList_Contains
    );

    $.Method({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$asm14.TypeRef("System.Array"), $.Int32]), 
      BasicList_CopyTo
    );

    $.Method({Static:false, Public:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32), 
      BasicList_get_Count
    );

    $.Method({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($.Object, [$.Int32]), 
      BasicList_get_Item
    );

    $.Method({Static:true , Public:false}, "GetContiguousGroups", 
      new JSIL.MethodSignature($.Type, [$jsilcore.TypeRef("System.Array", [$.Int32]), $jsilcore.TypeRef("System.Array", [$.Object])]), 
      BasicList_GetContiguousGroups
    );

    $.Method({Static:false, Public:true }, "GetEnumerator", 
      JSIL.MethodSignature.Return($asm0E.TypeRef("ProtoBuf.Meta.BasicList+NodeEnumerator")), 
      BasicList_GetEnumerator
    );

    $.Method({Static:false, Public:false}, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$asm0E.TypeRef("ProtoBuf.Meta.BasicList+MatchPredicate"), $.Object]), 
      BasicList_IndexOf
    );

    $.Method({Static:false, Public:false}, "IndexOfReference", 
      new JSIL.MethodSignature($.Int32, [$.Object]), 
      BasicList_IndexOfReference
    );

    $.Method({Static:false, Public:false}, "IndexOfString", 
      new JSIL.MethodSignature($.Int32, [$.String]), 
      BasicList_IndexOfString
    );

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm14.TypeRef("System.Collections.IEnumerator")), 
      BasicList_System_Collections_IEnumerable_GetEnumerator
    )
      .Overrides($asm14.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.Method({Static:false, Public:true }, "Trim", 
      JSIL.MethodSignature.Void, 
      BasicList_Trim
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "nil", $asm0E.TypeRef("ProtoBuf.Meta.BasicList+Node"));

    $.Field({Static:false, Public:false}, "head", $asm0E.TypeRef("ProtoBuf.Meta.BasicList+Node"));


    function BasicList__cctor () {
      $thisType.nil = new ($T00())(null, 0);
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      BasicList__cctor
    );

    $.Property({Static:false, Public:true }, "Item", $.Object);

    $.Property({Static:false, Public:true }, "Count", $.Int32);

    $.ImplementInterfaces(
      /* 0 */ $asm14.TypeRef("System.Collections.IEnumerable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm14.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* struct ProtoBuf.Meta.BasicList+NodeEnumerator */ 

(function NodeEnumerator$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0E.ProtoBuf.Meta.BasicList_Node)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm14.System.Int32)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm14.System.Boolean)) ();
  };


  function NodeEnumerator__ctor (node) {
    this.position = -1;
    this.node = node;
  }; 

  function NodeEnumerator_get_Current () {
    return (this.node).get_Item(this.position);
  }; 

  function NodeEnumerator_MoveNext () {
    var len = ((this.node).get_Length() | 0);
    if ((this.position | 0) <= len) {
      var num = (((this.position | 0) + 1) | 0);
      this.position = num;
      var arg_2D_0 = num < len;
    } else {
      arg_2D_0 = false;
    }
    return arg_2D_0;
  }; 

  function NodeEnumerator_System_Collections_IEnumerator_Reset () {
    this.position = -1;
  }; 

  JSIL.MakeType({
      BaseType: $asm14.TypeRef("System.ValueType"), 
      Name: "ProtoBuf.Meta.BasicList+NodeEnumerator", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 1, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm0E.TypeRef("ProtoBuf.Meta.BasicList+Node")), 
      NodeEnumerator__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_Current", 
      JSIL.MethodSignature.Return($.Object), 
      NodeEnumerator_get_Current
    );

    $.Method({Static:false, Public:true , Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean), 
      NodeEnumerator_MoveNext
    );

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void, 
      NodeEnumerator_System_Collections_IEnumerator_Reset
    )
      .Overrides($asm14.TypeRef("System.Collections.IEnumerator"), "Reset");

    $.Field({Static:false, Public:false}, "position", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "node", $asm0E.TypeRef("ProtoBuf.Meta.BasicList+Node"));

    $.Property({Static:false, Public:true , Virtual:true }, "Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm14.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ProtoBuf.Meta.BasicList+Node */ 

(function Node$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize(System.Array.Of($asm14.System.Object))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm14.System.Int32)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm14.System.Object)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm14.System.Boolean)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm14.System.Array)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm14.System.ArgumentOutOfRangeException)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm0E.ProtoBuf.Meta.BasicList_MatchPredicate)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm14.System.String)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm14.System.InvalidOperationException)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm14.TypeRef("System.Array"), $asm14.TypeRef("System.Array"), 
        $asm14.TypeRef("System.Int32")
      ]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm14.TypeRef("System.Array"), $asm14.TypeRef("System.Int32"), 
        $asm14.TypeRef("System.Array"), $asm14.TypeRef("System.Int32"), 
        $asm14.TypeRef("System.Int32")
      ]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm14.TypeRef("System.ArgumentOutOfRangeException"), [$asm14.TypeRef("System.String")]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm14.TypeRef("System.InvalidOperationException"), null))) ();
  };


  function Node__ctor (data, length) {
    this.data = data;
    this.$length = (length | 0);
  }; 

  function Node_Append (value) {
    var newLength = (((this.$length | 0) + 1) | 0);
    if (this.data === null) {
      var newData = JSIL.Array.New($T02(), 10);
    } else {
      var flag2 = (this.$length | 0) === (this.data.length | 0);
      if (flag2) {
        newData = JSIL.Array.New($T02(), Math.imul(this.data.length, 2));
        $S00().CallStatic($T04(), "Copy", null, this.data, newData, this.$length);
      } else {
        newData = this.data;
      }
    }
    newData[this.$length] = value;
    return new $thisType(newData, newLength);
  }; 

  function Node_Clear () {
    if (this.data !== null) {
      JSIL.Array.Erase(this.data, $T02().__Type__, 0, this.data.length);
    }
    this.$length = 0;
  }; 

  function Node_CopyTo (array, offset) {
    if ((this.$length | 0) > 0) {
      $S01().CallStatic($T04(), "Copy", null, 
        this.data, 
        0, 
        array, 
        offset, 
        this.$length
      );
    }
  }; 

  function Node_get_Item (index) {
    var flag = ((index | 0) >= 0) && 
    ((index | 0) < (this.$length | 0));
    if (flag) {
      return this.data[index];
    }
    throw $S02().Construct("index");
  }; 

  function Node_get_Length () {
    return this.$length;
  }; 

  function Node_IndexOf (predicate, ctx) {

    for (var i = 0; i < (this.$length | 0); ) {
      var flag = predicate(this.data[i], ctx);
      if (flag) {
        var result = i;
        return result;
      }
      var num = i;
      i = ((num + 1) | 0);
    }
    result = -1;
    return result;
  }; 

  function Node_IndexOfReference (instance) {

    for (var i = 0; i < (this.$length | 0); ) {
      var flag = instance === this.data[i];
      if (flag) {
        var result = i;
        return result;
      }
      var num = i;
      i = ((num + 1) | 0);
    }
    result = -1;
    return result;
  }; 

  function Node_IndexOfString (value) {

    for (var i = 0; i < (this.$length | 0); ) {
      var flag = (value == $T07().$Cast(this.data[i]));
      if (flag) {
        var result = i;
        return result;
      }
      var num = i;
      i = ((num + 1) | 0);
    }
    result = -1;
    return result;
  }; 

  function Node_RemoveLastWithMutate () {
    if ((this.$length | 0) === 0) {
      throw $S03().Construct();
    }
    this.$length = (((this.$length | 0) - 1) | 0);
  }; 

  function Node_set_Item (index, value) {
    var flag = ((index | 0) >= 0) && 
    ((index | 0) < (this.$length | 0));
    if (flag) {
      this.data[index] = value;
      return;
    }
    throw $S02().Construct("index");
  }; 

  function Node_Trim () {
    var flag = ((this.$length | 0) === 0) || 
    ((this.$length | 0) === (this.data.length | 0));
    if (flag) {
      var result = this;
    } else {
      var newData = JSIL.Array.New($T02(), this.$length);
      $S00().CallStatic($T04(), "Copy", null, this.data, newData, this.$length);
      result = new $thisType(newData, this.$length);
    }
    return result;
  }; 

  JSIL.MakeType({
      BaseType: $asm14.TypeRef("System.Object"), 
      Name: "ProtoBuf.Meta.BasicList+Node", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.Object]), $.Int32]), 
      Node__ctor
    );

    $.Method({Static:false, Public:true }, "Append", 
      new JSIL.MethodSignature($.Type, [$.Object]), 
      Node_Append
    );

    $.Method({Static:false, Public:false}, "Clear", 
      JSIL.MethodSignature.Void, 
      Node_Clear
    );

    $.Method({Static:false, Public:false}, "CopyTo", 
      new JSIL.MethodSignature(null, [$asm14.TypeRef("System.Array"), $.Int32]), 
      Node_CopyTo
    );

    $.Method({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($.Object, [$.Int32]), 
      Node_get_Item
    );

    $.Method({Static:false, Public:true }, "get_Length", 
      JSIL.MethodSignature.Return($.Int32), 
      Node_get_Length
    );

    $.Method({Static:false, Public:false}, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$asm0E.TypeRef("ProtoBuf.Meta.BasicList+MatchPredicate"), $.Object]), 
      Node_IndexOf
    );

    $.Method({Static:false, Public:false}, "IndexOfReference", 
      new JSIL.MethodSignature($.Int32, [$.Object]), 
      Node_IndexOfReference
    );

    $.Method({Static:false, Public:false}, "IndexOfString", 
      new JSIL.MethodSignature($.Int32, [$.String]), 
      Node_IndexOfString
    );

    $.Method({Static:false, Public:true }, "RemoveLastWithMutate", 
      JSIL.MethodSignature.Void, 
      Node_RemoveLastWithMutate
    );

    $.Method({Static:false, Public:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object]), 
      Node_set_Item
    );

    $.Method({Static:false, Public:true }, "Trim", 
      JSIL.MethodSignature.Return($.Type), 
      Node_Trim
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "data", $jsilcore.TypeRef("System.Array", [$.Object]));

    $.Field({Static:false, Public:false}, "$length", $.Int32);

    $.Property({Static:false, Public:true }, "Item", $.Object);

    $.Property({Static:false, Public:true }, "Length", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm14.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* delegate ProtoBuf.Meta.BasicList+MatchPredicate */ 

JSIL.MakeDelegate("ProtoBuf.Meta.BasicList+MatchPredicate", false, [], 
  new JSIL.MethodSignature($asm14.TypeRef("System.Boolean"), [$asm14.TypeRef("System.Object"), $asm14.TypeRef("System.Object")]));

/* class ProtoBuf.Meta.BasicList+Group */ 

(function Group$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm14.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0E.ProtoBuf.Meta.BasicList)) ();
  };


  function Group__ctor (first) {
    this.First = (first | 0);
    this.Items = new ($T01())();
  }; 

  JSIL.MakeType({
      BaseType: $asm14.TypeRef("System.Object"), 
      Name: "ProtoBuf.Meta.BasicList+Group", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32), 
      Group__ctor
    );

    $.Field({Static:false, Public:true , ReadOnly:true }, "First", $.Int32);

    $.Field({Static:false, Public:true , ReadOnly:true }, "Items", $asm0E.TypeRef("ProtoBuf.Meta.BasicList"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ProtoBuf.Meta.MutableList */ 

(function MutableList$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0E.ProtoBuf.Meta.BasicList)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0E.ProtoBuf.Meta.BasicList_Node)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm14.System.Int32)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm14.System.Object)) ();
  };


  function MutableList__ctor () {
    $T00().prototype._ctor.call(this);
  }; 

  function MutableList_Clear () {
    (this.head).Clear();
  }; 

  function MutableList_get_Item (index) {
    return (this.head).get_Item(index);
  }; 

  function MutableList_RemoveLast () {
    (this.head).RemoveLastWithMutate();
  }; 

  function MutableList_set_Item (index, value) {
    (this.head).set_Item(index, value);
  }; 

  JSIL.MakeType({
      BaseType: $asm0E.TypeRef("ProtoBuf.Meta.BasicList"), 
      Name: "ProtoBuf.Meta.MutableList", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      MutableList__ctor
    );

    $.Method({Static:false, Public:true }, "Clear", 
      JSIL.MethodSignature.Void, 
      MutableList_Clear
    );

    $.Method({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($.Object, [$.Int32]), 
      MutableList_get_Item
    );

    $.Method({Static:false, Public:true }, "RemoveLast", 
      JSIL.MethodSignature.Void, 
      MutableList_RemoveLast
    );

    $.Method({Static:false, Public:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object]), 
      MutableList_set_Item
    );

    $.Property({Static:false, Public:true }, "Item", $.Object);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm14.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class ProtoBuf.Meta.CallbackSet */ 

(function CallbackSet$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0E.ProtoBuf.Meta.MetaType)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm14.System.ArgumentNullException)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0E.ProtoBuf.Meta.TypeModel)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm14.System.Reflection.MethodInfo)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize(System.Array.Of($asm14.System.Reflection.ParameterInfo))) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm14.System.Reflection.MethodBase)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm14.System.Int32)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm14.System.Type)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm14.System.Reflection.ParameterInfo)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm0E.ProtoBuf.SerializationContext)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm14.System.Boolean)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm14.System.NotSupportedException)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm14.System.String)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm14.System.Reflection.MemberInfo)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm0E.ProtoBuf.Meta.TypeModel_CallbackType)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm14.System.ArgumentException)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm14.System.Object)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm14.System.Void)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm14.TypeRef("System.ArgumentNullException"), [$asm14.TypeRef("System.String")]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm14.TypeRef("System.NotSupportedException"), [$asm14.TypeRef("System.String")]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm14.TypeRef("System.ArgumentException"), [$asm14.TypeRef("System.String"), $asm14.TypeRef("System.String")]))) ();
  };


  function CallbackSet__ctor (metaType) {
    if (metaType === null) {
      throw $S00().Construct("metaType");
    }
    this.metaType = metaType;
  }; 

  function CallbackSet_CheckCallbackParameters (model, method) {
    var args = method.GetParameters();

    for (var i = 0; i < (args.length | 0); ) {
      var paramType = (args[i]).get_ParameterType();
      if (paramType !== model.MapType($T09().__Type__)) {
        if (paramType !== model.MapType($T07().__Type__)) {
          var result = false;
          return result;
        }
      }
      var num = i;
      i = ((num + 1) | 0);
    }
    result = true;
    return result;
  }; 

  function CallbackSet_CreateInvalidCallbackSignature (method) {
    return $S01().Construct(("Invalid callback signature in " + (method.get_DeclaringType()).get_FullName() + "." + method.get_Name()));
  }; 

  function CallbackSet_get_AfterDeserialize () {
    return this.afterDeserialize;
  }; 

  function CallbackSet_get_AfterSerialize () {
    return this.afterSerialize;
  }; 

  function CallbackSet_get_BeforeDeserialize () {
    return this.beforeDeserialize;
  }; 

  function CallbackSet_get_BeforeSerialize () {
    return this.beforeSerialize;
  }; 

  function CallbackSet_get_Item (callbackType) {
    switch (callbackType.valueOf()) {
      case 0: 
        var result = this.beforeSerialize;
        break;

      case 1: 
        result = this.afterSerialize;
        break;

      case 2: 
        result = this.beforeDeserialize;
        break;

      case 3: 
        result = this.afterDeserialize;
        break;

      default: 
        throw $S02().Construct(JSIL.ConcatString("Callback type not supported: ", callbackType.toString()), "callbackType");

    }
    return result;
  }; 

  function CallbackSet_get_NonTrivial () {
    return ((this.beforeSerialize !== null) || 
      (this.beforeDeserialize !== null) || 
      (this.afterSerialize !== null) || (this.afterDeserialize !== null));
  }; 

  function CallbackSet_SanityCheckCallback (model, callback) {
    (this.metaType).ThrowIfFrozen();
    var flag = callback === null;
    if (flag) {
      var result = callback;
    } else {
      var isStatic = callback.get_IsStatic();
      if (isStatic) {
        throw $S02().Construct("Callbacks cannot be static", "callback");
      }
      var flag2 = (callback.get_ReturnType() !== model.MapType($T11().__Type__)) || 
      !$thisType.CheckCallbackParameters(model, callback);
      if (flag2) {
        throw $thisType.CreateInvalidCallbackSignature(callback);
      }
      result = callback;
    }
    return result;
  }; 

  function CallbackSet_set_AfterDeserialize (value) {
    this.afterDeserialize = this.SanityCheckCallback((this.metaType).get_Model(), value);
  }; 

  function CallbackSet_set_AfterSerialize (value) {
    this.afterSerialize = this.SanityCheckCallback((this.metaType).get_Model(), value);
  }; 

  function CallbackSet_set_BeforeDeserialize (value) {
    this.beforeDeserialize = this.SanityCheckCallback((this.metaType).get_Model(), value);
  }; 

  function CallbackSet_set_BeforeSerialize (value) {
    this.beforeSerialize = this.SanityCheckCallback((this.metaType).get_Model(), value);
  }; 

  JSIL.MakeType({
      BaseType: $asm14.TypeRef("System.Object"), 
      Name: "ProtoBuf.Meta.CallbackSet", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm0E.TypeRef("ProtoBuf.Meta.MetaType")), 
      CallbackSet__ctor
    );

    $.Method({Static:true , Public:false}, "CheckCallbackParameters", 
      new JSIL.MethodSignature($.Boolean, [$asm0E.TypeRef("ProtoBuf.Meta.TypeModel"), $asm14.TypeRef("System.Reflection.MethodInfo")]), 
      CallbackSet_CheckCallbackParameters
    );

    $.Method({Static:true , Public:false}, "CreateInvalidCallbackSignature", 
      new JSIL.MethodSignature($asm14.TypeRef("System.Exception"), [$asm14.TypeRef("System.Reflection.MethodInfo")]), 
      CallbackSet_CreateInvalidCallbackSignature
    );

    $.Method({Static:false, Public:true }, "get_AfterDeserialize", 
      JSIL.MethodSignature.Return($asm14.TypeRef("System.Reflection.MethodInfo")), 
      CallbackSet_get_AfterDeserialize
    );

    $.Method({Static:false, Public:true }, "get_AfterSerialize", 
      JSIL.MethodSignature.Return($asm14.TypeRef("System.Reflection.MethodInfo")), 
      CallbackSet_get_AfterSerialize
    );

    $.Method({Static:false, Public:true }, "get_BeforeDeserialize", 
      JSIL.MethodSignature.Return($asm14.TypeRef("System.Reflection.MethodInfo")), 
      CallbackSet_get_BeforeDeserialize
    );

    $.Method({Static:false, Public:true }, "get_BeforeSerialize", 
      JSIL.MethodSignature.Return($asm14.TypeRef("System.Reflection.MethodInfo")), 
      CallbackSet_get_BeforeSerialize
    );

    $.Method({Static:false, Public:false}, "get_Item", 
      new JSIL.MethodSignature($asm14.TypeRef("System.Reflection.MethodInfo"), [$asm0E.TypeRef("ProtoBuf.Meta.TypeModel+CallbackType")]), 
      CallbackSet_get_Item
    );

    $.Method({Static:false, Public:true }, "get_NonTrivial", 
      JSIL.MethodSignature.Return($.Boolean), 
      CallbackSet_get_NonTrivial
    );

    $.Method({Static:false, Public:false}, "SanityCheckCallback", 
      new JSIL.MethodSignature($asm14.TypeRef("System.Reflection.MethodInfo"), [$asm0E.TypeRef("ProtoBuf.Meta.TypeModel"), $asm14.TypeRef("System.Reflection.MethodInfo")]), 
      CallbackSet_SanityCheckCallback
    );

    $.Method({Static:false, Public:true }, "set_AfterDeserialize", 
      JSIL.MethodSignature.Action($asm14.TypeRef("System.Reflection.MethodInfo")), 
      CallbackSet_set_AfterDeserialize
    );

    $.Method({Static:false, Public:true }, "set_AfterSerialize", 
      JSIL.MethodSignature.Action($asm14.TypeRef("System.Reflection.MethodInfo")), 
      CallbackSet_set_AfterSerialize
    );

    $.Method({Static:false, Public:true }, "set_BeforeDeserialize", 
      JSIL.MethodSignature.Action($asm14.TypeRef("System.Reflection.MethodInfo")), 
      CallbackSet_set_BeforeDeserialize
    );

    $.Method({Static:false, Public:true }, "set_BeforeSerialize", 
      JSIL.MethodSignature.Action($asm14.TypeRef("System.Reflection.MethodInfo")), 
      CallbackSet_set_BeforeSerialize
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "metaType", $asm0E.TypeRef("ProtoBuf.Meta.MetaType"));

    $.Field({Static:false, Public:false}, "beforeSerialize", $asm14.TypeRef("System.Reflection.MethodInfo"));

    $.Field({Static:false, Public:false}, "afterSerialize", $asm14.TypeRef("System.Reflection.MethodInfo"));

    $.Field({Static:false, Public:false}, "beforeDeserialize", $asm14.TypeRef("System.Reflection.MethodInfo"));

    $.Field({Static:false, Public:false}, "afterDeserialize", $asm14.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "Item", $asm14.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:true }, "BeforeSerialize", $asm14.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:true }, "BeforeDeserialize", $asm14.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:true }, "AfterSerialize", $asm14.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:true }, "AfterDeserialize", $asm14.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:true }, "NonTrivial", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm14.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class ProtoBuf.Meta.MetaType */ 

(function MetaType$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm14.System.Collections.IEnumerable)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0E.ProtoBuf.Meta.RuntimeTypeModel)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm14.System.Type)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm14.System.Reflection.MethodInfo)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm0E.ProtoBuf.Meta.BasicList)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm14.System.Boolean)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm14.System.ArgumentNullException)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm0E.ProtoBuf.Serializers.IProtoSerializer)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm0E.ProtoBuf.Helpers)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm14.System.Reflection.MemberInfo)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm0E.ProtoBuf.Meta.TypeModel)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm14.System.FlagsAttribute)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm14.System.Int32)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm14.System.String)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize(System.Array.Of($asm14.System.String))) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm14.System.Object)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm0E.ProtoBuf.Meta.ValueMember)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize(System.Array.Of($asm14.System.Reflection.MemberInfo))) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm14.System.Reflection.BindingFlags)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm14.System.ArgumentException)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm14.System.Reflection.PropertyInfo)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm14.System.Reflection.FieldInfo)) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm14.System.NotSupportedException)) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm0E.ProtoBuf.DataFormat)) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize($asm14.System.ArgumentOutOfRangeException)) ();
  };
  var $T19 = function () {
    return ($T19 = JSIL.Memoize($asm14.System.InvalidOperationException)) ();
  };
  var $T1A = function () {
    return ($T1A = JSIL.Memoize($asm0E.ProtoBuf.Meta.SubType)) ();
  };
  var $T1B = function () {
    return ($T1B = JSIL.Memoize($asm14.System.Exception)) ();
  };
  var $T1C = function () {
    return ($T1C = JSIL.Memoize($asm0E.ProtoBuf.Meta.MetaType_AttributeFamily)) ();
  };
  var $T1D = function () {
    return ($T1D = JSIL.Memoize(System.Array.Of($asm0E.ProtoBuf.Meta.AttributeMap))) ();
  };
  var $T1E = function () {
    return ($T1E = JSIL.Memoize($asm0E.ProtoBuf.Meta.AttributeMap)) ();
  };
  var $T1F = function () {
    return ($T1F = JSIL.Memoize(System.Array.Of($asm14.System.Reflection.MethodInfo))) ();
  };
  var $T20 = function () {
    return ($T20 = JSIL.Memoize($asm0E.ProtoBuf.ImplicitFields)) ();
  };
  var $T21 = function () {
    return ($T21 = JSIL.Memoize($asm0E.ProtoBuf.ProtoIgnoreAttribute)) ();
  };
  var $T22 = function () {
    return ($T22 = JSIL.Memoize(System.Array.Of($asm0E.ProtoBuf.ProtoMemberAttribute))) ();
  };
  var $T23 = function () {
    return ($T23 = JSIL.Memoize($asm0E.ProtoBuf.ProtoMemberAttribute)) ();
  };
  var $T24 = function () {
    return ($T24 = JSIL.Memoize($asm14.System.Array)) ();
  };
  var $T25 = function () {
    return ($T25 = JSIL.Memoize($asm0E.ProtoBuf.ProtoTypeCode)) ();
  };
  var $T26 = function () {
    return ($T26 = JSIL.Memoize($asm14.System.Char)) ();
  };
  var $T27 = function () {
    return ($T27 = JSIL.Memoize($asm14.System.UInt32)) ();
  };
  var $T28 = function () {
    return ($T28 = JSIL.Memoize($asm14.System.Int64)) ();
  };
  var $T29 = function () {
    return ($T29 = JSIL.Memoize($asm14.System.UInt64)) ();
  };
  var $T2A = function () {
    return ($T2A = JSIL.Memoize($asm14.System.Single)) ();
  };
  var $T2B = function () {
    return ($T2B = JSIL.Memoize($asm14.System.Double)) ();
  };
  var $T2C = function () {
    return ($T2C = JSIL.Memoize($asm14.System.Decimal)) ();
  };
  var $T2D = function () {
    return ($T2D = JSIL.Memoize($asm14.System.Guid)) ();
  };
  var $T2E = function () {
    return ($T2E = JSIL.Memoize($asm14.System.TimeSpan)) ();
  };
  var $T2F = function () {
    return ($T2F = JSIL.Memoize($asm14.System.Reflection.MethodBase)) ();
  };
  var $T30 = function () {
    return ($T30 = JSIL.Memoize($asm14.System.Delegate)) ();
  };
  var $T31 = function () {
    return ($T31 = JSIL.Memoize($asm0E.ProtoBuf.Serializers.IProtoTypeSerializer)) ();
  };
  var $T32 = function () {
    return ($T32 = JSIL.Memoize($asm0E.ProtoBuf.Serializers.TagDecorator)) ();
  };
  var $T33 = function () {
    return ($T33 = JSIL.Memoize($asm0E.ProtoBuf.WireType)) ();
  };
  var $T34 = function () {
    return ($T34 = JSIL.Memoize($asm0E.ProtoBuf.Serializers.EnumSerializer)) ();
  };
  var $T35 = function () {
    return ($T35 = JSIL.Memoize($asm0E.ProtoBuf.Serializers.TypeSerializer)) ();
  };
  var $T36 = function () {
    return ($T36 = JSIL.Memoize($asm0E.ProtoBuf.Serializers.SurrogateSerializer)) ();
  };
  var $T37 = function () {
    return ($T37 = JSIL.Memoize($asm14.System.Reflection.ConstructorInfo)) ();
  };
  var $T38 = function () {
    return ($T38 = JSIL.Memoize($asm0E.ProtoBuf.Serializers.TupleSerializer)) ();
  };
  var $T39 = function () {
    return ($T39 = JSIL.Memoize(System.Array.Of($asm14.System.Int32))) ();
  };
  var $T3A = function () {
    return ($T3A = JSIL.Memoize(System.Array.Of($asm0E.ProtoBuf.Serializers.IProtoSerializer))) ();
  };
  var $T3B = function () {
    return ($T3B = JSIL.Memoize($asm0E.ProtoBuf.Meta.BasicList_NodeEnumerator)) ();
  };
  var $T3C = function () {
    return ($T3C = JSIL.Memoize($asm0E.ProtoBuf.Meta.CallbackSet)) ();
  };
  var $T3D = function () {
    return ($T3D = JSIL.Memoize($asm0E.ProtoBuf.ProtoException)) ();
  };
  var $T3E = function () {
    return ($T3E = JSIL.Memoize(System.Array.Of($asm0E.ProtoBuf.Serializers.EnumSerializer_EnumPair))) ();
  };
  var $T3F = function () {
    return ($T3F = JSIL.Memoize($asm0E.ProtoBuf.Serializers.EnumSerializer_EnumPair)) ();
  };
  var $T40 = function () {
    return ($T40 = JSIL.Memoize(System.Array.Of($asm0E.ProtoBuf.Meta.ValueMember))) ();
  };
  var $T41 = function () {
    return ($T41 = JSIL.Memoize($asm0E.ProtoBuf.Meta.ValueMember_Comparer)) ();
  };
  var $T42 = function () {
    return ($T42 = JSIL.Memoize($asm14.System.Text.StringBuilder)) ();
  };
  var $T43 = function () {
    return ($T43 = JSIL.Memoize(System.Array.Of($asm14.System.Type))) ();
  };
  var $T44 = function () {
    return ($T44 = JSIL.Memoize(System.Array.Of($asm0E.ProtoBuf.Meta.SubType))) ();
  };
  var $T45 = function () {
    return ($T45 = JSIL.Memoize($asm0E.ProtoBuf.Meta.SubType_Comparer)) ();
  };
  var $T46 = function () {
    return ($T46 = JSIL.Memoize($asm14.System.Byte)) ();
  };
  var $T47 = function () {
    return ($T47 = JSIL.Memoize($asm14.System.Convert)) ();
  };
  var $T48 = function () {
    return ($T48 = JSIL.Memoize($asm14.System.Collections.Generic.IDictionary$b2)) ();
  };
  var $T49 = function () {
    return ($T49 = JSIL.Memoize($asm14.System.Collections.Generic.KeyValuePair$b2)) ();
  };
  var $T4A = function () {
    return ($T4A = JSIL.Memoize($asm14.System.Collections.Generic.Dictionary$b2)) ();
  };
  var $T4B = function () {
    return ($T4B = JSIL.Memoize($asm14.System.Collections.Generic.List$b1)) ();
  };
  var $T4C = function () {
    return ($T4C = JSIL.Memoize(System.Array.Of($asm14.System.Reflection.ConstructorInfo))) ();
  };
  var $T4D = function () {
    return ($T4D = JSIL.Memoize(System.Array.Of($asm14.System.Reflection.ParameterInfo))) ();
  };
  var $T4E = function () {
    return ($T4E = JSIL.Memoize($asm14.System.Reflection.ParameterInfo)) ();
  };
  var $T4F = function () {
    return ($T4F = JSIL.Memoize(System.Array.Of($asm14.System.Reflection.FieldInfo))) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm14.TypeRef("System.ArgumentNullException"), [$asm14.TypeRef("System.String")]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm14.TypeRef("System.ArgumentException"), [$asm14.TypeRef("System.String"), $asm14.TypeRef("System.String")]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm14.TypeRef("System.NotSupportedException"), [$asm14.TypeRef("System.String")]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0E.TypeRef("ProtoBuf.Meta.ValueMember"), [
        $asm0E.TypeRef("ProtoBuf.Meta.RuntimeTypeModel"), $asm14.TypeRef("System.Type"), 
        $asm14.TypeRef("System.Int32"), $asm14.TypeRef("System.Reflection.MemberInfo"), 
        $asm14.TypeRef("System.Type"), $asm14.TypeRef("System.Type"), 
        $asm14.TypeRef("System.Type"), $asm0E.TypeRef("ProtoBuf.DataFormat"), 
        $asm14.TypeRef("System.Object")
      ]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(JSIL.MethodSignature.Action($asm0E.TypeRef("ProtoBuf.Meta.ValueMember")))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.ConstructorSignature($asm14.TypeRef("System.ArgumentOutOfRangeException"), [$asm14.TypeRef("System.String")]))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(new JSIL.ConstructorSignature($asm14.TypeRef("System.InvalidOperationException"), [$asm14.TypeRef("System.String")]))) ();
  };
  var $S07 = function () {
    return ($S07 = JSIL.Memoize(new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("ProtoBuf.Meta.AttributeMap")]), [
        $asm0E.TypeRef("ProtoBuf.Meta.TypeModel"), $asm14.TypeRef("System.Type"), 
        $asm14.TypeRef("System.Boolean")
      ]))) ();
  };
  var $S08 = function () {
    return ($S08 = JSIL.Memoize(new JSIL.ConstructorSignature($asm14.TypeRef("System.InvalidOperationException"), [$asm14.TypeRef("System.String"), $asm14.TypeRef("System.Exception")]))) ();
  };
  var $S09 = function () {
    return ($S09 = JSIL.Memoize(new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("ProtoBuf.Meta.AttributeMap")]), [
        $asm0E.TypeRef("ProtoBuf.Meta.TypeModel"), $asm14.TypeRef("System.Reflection.MemberInfo"), 
        $asm14.TypeRef("System.Boolean")
      ]))) ();
  };
  var $S0A = function () {
    return ($S0A = JSIL.Memoize(new JSIL.MethodSignature($asm0E.TypeRef("ProtoBuf.Meta.MetaType"), [
        $asm14.TypeRef("System.Reflection.MethodInfo"), $asm14.TypeRef("System.Reflection.MethodInfo"), 
        $asm14.TypeRef("System.Reflection.MethodInfo"), $asm14.TypeRef("System.Reflection.MethodInfo")
      ]))) ();
  };
  var $S0B = function () {
    return ($S0B = JSIL.Memoize(new JSIL.ConstructorSignature($asm14.TypeRef("System.ArgumentException"), [$asm14.TypeRef("System.String")]))) ();
  };
  var $S0C = function () {
    return ($S0C = JSIL.Memoize(new JSIL.ConstructorSignature($asm0E.TypeRef("ProtoBuf.Meta.ValueMember"), [
        $asm0E.TypeRef("ProtoBuf.Meta.RuntimeTypeModel"), $asm14.TypeRef("System.Int32"), 
        $asm14.TypeRef("System.Type"), $asm14.TypeRef("System.Type"), 
        $asm14.TypeRef("System.Type"), $asm0E.TypeRef("ProtoBuf.DataFormat")
      ]))) ();
  };
  var $S0D = function () {
    return ($S0D = JSIL.Memoize(new JSIL.ConstructorSignature($asm14.TypeRef("System.InvalidOperationException"), null))) ();
  };
  var $S0E = function () {
    return ($S0E = JSIL.Memoize(new JSIL.ConstructorSignature($asm0E.TypeRef("ProtoBuf.ProtoException"), [$asm14.TypeRef("System.String")]))) ();
  };
  var $S0F = function () {
    return ($S0F = JSIL.Memoize(new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", ["!!0"]), $asm14.TypeRef("System.Collections.Generic.IComparer`1", ["!!0"])], ["T"]))) ();
  };
  var $S10 = function () {
    return ($S10 = JSIL.Memoize(new JSIL.ConstructorSignature($asm14.TypeRef("System.Text.StringBuilder"), [$asm14.TypeRef("System.String")]))) ();
  };
  var $S11 = function () {
    return ($S11 = JSIL.Memoize(new JSIL.MethodSignature($asm14.TypeRef("System.Text.StringBuilder"), [$asm14.TypeRef("System.Char")]))) ();
  };
  var $S12 = function () {
    return ($S12 = JSIL.Memoize(new JSIL.MethodSignature($asm14.TypeRef("System.Text.StringBuilder"), [$asm14.TypeRef("System.String")]))) ();
  };
  var $S13 = function () {
    return ($S13 = JSIL.Memoize(new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", ["!!0"]), $asm14.TypeRef("System.Collections.Generic.IComparer`1", ["!!0"])], ["T"]))) ();
  };
  var $S14 = function () {
    return ($S14 = JSIL.Memoize(new JSIL.MethodSignature($asm14.TypeRef("System.Text.StringBuilder"), [$asm14.TypeRef("System.Char"), $asm14.TypeRef("System.Int32")]))) ();
  };
  var $S15 = function () {
    return ($S15 = JSIL.Memoize(new JSIL.MethodSignature($asm14.TypeRef("System.Int32"), [$asm14.TypeRef("System.Object")]))) ();
  };
  var $S16 = function () {
    return ($S16 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0E.TypeRef("ProtoBuf.ProtoMemberAttribute"), [$asm14.TypeRef("System.Int32"), $asm14.TypeRef("System.Boolean")]))) ();
  };
  var $S17 = function () {
    return ($S17 = JSIL.Memoize(new JSIL.MethodSignature($asm0E.TypeRef("ProtoBuf.Meta.MetaType"), [$asm14.TypeRef("System.Reflection.MethodInfo")]))) ();
  };
  var $S18 = function () {
    return ($S18 = JSIL.Memoize(new JSIL.MethodSignature($asm14.TypeRef("System.Text.StringBuilder"), [$asm14.TypeRef("System.Int32")]))) ();
  };
  var $S19 = function () {
    return ($S19 = JSIL.Memoize(new JSIL.MethodSignature($asm14.TypeRef("System.Text.StringBuilder"), [$asm14.TypeRef("System.Object")]))) ();
  };


  function MetaType__ctor (model, type, factory) {
    this.fields = new ($T04())();
    this.factory = factory;
    var flag = model === null;
    if (flag) {
      throw $S00().Construct("model");
    }
    var flag2 = type === null;
    if (flag2) {
      throw $S00().Construct("type");
    }
    var coreSerializer = model.TryGetBasicTypeSerializer(type);
    if (coreSerializer !== null) {
      throw $thisType.InbuiltType(type);
    }
    this.type = type;
    this.model = model;
    var flag4 = $T08().IsEnum(type);
    if (flag4) {
      this.set_EnumPassthru(type.IsDefined(model.MapType($T0B().__Type__), false));
    }
  }; 

  function MetaType_Add$00 (fieldNumber, memberName) {
    this.AddField(
      fieldNumber, 
      memberName, 
      null, 
      null, 
      null
    );
    return this;
  }; 

  function MetaType_Add$01 (memberName) {
    this.Add(this.GetNextFieldNumber(), memberName);
    return this;
  }; 

  function MetaType_Add$02 (memberNames) {
    var flag = memberNames === null;
    if (flag) {
      throw $S00().Construct("memberNames");
    }
    var next = (this.GetNextFieldNumber() | 0);

    for (var i = 0; i < (memberNames.length | 0); ) {
      var num = next;
      next = ((num + 1) | 0);
      this.Add(num, memberNames[i]);
      num = i;
      i = ((num + 1) | 0);
    }
    return this;
  }; 

  function MetaType_Add$03 (fieldNumber, memberName, defaultValue) {
    this.AddField(
      fieldNumber, 
      memberName, 
      null, 
      null, 
      defaultValue
    );
    return this;
  }; 

  function MetaType_Add$04 (fieldNumber, memberName, itemType, defaultType) {
    this.AddField(
      fieldNumber, 
      memberName, 
      itemType, 
      defaultType, 
      null
    );
    return this;
  }; 

  function MetaType_Add$05 (member) {
    var opaqueToken = new JSIL.BoxedVariable(0);
    try {
      (this.model).TakeLock(/* ref */ opaqueToken);
      this.ThrowIfFrozen();
      (this.fields).Add(member);
    } finally {
      (this.model).ReleaseLock(opaqueToken.get());
    }
  }; 

  function MetaType_AddField$06 (fieldNumber, memberName) {
    return this.AddField(
      fieldNumber, 
      memberName, 
      null, 
      null, 
      null
    );
  }; 

  function MetaType_AddField$07 (fieldNumber, memberName, itemType, defaultType) {
    return this.AddField(
      fieldNumber, 
      memberName, 
      itemType, 
      defaultType, 
      null
    );
  }; 

  function MetaType_AddField$08 (fieldNumber, memberName, $itemType, $defaultType, defaultValue) {
    var defaultType = new JSIL.BoxedVariable($defaultType);
    var itemType = new JSIL.BoxedVariable($itemType);
    var mi = null;
    var members = (this.type).GetMember(memberName, (
        $T08().IsEnum(this.type)
           ? $T12().$Flags("Public", "Static")
           : $T12().$Flags("Instance", "NonPublic", "Public"))
    );
    var flag = (members !== null) && 
    ((members.length | 0) === 1);
    if (flag) {
      mi = members[0];
    }
    var flag2 = mi === null;
    if (flag2) {
      throw $S01().Construct(JSIL.ConcatString("Unable to determine member: ", memberName), "memberName");
    }
    var pi = $T14().$As(mi);
    if (pi === null) {
      var fi = $T15().$As(mi);
      var flag4 = fi === null;
      if (flag4) {
        throw $S02().Construct((JSIL.GetType(mi)).get_Name());
      }
      var miType = fi.get_FieldType();
    } else {
      miType = pi.get_PropertyType();
    }
    $thisType.ResolveListTypes(this.model, miType, /* ref */ itemType, /* ref */ defaultType);
    var newField = $S03().Construct(this.model, this.type, fieldNumber, mi, miType, itemType.get(), defaultType.get(), $T17().Default, defaultValue);
    $S04().CallVirtual("Add", null, this, newField);
    return newField;
  }; 

  function MetaType_AddSubType$09 (fieldNumber, derivedType) {
    return this.AddSubType(fieldNumber, derivedType, $T17().Default);
  }; 

  function MetaType_AddSubType$0A (fieldNumber, derivedType, dataFormat) {
    var flag = derivedType === null;
    if (flag) {
      throw $S00().Construct("derivedType");
    }
    if ((fieldNumber | 0) < 1) {
      throw $S05().Construct("fieldNumber");
    }
    var flag3 = (!(this.type).get_IsClass() && 
      !(this.type).get_IsInterface()) || 
    (this.type).get_IsSealed();
    if (flag3) {
      throw $S06().Construct("Sub-types can only be added to non-sealed classes");
    }
    var flag4 = !this.IsValidSubType(derivedType);
    if (flag4) {
      throw $S01().Construct((derivedType.get_Name() + " is not a valid sub-type of " + (this.type).get_Name()), "derivedType");
    }
    var derivedMeta = (this.model).get_Item(derivedType);
    this.ThrowIfFrozen();
    derivedMeta.ThrowIfFrozen();
    var subType = new ($T1A())(fieldNumber, derivedMeta, dataFormat);
    this.ThrowIfFrozen();
    derivedMeta.SetBaseType(this);
    if (this.subTypes === null) {
      this.subTypes = new ($T04())();
    }
    (this.subTypes).Add(subType);
    return this;
  }; 

  function MetaType_ApplyDefaultBehaviour$0B ($exception) {
    var tmp = new JSIL.BoxedVariable(null);
    var property = null, field = null, method = null;
    var flag = !(($thisType.GetBaseType(this) === null) || 
      ((this.model).FindWithoutAdd($thisType.GetBaseType(this)) !== null)) && 
    ($thisType.GetContractFamily(this.model, $thisType.GetBaseType(this), null) > $T1C().None);
    if (flag) {
      (this.model).FindOrAddAuto($thisType.GetBaseType(this), true, false, false);
    }
    var typeAttribs = $S07().CallStatic($T1E(), "Create", null, this.model, this.type, false);
    var family = $thisType.GetContractFamily(this.model, this.type, typeAttribs);
    var flag2 = family === $T1C().AutoTuple;
    if (flag2) {
      this.SetFlag(64, true, true);
    }
    var isEnum = !this.get_EnumPassthru() && 
    $T08().IsEnum(this.type);
    var flag3 = ((family.valueOf() | 0) === 0) && 
    !isEnum;
    var forced = new JSIL.BoxedVariable(false);
    var effectiveType = new JSIL.BoxedVariable(null);
    var callbacks = new JSIL.BoxedVariable(null);
    if (!flag3) {
      var partialIgnores = null;
      var partialMembers = null;
      var dataMemberOffset = 0;
      var implicitFirstTag = 1;
      var inferTagByName = (this.model).get_InferTagFromNameDefault();
      var implicitMode = $T20().None;
      var name = null;

      for (var i = 0; i < (typeAttribs.length | 0); ) {
        var item = typeAttribs[i];
        var fullAttributeTypeName = (item.get_AttributeType()).get_FullName();
        var flag4 = !isEnum && 
        (fullAttributeTypeName == "ProtoBuf.ProtoIncludeAttribute");
        if (flag4) {
          var tag = 0;
          var flag5 = item.TryGet("tag", /* ref */ tmp);
          if (flag5) {
            tag = $T0C().$Cast(tmp.get());
          }
          var dataFormat = $T17().Default;
          var flag6 = item.TryGet("DataFormat", /* ref */ tmp);
          if (flag6) {
            dataFormat = $T17().$Cast($T0C().$Cast(tmp.get()));
          }
          var knownType = null;
          try {
            var flag7 = item.TryGet("knownTypeName", /* ref */ tmp);
            if (flag7) {
              knownType = (this.model).GetType($T0D().$Cast(tmp.get()), (this.type).get_Assembly());
            } else {
              var flag8 = item.TryGet("knownType", /* ref */ tmp);
              if (flag8) {
                knownType = $T02().$Cast(tmp.get());
              }
            }
          } catch ($exception) {
            throw $S08().Construct(JSIL.ConcatString("Unable to resolve sub-type of: ", (this.type).get_FullName()), $exception);
          }
          var flag9 = knownType === null;
          if (flag9) {
            throw $S06().Construct(JSIL.ConcatString("Unable to resolve sub-type of: ", (this.type).get_FullName()));
          }
          var flag10 = this.IsValidSubType(knownType);
          if (flag10) {
            this.AddSubType(tag, knownType, dataFormat);
          }
        }
        var flag11 = (fullAttributeTypeName == "ProtoBuf.ProtoPartialIgnoreAttribute");
        if (flag11) {
          var flag12 = item.TryGet("MemberName", /* ref */ tmp) && 
          (tmp.get() !== null);
          if (flag12) {
            var flag13 = partialIgnores === null;
            if (flag13) {
              partialIgnores = new ($T04())();
            }
            partialIgnores.Add($T0D().$Cast(tmp.get()));
          }
        }
        var flag14 = !isEnum && 
        (fullAttributeTypeName == "ProtoBuf.ProtoPartialMemberAttribute");
        if (flag14) {
          var flag15 = partialMembers === null;
          if (flag15) {
            partialMembers = new ($T04())();
          }
          partialMembers.Add(item);
        }
        var flag16 = (fullAttributeTypeName == "ProtoBuf.ProtoContractAttribute");
        if (flag16) {
          var flag17 = item.TryGet("Name", /* ref */ tmp);
          if (flag17) {
            name = $T0D().$Cast(tmp.get());
          }
          if ($T08().IsEnum(this.type)) {
            var flag19 = item.TryGet("EnumPassthruHasValue", false, /* ref */ tmp) && 
            $T05().$Cast(tmp.get());
            if (flag19) {
              var flag20 = item.TryGet("EnumPassthru", /* ref */ tmp);
              if (flag20) {
                this.set_EnumPassthru($T05().$Cast(tmp.get()));
                var enumPassthru = this.get_EnumPassthru();
                if (enumPassthru) {
                  isEnum = false;
                }
              }
            }
          } else {
            var flag21 = item.TryGet("DataMemberOffset", /* ref */ tmp);
            if (flag21) {
              dataMemberOffset = $T0C().$Cast(tmp.get());
            }
            var flag22 = item.TryGet("InferTagFromNameHasValue", false, /* ref */ tmp) && 
            $T05().$Cast(tmp.get());
            if (flag22) {
              var flag23 = item.TryGet("InferTagFromName", /* ref */ tmp);
              if (flag23) {
                inferTagByName = $T05().$Cast(tmp.get());
              }
            }
            var flag24 = item.TryGet("ImplicitFields", /* ref */ tmp) && 
            (tmp.get() !== null);
            if (flag24) {
              implicitMode = $T20().$Cast($T0C().$Cast(tmp.get()));
            }
            var flag25 = item.TryGet("SkipConstructor", /* ref */ tmp);
            if (flag25) {
              this.set_UseConstructor(!$T05().$Cast(tmp.get()));
            }
            var flag26 = item.TryGet("IgnoreListHandling", /* ref */ tmp);
            if (flag26) {
              this.set_IgnoreListHandling($T05().$Cast(tmp.get()));
            }
            var flag27 = item.TryGet("AsReferenceDefault", /* ref */ tmp);
            if (flag27) {
              this.set_AsReferenceDefault($T05().$Cast(tmp.get()));
            }
            var flag28 = item.TryGet("ImplicitFirstTag", /* ref */ tmp) && 
            ($T0C().$Cast(tmp.get()) > 0);
            if (flag28) {
              implicitFirstTag = $T0C().$Cast(tmp.get());
            }
          }
        }
        var flag29 = (fullAttributeTypeName == "System.Runtime.Serialization.DataContractAttribute");
        if (flag29) {
          var flag30 = (name === null) && 
          item.TryGet("Name", /* ref */ tmp);
          if (flag30) {
            name = $T0D().$Cast(tmp.get());
          }
        }
        var flag31 = (fullAttributeTypeName == "System.Xml.Serialization.XmlTypeAttribute");
        if (flag31) {
          var flag32 = (name === null) && 
          item.TryGet("TypeName", /* ref */ tmp);
          if (flag32) {
            name = $T0D().$Cast(tmp.get());
          }
        }
        var num = i;
        i = ((num + 1) | 0);
      }
      var flag33 = !$T08().IsNullOrEmpty(name);
      if (flag33) {
        this.set_Name(name);
      }
      var flag34 = implicitMode > $T20().None;
      if (flag34) {
        family = $T1C().$Cast(family & $T1C().ProtoBuf);
      }
      callbacks.set(null);
      var members = new ($T04())();
      var foundList = (this.type).GetMembers((
          isEnum
             ? $T12().$Flags("Public", "Static")
             : $T12().$Flags("Instance", "NonPublic", "Public"))
      );
      var array = foundList;

      for (var j = 0; j < (array.length | 0); j = ((j + 1) | 0)) {
        var member = array[j];
        var flag35 = member.get_DeclaringType() !== this.type;
        if (!flag35) {
          var flag36 = member.IsDefined((this.model).MapType($T21().__Type__), true);
          if (!flag36) {
            var flag37 = (partialIgnores !== null) && 
            partialIgnores.Contains(member.get_Name());
            if (!flag37) {
              forced.set(false);
              var flag38 = (property = $T14().$As(member)) !== null;
              if (flag38) {
                var flag39 = isEnum;
                if (!flag39) {
                  effectiveType.set(property.get_PropertyType());
                  var isPublic = $T08().GetGetMethod(property, false, false) !== null;
                  var isField = false;
                  $thisType.ApplyDefaultBehaviour_AddMembers(
                    this.model, 
                    family, 
                    isEnum, 
                    partialMembers, 
                    dataMemberOffset, 
                    inferTagByName, 
                    implicitMode, 
                    members, 
                    member, 
                    /* ref */ forced, 
                    isPublic, 
                    isField, 
                    /* ref */ effectiveType
                  );
                }
              } else {
                var flag40 = (field = $T15().$As(member)) !== null;
                if (flag40) {
                  effectiveType.set(field.get_FieldType());
                  isPublic = field.get_IsPublic();
                  isField = true;
                  var flag41 = isEnum && 
                  !field.get_IsStatic();
                  if (!flag41) {
                    $thisType.ApplyDefaultBehaviour_AddMembers(
                      this.model, 
                      family, 
                      isEnum, 
                      partialMembers, 
                      dataMemberOffset, 
                      inferTagByName, 
                      implicitMode, 
                      members, 
                      member, 
                      /* ref */ forced, 
                      isPublic, 
                      isField, 
                      /* ref */ effectiveType
                    );
                  }
                } else {
                  var flag42 = (method = $T03().$As(member)) !== null;
                  if (flag42) {
                    var flag43 = isEnum;
                    if (!flag43) {
                      var memberAttribs = $S09().CallStatic($T1E(), "Create", null, this.model, method, false);
                      var flag44 = (memberAttribs !== null) && 
                      ((memberAttribs.length | 0) > 0);
                      if (flag44) {
                        $thisType.CheckForCallback(
                          method, 
                          memberAttribs, 
                          "ProtoBuf.ProtoBeforeSerializationAttribute", 
                          /* ref */ callbacks, 
                          0
                        );
                        $thisType.CheckForCallback(
                          method, 
                          memberAttribs, 
                          "ProtoBuf.ProtoAfterSerializationAttribute", 
                          /* ref */ callbacks, 
                          1
                        );
                        $thisType.CheckForCallback(
                          method, 
                          memberAttribs, 
                          "ProtoBuf.ProtoBeforeDeserializationAttribute", 
                          /* ref */ callbacks, 
                          2
                        );
                        $thisType.CheckForCallback(
                          method, 
                          memberAttribs, 
                          "ProtoBuf.ProtoAfterDeserializationAttribute", 
                          /* ref */ callbacks, 
                          3
                        );
                        $thisType.CheckForCallback(
                          method, 
                          memberAttribs, 
                          "System.Runtime.Serialization.OnSerializingAttribute", 
                          /* ref */ callbacks, 
                          4
                        );
                        $thisType.CheckForCallback(
                          method, 
                          memberAttribs, 
                          "System.Runtime.Serialization.OnSerializedAttribute", 
                          /* ref */ callbacks, 
                          5
                        );
                        $thisType.CheckForCallback(
                          method, 
                          memberAttribs, 
                          "System.Runtime.Serialization.OnDeserializingAttribute", 
                          /* ref */ callbacks, 
                          6
                        );
                        $thisType.CheckForCallback(
                          method, 
                          memberAttribs, 
                          "System.Runtime.Serialization.OnDeserializedAttribute", 
                          /* ref */ callbacks, 
                          7
                        );
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      var arr = JSIL.Array.New($T23(), members.get_Count());
      members.CopyTo(arr, 0);
      var flag45 = inferTagByName || 
      (implicitMode > $T20().None);
      if (flag45) {
        Array.prototype.sort.call(arr);
        var nextTag = implicitFirstTag;
        var array2 = arr;

        for (var k = 0; k < (array2.length | 0); k = ((k + 1) | 0)) {
          var normalizedAttribute = array2[k];
          var flag46 = !normalizedAttribute.TagIsPinned;
          if (flag46) {
            var arg_7C4_0 = normalizedAttribute;
            num = nextTag;
            nextTag = ((num + 1) | 0);
            arg_7C4_0.Rebase(num);
          }
        }
      }
      var array3 = arr;

      for (var l = 0; l < (array3.length | 0); l = ((l + 1) | 0)) {
        var normalizedAttribute2 = array3[l];
        var vm = this.ApplyDefaultBehaviour(isEnum, normalizedAttribute2);
        var flag47 = vm !== null;
        if (flag47) {
          $S04().CallVirtual("Add", null, this, vm);
        }
      }
      var flag48 = callbacks.get() !== null;
      if (flag48) {
        $S0A().CallVirtual("SetCallbacks", null, this, 
          $thisType.Coalesce(callbacks.get(), 0, 4), 
          $thisType.Coalesce(callbacks.get(), 1, 5), 
          $thisType.Coalesce(callbacks.get(), 2, 6), 
          $thisType.Coalesce(callbacks.get(), 3, 7)
        );
      }
    }
  }; 

  function MetaType_ApplyDefaultBehaviour$0C (isEnum, normalizedAttribute) {
    var tmp = new JSIL.BoxedVariable(null);
    var member = null, attrib = null;
    var flag = (normalizedAttribute === null) || 
    ((member = normalizedAttribute.Member) === null);
    var itemType = new JSIL.BoxedVariable(null);
    var defaultType = new JSIL.BoxedVariable(null);
    if (flag) {
      var result = null;
    } else {
      var effectiveType = $T08().GetMemberType(member);
      itemType.set(null);
      defaultType.set(null);
      $thisType.ResolveListTypes(this.model, effectiveType, /* ref */ itemType, /* ref */ defaultType);
      var flag2 = itemType.get() !== null;
      if (flag2) {
        var idx = ((this.model).FindOrAddAuto(effectiveType, false, true, false) | 0);
        var flag3 = (idx >= 0) && 
        ((this.model).get_Item(effectiveType)).get_IgnoreListHandling();
        if (flag3) {
          itemType.set(null);
          defaultType.set(null);
        }
      }
      var attribs = $S09().CallStatic($T1E(), "Create", null, this.model, member, true);
      var defaultValue = null;
      var useImplicitZeroDefaults = (this.model).get_UseImplicitZeroDefaults();
      if (useImplicitZeroDefaults) {
        var typeCode = $T08().GetTypeCode(effectiveType);
        switch (typeCode.valueOf()) {
          case 3: 
            defaultValue = $T05().$Box(false);
            break;

          case 4: 
            defaultValue = $T26().$Box("\x00");
            break;

          case 5: 
            defaultValue = $T0C().$Box(0);
            break;

          case 6: 
            defaultValue = $T0C().$Box(0);
            break;

          case 7: 
            defaultValue = $T0C().$Box(0);
            break;

          case 8: 
            defaultValue = $T27().$Box(0);
            break;

          case 9: 
            defaultValue = $T0C().$Box(0);
            break;

          case 10: 
            defaultValue = $T27().$Box(0);
            break;

          case 11: 
            defaultValue = $T28().Create(0, 0, 0);
            break;

          case 12: 
            defaultValue = $T29().Create(0, 0, 0);
            break;

          case 13: 
            defaultValue = $T2A().$Box(0);
            break;

          case 14: 
            defaultValue = $T2B().$Box(0);
            break;

          case 15: 
            defaultValue = $T2C().Zero;
            break;

          default: 
            if (typeCode !== $T25().TimeSpan) {
              if (typeCode === $T25().Guid) {
                defaultValue = $T2D().Empty.MemberwiseClone();
              }
            } else {
              defaultValue = $T2E().Zero.MemberwiseClone();
            }
            break;

        }
      }
      var flag4 = (attrib = $thisType.GetAttribute(attribs, "System.ComponentModel.DefaultValueAttribute")) !== null;
      if (flag4) {
        var flag5 = attrib.TryGet("Value", /* ref */ tmp);
        if (flag5) {
          defaultValue = tmp.get();
        }
      }
      var vm = (
        (isEnum || 
          ((normalizedAttribute.get_Tag() | 0) > 0))
           ? $S03().Construct(this.model, this.type, normalizedAttribute.get_Tag(), member, effectiveType, itemType.get(), defaultType.get(), normalizedAttribute.get_DataFormat(), defaultValue)
           : null)
      ;
      var flag6 = vm !== null;
      if (flag6) {
        var finalType = this.type;
        var prop = $T08().GetProperty(finalType, JSIL.ConcatString(member.get_Name(), "Specified"), true);
        var getMethod = $T08().GetGetMethod(prop, true, true);
        var flag7 = (getMethod === null) || 
        getMethod.get_IsStatic();
        if (flag7) {
          prop = null;
        }
        var flag8 = prop !== null;
        if (flag8) {
          vm.SetSpecified(getMethod, $T08().GetSetMethod(prop, true, true));
        } else {
          var method = $T08().GetInstanceMethod(finalType, JSIL.ConcatString("ShouldSerialize", member.get_Name()), $T08().EmptyTypes);
          var flag9 = (method !== null) && 
          (method.get_ReturnType() === (this.model).MapType($T05().__Type__));
          if (flag9) {
            vm.SetSpecified(method, null);
          }
        }
        var flag10 = !$T08().IsNullOrEmpty(normalizedAttribute.get_Name());
        if (flag10) {
          vm.SetName(normalizedAttribute.get_Name());
        }
        vm.set_IsPacked(normalizedAttribute.get_IsPacked());
        vm.set_IsRequired(normalizedAttribute.get_IsRequired());
        vm.set_OverwriteList(normalizedAttribute.get_OverwriteList());
        var asReferenceHasValue = normalizedAttribute.get_AsReferenceHasValue();
        if (asReferenceHasValue) {
          vm.set_AsReference(normalizedAttribute.get_AsReference());
        }
        vm.set_DynamicType(normalizedAttribute.get_DynamicType());
      }
      result = vm;
    }
    return result;
  }; 

  function MetaType_ApplyDefaultBehaviour_AddMembers (model, family, isEnum, partialMembers, dataMemberOffset, inferTagByName, implicitMode, members, member, /* ref */ forced, isPublic, isField, /* ref */ effectiveType) {
    if (implicitMode !== $T20().AllPublic) {
      if (implicitMode === $T20().AllFields) {
        if (isField) {
          forced.set(true);
        }
      }
    } else if (isPublic) {
      forced.set(true);
    }
    var flag = (effectiveType.get()).IsSubclassOf(model.MapType($T30().__Type__));
    if (flag) {
      effectiveType.set(null);
    }
    var flag2 = effectiveType.get() !== null;
    if (flag2) {
      var normalizedAttribute = $thisType.NormalizeProtoMember(
        model, 
        member, 
        family, 
        forced.get(), 
        isEnum, 
        partialMembers, 
        dataMemberOffset, 
        inferTagByName
      );
      var flag3 = normalizedAttribute !== null;
      if (flag3) {
        members.Add(normalizedAttribute);
      }
    }
  }; 

  function MetaType_BuildSerializer () {
    var mapping = new JSIL.BoxedVariable(null);
    var mtBase = null;
    var itemType = new JSIL.BoxedVariable(null);
    var defaultType = new JSIL.BoxedVariable(null);
    if ($T08().IsEnum(this.type)) {
      var result = new ($T32())(1, $T33().Variant, false, new ($T34())(this.type, this.GetEnumMap()));
    } else {
      itemType.set((
          this.get_IgnoreListHandling()
             ? null
             : $T0A().GetListItemType(this.model, this.type))
      );
      var flag2 = itemType.get() !== null;
      if (flag2) {
        if (this.surrogate !== null) {
          throw $S0B().Construct("Repeated data (a list, collection, etc) has inbuilt behaviour and cannot use a surrogate");
        }
        var flag4 = (this.subTypes !== null) && 
        (((this.subTypes).get_Count() | 0) > 0);
        if (flag4) {
          throw $S0B().Construct("Repeated data (a list, collection, etc) has inbuilt behaviour and cannot be subclassed");
        }
        defaultType.set(null);
        $thisType.ResolveListTypes(this.model, this.type, /* ref */ itemType, /* ref */ defaultType);
        var fakeMember = $S0C().Construct(this.model, 1, this.type, itemType.get(), defaultType.get(), $T17().Default);
        result = new ($T35())(this.model, this.type, JSIL.Array.New($T0C(), [1]), JSIL.Array.New($T07(), [fakeMember.get_Serializer()]), null, true, true, null, this.constructType, this.factory);
      } else {
        if (this.surrogate !== null) {

          for (var mt = (this.model).get_Item(this.surrogate); (mtBase = mt.baseType) !== null; ) {
            mt = mtBase;
          }
          result = new ($T36())(this.model, this.type, this.surrogate, mt.get_Serializer());
        } else {
          var isAutoTuple = this.get_IsAutoTuple();
          if (isAutoTuple) {
            var ctor = $thisType.ResolveTupleConstructor(this.type, /* ref */ mapping);
            var flag6 = ctor === null;
            if (flag6) {
              throw $S0D().Construct();
            }
            result = new ($T38())(this.model, ctor, mapping.get());
          } else {
            (this.fields).Trim();
            var fieldCount = ((this.fields).get_Count() | 0);
            var subTypeCount = ((
              (this.subTypes === null)
                 ? 0
                 : (this.subTypes).get_Count())
             | 0);
            var fieldNumbers = JSIL.Array.New($T0C(), ((fieldCount + subTypeCount) | 0));
            var serializers = JSIL.Array.New($T07(), ((fieldCount + subTypeCount) | 0));
            var i = 0;
            var flag7 = subTypeCount > 0;
            if (flag7) {

              for (var enumerator = (this.subTypes).GetEnumerator(); enumerator.MoveNext(); ) {
                var subType = $T1A().$Cast(enumerator.get_Current());
                var flag8 = !(subType.get_DerivedType()).get_IgnoreListHandling() && 
                ((this.model).MapType($thisType.ienumerable)).IsAssignableFrom((subType.get_DerivedType()).get_Type());
                if (flag8) {
                  throw $S0B().Construct("Repeated data (a list, collection, etc) has inbuilt behaviour and cannot be used as a subclass");
                }
                fieldNumbers[i] = (subType.get_FieldNumber() | 0);
                var arg_293_0 = serializers;
                var num = i;
                i = ((num + 1) | 0);
                arg_293_0[num] = subType.get_Serializer();
              }
            }
            var flag9 = fieldCount > 0;
            if (flag9) {

              for (var enumerator2 = (this.fields).GetEnumerator(); enumerator2.MoveNext(); ) {
                var member = $T10().$Cast(enumerator2.get_Current());
                fieldNumbers[i] = (member.get_FieldNumber() | 0);
                var arg_2E9_0 = serializers;
                num = i;
                i = ((num + 1) | 0);
                arg_2E9_0[num] = member.get_Serializer();
              }
            }
            var baseCtorCallbacks = null;

            for (var tmp = this.get_BaseType(); tmp !== null; tmp = tmp.get_BaseType()) {
              var method = (
                tmp.get_HasCallbacks()
                   ? (tmp.get_Callbacks()).get_BeforeDeserialize()
                   : null)
              ;
              var flag10 = method !== null;
              if (flag10) {
                var flag11 = baseCtorCallbacks === null;
                if (flag11) {
                  baseCtorCallbacks = new ($T04())();
                }
                baseCtorCallbacks.Add(method);
              }
            }
            var arr = null;
            var flag12 = baseCtorCallbacks !== null;
            if (flag12) {
              arr = JSIL.Array.New($T03(), baseCtorCallbacks.get_Count());
              baseCtorCallbacks.CopyTo(arr, 0);
              $T24().Reverse(arr);
            }
            result = new ($T35())(this.model, this.type, fieldNumbers, serializers, arr, (this.baseType === null), this.get_UseConstructor(), this.callbacks, this.constructType, this.factory);
          }
        }
      }
    }
    return result;
  }; 

  function MetaType_CheckForCallback (method, attributes, callbackTypeName, /* ref */ callbacks, index) {

    for (var i = 0; i < (attributes.length | 0); ) {
      var flag = (((attributes[i]).get_AttributeType()).get_FullName() == callbackTypeName);
      if (flag) {
        var flag2 = callbacks.get() === null;
        if (flag2) {
          callbacks.set(JSIL.Array.New($T03(), 8));
        } else {
          var flag3 = callbacks.get()[index] !== null;
          if (flag3) {
            var reflected = method.get_ReflectedType();
            throw $S0E().Construct(("Duplicate " + callbackTypeName + " callbacks on " + reflected.get_FullName()));
          }
        }
        callbacks.get()[index] = method;
      }
      var num = i;
      i = ((num + 1) | 0);
    }
  }; 

  function MetaType_Coalesce (arr, x, y) {
    var mi = arr[x];
    var flag = mi === null;
    if (flag) {
      mi = arr[y];
    }
    return mi;
  }; 

  function MetaType_get_AsReferenceDefault () {
    return this.HasFlag(32);
  }; 

  function MetaType_get_BaseType () {
    return this.baseType;
  }; 

  function MetaType_get_Callbacks () {
    if (this.callbacks === null) {
      this.callbacks = new ($T3C())(this);
    }
    return this.callbacks;
  }; 

  function MetaType_get_ConstructType () {
    return this.constructType;
  }; 

  function MetaType_get_EnumPassthru () {
    return this.HasFlag(2);
  }; 

  function MetaType_get_Fields () {
    return this.fields;
  }; 

  function MetaType_get_HasCallbacks () {
    return ((this.callbacks !== null) && (this.callbacks).get_NonTrivial());
  }; 

  function MetaType_get_HasSubtypes () {
    return ((this.subTypes !== null) && (((this.subTypes).get_Count() | 0) > 0));
  }; 

  function MetaType_get_IgnoreListHandling () {
    return this.HasFlag(128);
  }; 

  function MetaType_get_IncludeSerializerMethod () {
    return !this.HasFlag(8);
  }; 

  function MetaType_get_IsAutoTuple () {
    return this.HasFlag(64);
  }; 

  function MetaType_get_IsList () {
    var itemType = (
      this.get_IgnoreListHandling()
         ? null
         : $T0A().GetListItemType(this.model, this.type))
    ;
    return (itemType !== null);
  }; 

  function MetaType_get_IsValueType () {
    return (this.type).get_IsValueType();
  }; 

  function MetaType_get_Item$0D (fieldNumber) {

    for (var enumerator = (this.fields).GetEnumerator(); enumerator.MoveNext(); ) {
      var member = $T10().$Cast(enumerator.get_Current());
      var flag = (member.get_FieldNumber() | 0) === (fieldNumber | 0);
      if (flag) {
        var result = member;
        return result;
      }
    }
    result = null;
    return result;
  }; 

  function MetaType_get_Item$0E (member) {
    var flag = member === null;
    if (flag) {
      var result = null;
    } else {

      for (var enumerator = (this.fields).GetEnumerator(); enumerator.MoveNext(); ) {
        var x = $T10().$Cast(enumerator.get_Current());
        var flag2 = x.get_Member() === member;
        if (flag2) {
          result = x;
          return result;
        }
      }
      result = null;
    }
    return result;
  }; 

  function MetaType_get_Model () {
    return this.model;
  }; 

  function MetaType_get_Name () {
    return this.$name;
  }; 

  function MetaType_get_Pending () {
    return this.HasFlag(1);
  }; 

  function MetaType_get_Serializer () {
    var opaqueToken = new JSIL.BoxedVariable(0);
    if (this.serializer === null) {
      opaqueToken.set(0);
      try {
        (this.model).TakeLock(/* ref */ opaqueToken);
        if (this.serializer === null) {
          this.SetFlag(4, true, false);
          this.serializer = this.BuildSerializer();
        }
      } finally {
        (this.model).ReleaseLock(opaqueToken.get());
      }
    }
    return this.serializer;
  }; 

  function MetaType_get_Type () {
    return this.type;
  }; 

  function MetaType_get_UseConstructor () {
    return !this.HasFlag(16);
  }; 

  function MetaType_GetAsReferenceDefault (model, type) {
    var tmp = new JSIL.BoxedVariable(null);
    var flag = type === null;
    if (flag) {
      throw $S00().Construct("type");
    }
    var flag2 = $T08().IsEnum(type);
    if (flag2) {
      var result = false;
    } else {
      var typeAttribs = $S07().CallStatic($T1E(), "Create", null, model, type, false);

      for (var i = 0; i < (typeAttribs.length | 0); ) {
        var flag3 = (((typeAttribs[i]).get_AttributeType()).get_FullName() == "ProtoBuf.ProtoContractAttribute");
        if (flag3) {
          var flag4 = (typeAttribs[i]).TryGet("AsReferenceDefault", /* ref */ tmp);
          if (flag4) {
            result = $T05().$Cast(tmp.get());
            return result;
          }
        }
        var num = i;
        i = ((num + 1) | 0);
      }
      result = false;
    }
    return result;
  }; 

  function MetaType_GetAttribute (attribs, fullName) {

    for (var i = 0; i < (attribs.length | 0); ) {
      var attrib = attribs[i];
      var flag = (attrib !== null) && 
      ((attrib.get_AttributeType()).get_FullName() == fullName);
      if (flag) {
        var result = attrib;
        return result;
      }
      var num = i;
      i = ((num + 1) | 0);
    }
    result = null;
    return result;
  }; 

  function MetaType_GetBaseType (type) {
    return (type.type).get_BaseType();
  }; 

  function MetaType_GetContractFamily (model, type, attributes) {
    var mapping = new JSIL.BoxedVariable(null);
    var family = $T1C().None;
    var flag = attributes === null;
    if (flag) {
      attributes = $S07().CallStatic($T1E(), "Create", null, model, type, false);
    }
    var i = 0;
    var tmp = new JSIL.BoxedVariable(false);

    while (i < (attributes.length | 0)) {
      var fullName = ((attributes[i]).get_AttributeType()).get_FullName();
      if (!(fullName == "ProtoBuf.ProtoContractAttribute")) {
        if (!(fullName == "System.Xml.Serialization.XmlTypeAttribute")) {
          if (fullName == "System.Runtime.Serialization.DataContractAttribute") {
            var flag2 = !model.get_AutoAddProtoContractTypesOnly();
            if (flag2) {
              family = $T1C().$Cast(family | $T1C().DataContractSerialier);
            }
          }
        } else {
          var flag3 = !model.get_AutoAddProtoContractTypesOnly();
          if (flag3) {
            family = $T1C().$Cast(family | $T1C().XmlSerializer);
          }
        }
      } else {
        tmp.set(false);
        $thisType.GetFieldBoolean(/* ref */ tmp, attributes[i], "UseProtoMembersOnly");
        if (tmp.get()) {
          var result = $T1C().ProtoBuf;
          return result;
        }
        family = $T1C().$Cast(family | $T1C().ProtoBuf);
      }
      var num = i;
      i = ((num + 1) | 0);
    }
    var flag5 = family === $T1C().None;
    if (flag5) {
      var flag6 = $thisType.ResolveTupleConstructor(type, /* ref */ mapping) !== null;
      if (flag6) {
        family = $T1C().$Cast(family | $T1C().AutoTuple);
      }
    }
    result = family;
    return result;
  }; 

  function MetaType_GetDataFormat (/* ref */ value, attrib, memberName) {
    var obj = new JSIL.BoxedVariable(null);
    var flag = (attrib === null) || 
    (value.get() > $T17().Default);
    if (!flag) {
      var flag2 = attrib.TryGet(memberName, /* ref */ obj) && 
      (obj.get() !== null);
      if (flag2) {
        value.set($T17().$Cast(obj.get()));
      }
    }
  }; 

  function MetaType_GetEnumMap () {
    if (this.HasFlag(2)) {
      var result2 = null;
    } else {
      var result = JSIL.Array.New($T3F(), (this.fields).get_Count());

      for (var i = 0; i < (result.length | 0); ) {
        var member = $T10().$Cast((this.fields).get_Item(i));
        var wireValue = (member.get_FieldNumber() | 0);
        var value = member.GetRawEnumValue();
        result[i] = new ($T3F())(wireValue, value, member.get_MemberType());
        var num = i;
        i = ((num + 1) | 0);
      }
      result2 = result;
    }
    return result2;
  }; 

  function MetaType_GetFieldBoolean$0F (/* ref */ value, attrib, memberName) {
    $thisType.GetFieldBoolean(/* ref */ value, attrib, memberName, true);
  }; 

  function MetaType_GetFieldBoolean$10 (/* ref */ value, attrib, memberName, publicOnly) {
    var obj = new JSIL.BoxedVariable(null);
    var flag = attrib === null;
    if (flag) {
      var result = false;
    } else {
      var flag2 = value.get();
      if (flag2) {
        result = true;
      } else {
        var flag3 = attrib.TryGet(memberName, publicOnly, /* ref */ obj) && 
        (obj.get() !== null);
        if (flag3) {
          value.set($T05().$Cast(obj.get()));
          result = true;
        } else {
          result = false;
        }
      }
    }
    return result;
  }; 

  function MetaType_GetFieldName (/* ref */ name, attrib, memberName) {
    var obj = new JSIL.BoxedVariable(null);
    var flag = (attrib === null) || 
    !$T08().IsNullOrEmpty(name.get());
    if (!flag) {
      var flag2 = attrib.TryGet(memberName, /* ref */ obj) && 
      (obj.get() !== null);
      if (flag2) {
        name.set($T0D().$Cast(obj.get()));
      }
    }
  }; 

  function MetaType_GetFieldNumber (/* ref */ value, attrib, memberName) {
    var obj = new JSIL.BoxedVariable(null);
    var flag = (attrib === null) || 
    ((value.get() | 0) > 0);
    if (!flag) {
      var flag2 = attrib.TryGet(memberName, /* ref */ obj) && 
      (obj.get() !== null);
      if (flag2) {
        value.set($T0C().$Cast(obj.get()));
      }
    }
  }; 

  function MetaType_GetFields () {
    var arr = JSIL.Array.New($T10(), (this.fields).get_Count());
    (this.fields).CopyTo(arr, 0);
    $S0F().CallStatic($T24(), "Sort$b1", [$asm0E.ProtoBuf.Meta.ValueMember], arr, $T41().Default);
    return arr;
  }; 

  function MetaType_GetIgnore (/* ref */ ignore, attrib, attribs, fullName) {
    var flag = ignore.get() || 
    (attrib === null);
    if (!flag) {
      ignore.set($thisType.GetAttribute(attribs, fullName) !== null);
    }
  }; 

  function MetaType_GetKey (demand, getBaseKey) {
    return (this.model).GetKey(this.type, demand, getBaseKey);
  }; 

  function MetaType_GetNextFieldNumber () {
    var maxField = 0;

    for (var enumerator = (this.fields).GetEnumerator(); enumerator.MoveNext(); ) {
      var member = $T10().$Cast(enumerator.get_Current());
      var flag = (member.get_FieldNumber() | 0) > maxField;
      if (flag) {
        maxField = (member.get_FieldNumber() | 0);
      }
    }
    if (this.subTypes !== null) {

      for (var enumerator2 = (this.subTypes).GetEnumerator(); enumerator2.MoveNext(); ) {
        var subType = $T1A().$Cast(enumerator2.get_Current());
        var flag3 = (subType.get_FieldNumber() | 0) > maxField;
        if (flag3) {
          maxField = (subType.get_FieldNumber() | 0);
        }
      }
    }
    return ((maxField + 1) | 0);
  }; 

  function MetaType_GetRootType (source) {
    var tmp2 = null;

    while (source.serializer !== null) {
      var tmp = source.baseType;
      if (tmp === null) {
        var result = source;
        return result;
      }
      source = tmp;
    }
    var model = source.model;
    var opaqueToken = new JSIL.BoxedVariable(0);
    try {
      model.TakeLock(/* ref */ opaqueToken);

      while ((tmp2 = source.baseType) !== null) {
        source = tmp2;
      }
      result = source;
    } finally {
      model.ReleaseLock(opaqueToken.get());
    }
    return result;
  }; 

  function MetaType_GetSchemaTypeName () {
    var mt = null;
    var tmp = new JSIL.BoxedVariable(null);
    if (this.surrogate !== null) {
      var result = ((this.model).get_Item(this.surrogate)).GetSchemaTypeName();
    } else {
      var flag2 = !$T08().IsNullOrEmpty(this.$name);
      if (flag2) {
        result = this.$name;
      } else {
        var typeName = (this.type).get_Name();
        var isGenericType = (this.type).get_IsGenericType();
        if (isGenericType) {
          var sb = $S10().Construct(typeName);
          var split = (typeName.indexOf("`"));
          if (split >= 0) {
            sb.set_Length(split);
          }
          var genericArguments = (this.type).GetGenericArguments();

          for (var i = 0; i < (genericArguments.length | 0); i = ((i + 1) | 0)) {
            var arg = genericArguments[i];
            $S11().CallVirtual("Append", null, sb, "_");
            tmp.set(arg);
            var key = ((this.model).GetKey(/* ref */ tmp) | 0);
            var flag4 = !((key < 0) || 
              ((mt = (this.model).get_Item(tmp.get())) === null)) && 
            (mt.surrogate === null);
            if (flag4) {
              $S12().CallVirtual("Append", null, sb, mt.GetSchemaTypeName());
            } else {
              $S12().CallVirtual("Append", null, sb, (tmp.get()).get_Name());
            }
          }
          result = sb.toString();
        } else {
          result = typeName;
        }
      }
    }
    return result;
  }; 

  function MetaType_GetSubtypes () {
    var flag = (this.subTypes === null) || 
    (((this.subTypes).get_Count() | 0) === 0);
    if (flag) {
      var result = JSIL.Array.New($T1A(), 0);
    } else {
      var arr = JSIL.Array.New($T1A(), (this.subTypes).get_Count());
      (this.subTypes).CopyTo(arr, 0);
      $S13().CallStatic($T24(), "Sort$b1", [$asm0E.ProtoBuf.Meta.SubType], arr, $T45().Default);
      result = arr;
    }
    return result;
  }; 

  function MetaType_GetSurrogateOrBaseOrSelf (deep) {
    if (this.surrogate !== null) {
      var result = (this.model).get_Item(this.surrogate);
    } else {
      var snapshot = this.baseType;
      var flag2 = snapshot !== null;
      if (flag2) {
        if (deep) {

          do {
            var tmp = snapshot;
            snapshot = snapshot.baseType;
          } while (snapshot !== null);
          result = tmp;
        } else {
          result = snapshot;
        }
      } else {
        result = this;
      }
    }
    return result;
  }; 

  function MetaType_GetSurrogateOrSelf () {
    if (this.surrogate !== null) {
      var result = (this.model).get_Item(this.surrogate);
    } else {
      result = this;
    }
    return result;
  }; 

  function MetaType_HasFamily (value, required) {
    return ($T1C().$Cast(value & required) === required);
  }; 

  function MetaType_HasFlag (flag) {
    return ((this.flags & (flag | 0)) === (flag | 0));
  }; 

  function MetaType_InbuiltType (type) {
    return $S0B().Construct(JSIL.ConcatString("Data of this type has inbuilt behaviour, and cannot be added to a model in this way: ", type.get_FullName()));
  }; 

  function MetaType_IsDefined (fieldNumber) {

    for (var enumerator = (this.fields).GetEnumerator(); enumerator.MoveNext(); ) {
      var field = $T10().$Cast(enumerator.get_Current());
      var flag = (field.get_FieldNumber() | 0) === (fieldNumber | 0);
      if (flag) {
        var result = true;
        return result;
      }
    }
    result = false;
    return result;
  }; 

  function MetaType_IsPrepared () {
    return false;
  }; 

  function MetaType_IsValidSubType (subType) {
    return (this.type).IsAssignableFrom(subType);
  }; 

  function MetaType_NewLine (builder, indent) {
    return $S14().CallVirtual("Append", null, $T08().AppendLine(builder), " ", Math.imul(indent, 3));
  }; 

  function MetaType_NormalizeProtoMember (model, member, family, forced, isEnum, partialMembers, dataMemberOffset, inferByTagName) {
    var tmp = new JSIL.BoxedVariable(null);
    var tmp2 = new JSIL.BoxedVariable(null);
    var flag12 = false;
    var flag = (member === null) || 
    (((family.valueOf() | 0) === 0) && 
      !isEnum);
    var name = new JSIL.BoxedVariable(null);
    var ignore = new JSIL.BoxedVariable(false);
    var fieldNumber = new JSIL.BoxedVariable(0);
    var isRequired = new JSIL.BoxedVariable(false);
    var isPacked = new JSIL.BoxedVariable(false);
    var overwriteList = new JSIL.BoxedVariable(false);
    var dataFormat = new JSIL.BoxedVariable($asm0E.ProtoBuf.DataFormat.Default);
    var asReferenceHasValue = new JSIL.BoxedVariable(false);
    var asReference = new JSIL.BoxedVariable(false);
    var dynamicType = new JSIL.BoxedVariable(false);
    if (flag) {
      var result2 = null;
    } else {
      fieldNumber.set(-2147483648);
      var minAcceptFieldNumber = ((
        inferByTagName
           ? -1
           : 1)
       | 0);
      name.set(null);
      isPacked.set(false);
      ignore.set(false);
      var done = false;
      isRequired.set(false);
      asReference.set(false);
      asReferenceHasValue.set(false);
      dynamicType.set(false);
      var tagIsPinned = false;
      overwriteList.set(false);
      dataFormat.set($T17().Default);
      if (isEnum) {
        forced = true;
      }
      var attribs = $S09().CallStatic($T1E(), "Create", null, model, member, true);
      if (isEnum) {
        var attrib = $thisType.GetAttribute(attribs, "ProtoBuf.ProtoIgnoreAttribute");
        var flag2 = attrib !== null;
        if (flag2) {
          ignore.set(true);
        } else {
          attrib = $thisType.GetAttribute(attribs, "ProtoBuf.ProtoEnumAttribute");
          fieldNumber.set($S15().CallStatic($T47(), "ToInt32", null, ($T15().$Cast(member)).GetValue(null)));
          var flag3 = attrib !== null;
          if (flag3) {
            $thisType.GetFieldName(/* ref */ name, attrib, "Name");
            var flag4 = $T05().$Cast(($T08().GetInstanceMethod(attrib.get_AttributeType(), "HasValue")).Invoke(attrib.get_Target(), null));
            if (flag4) {
              var flag5 = attrib.TryGet("Value", /* ref */ tmp);
              if (flag5) {
                fieldNumber.set($T0C().$Cast(tmp.get()));
              }
            }
          }
        }
        done = true;
      }
      var flag6 = !ignore.get() && 
      !done;
      if (flag6) {
        attrib = $thisType.GetAttribute(attribs, "ProtoBuf.ProtoMemberAttribute");
        $thisType.GetIgnore(/* ref */ ignore, attrib, attribs, "ProtoBuf.ProtoIgnoreAttribute");
        var flag7 = !ignore.get() && 
        (attrib !== null);
        if (flag7) {
          $thisType.GetFieldNumber(/* ref */ fieldNumber, attrib, "Tag");
          $thisType.GetFieldName(/* ref */ name, attrib, "Name");
          $thisType.GetFieldBoolean(/* ref */ isRequired, attrib, "IsRequired");
          $thisType.GetFieldBoolean(/* ref */ isPacked, attrib, "IsPacked");
          $thisType.GetFieldBoolean(/* ref */ overwriteList, attrib, "OverwriteList");
          $thisType.GetDataFormat(/* ref */ dataFormat, attrib, "DataFormat");
          $thisType.GetFieldBoolean(/* ref */ asReferenceHasValue, attrib, "AsReferenceHasValue", false);
          var flag8 = asReferenceHasValue.get();
          if (flag8) {
            asReferenceHasValue.set($thisType.GetFieldBoolean(/* ref */ asReference, attrib, "AsReference", true));
          }
          $thisType.GetFieldBoolean(/* ref */ dynamicType, attrib, "DynamicType");
          tagIsPinned = done = (fieldNumber.get() | 0) > 0;
        }
        var flag9 = !done && 
        (partialMembers !== null);
        if (flag9) {

        $loop0: 
          for (var enumerator = partialMembers.GetEnumerator(); enumerator.MoveNext(); ) {
            var ppma = $T1E().$Cast(enumerator.get_Current());
            var flag10 = ppma.TryGet("MemberName", /* ref */ tmp2) && 
            ($T0D().$Cast(tmp2.get()) == member.get_Name());
            if (flag10) {
              $thisType.GetFieldNumber(/* ref */ fieldNumber, ppma, "Tag");
              $thisType.GetFieldName(/* ref */ name, ppma, "Name");
              $thisType.GetFieldBoolean(/* ref */ isRequired, ppma, "IsRequired");
              $thisType.GetFieldBoolean(/* ref */ isPacked, ppma, "IsPacked");
              $thisType.GetFieldBoolean(/* ref */ overwriteList, attrib, "OverwriteList");
              $thisType.GetDataFormat(/* ref */ dataFormat, ppma, "DataFormat");
              $thisType.GetFieldBoolean(/* ref */ asReferenceHasValue, attrib, "AsReferenceHasValue", false);
              var flag11 = asReferenceHasValue.get();
              if (flag11) {
                asReferenceHasValue.set($thisType.GetFieldBoolean(/* ref */ asReference, ppma, "AsReference", true));
              }
              $thisType.GetFieldBoolean(/* ref */ dynamicType, ppma, "DynamicType");
              done = flag12 = tagIsPinned = (fieldNumber.get() | 0) > 0;
              if (flag12) {
                break $loop0;
              }
            }
          }
        }
      }
      var flag13 = !(ignore.get() || 
        done) && 
      $thisType.HasFamily(family, $T1C().DataContractSerialier);
      if (flag13) {
        attrib = $thisType.GetAttribute(attribs, "System.Runtime.Serialization.DataMemberAttribute");
        var flag14 = attrib !== null;
        if (flag14) {
          $thisType.GetFieldNumber(/* ref */ fieldNumber, attrib, "Order");
          $thisType.GetFieldName(/* ref */ name, attrib, "Name");
          $thisType.GetFieldBoolean(/* ref */ isRequired, attrib, "IsRequired");
          done = (fieldNumber.get() | 0) >= minAcceptFieldNumber;
          var flag15 = done;
          if (flag15) {
            fieldNumber.set((((fieldNumber.get() | 0) + (dataMemberOffset | 0)) | 0));
          }
        }
      }
      var flag16 = !(ignore.get() || 
        done) && 
      $thisType.HasFamily(family, $T1C().XmlSerializer);
      if (flag16) {
        attrib = $thisType.GetAttribute(attribs, "System.Xml.Serialization.XmlElementAttribute");
        var flag17 = attrib === null;
        if (flag17) {
          attrib = $thisType.GetAttribute(attribs, "System.Xml.Serialization.XmlArrayAttribute");
        }
        $thisType.GetIgnore(/* ref */ ignore, attrib, attribs, "System.Xml.Serialization.XmlIgnoreAttribute");
        var flag18 = (attrib !== null) && 
        !ignore.get();
        if (flag18) {
          $thisType.GetFieldNumber(/* ref */ fieldNumber, attrib, "Order");
          $thisType.GetFieldName(/* ref */ name, attrib, "ElementName");
          done = (fieldNumber.get() | 0) >= minAcceptFieldNumber;
        }
      }
      var flag19 = !ignore.get() && 
      !done;
      if (flag19) {
        if ($thisType.GetAttribute(attribs, "System.NonSerializedAttribute") !== null) {
          ignore.set(true);
        }
      }
      var flag21 = ignore.get() || 
      (((fieldNumber.get() | 0) < minAcceptFieldNumber) && 
        !forced);
      if (flag21) {
        result2 = null;
      } else {
        var result = $S16().Construct(fieldNumber.get(), (forced | inferByTagName));
        result.set_AsReference(asReference.get());
        result.set_AsReferenceHasValue(asReferenceHasValue.get());
        result.set_DataFormat(dataFormat.get());
        result.set_DynamicType(dynamicType.get());
        result.set_IsPacked(isPacked.get());
        result.set_OverwriteList(overwriteList.get());
        result.set_IsRequired(isRequired.get());
        result.set_Name((
            $T08().IsNullOrEmpty(name.get())
               ? member.get_Name()
               : name.get())
        );
        result.Member = member;
        result.TagIsPinned = tagIsPinned;
        result2 = result;
      }
    }
    return result2;
  }; 

  function MetaType_ProtoBuf_Serializers_ISerializerProxy_get_Serializer () {
    return this.get_Serializer();
  }; 

  function MetaType_ResolveListTypes (model, type, /* ref */ itemType, /* ref */ defaultType) {
    var genArgs = null;
    var flag = type === null;
    var nestedItemType = new JSIL.BoxedVariable(null);
    var nestedDefaultType = new JSIL.BoxedVariable(null);
    if (!flag) {
      var isArray = type.get_IsArray();
      if (isArray) {
        var flag2 = (type.GetArrayRank() | 0) !== 1;
        if (flag2) {
          throw $S02().Construct("Multi-dimension arrays are supported");
        }
        itemType.set(type.GetElementType());
        var flag3 = itemType.get() === model.MapType($T46().__Type__);
        if (flag3) {
          itemType.set(null);
          defaultType.set(null);
        } else {
          defaultType.set(type);
        }
      }
      var flag4 = itemType.get() === null;
      if (flag4) {
        itemType.set($T0A().GetListItemType(model, type));
      }
      var flag5 = itemType.get() !== null;
      if (flag5) {
        nestedItemType.set(null);
        nestedDefaultType.set(null);
        $thisType.ResolveListTypes(model, itemType.get(), /* ref */ nestedItemType, /* ref */ nestedDefaultType);
        var flag6 = nestedItemType.get() !== null;
        if (flag6) {
          throw $T0A().CreateNestedListsNotSupported();
        }
      }
      var flag7 = (itemType.get() !== null) && 
      (defaultType.get() === null);
      if (flag7) {
        var flag8 = !(!type.get_IsClass() || 
          type.get_IsAbstract()) && 
        ($T08().GetConstructor(type, $T08().EmptyTypes, true) !== null);
        if (flag8) {
          defaultType.set(type);
        }
        var flag9 = defaultType.get() === null;
        if (flag9) {
          var isInterface = type.get_IsInterface();
          if (isInterface) {
            var flag10 = !(!type.get_IsGenericType() || 
              (type.GetGenericTypeDefinition() !== model.MapType($T48().__Type__))) && 
            (itemType.get() === (model.MapType($T49().__Type__)).MakeGenericType(genArgs = type.GetGenericArguments()));
            if (flag10) {
              defaultType.set((model.MapType($T4A().__Type__)).MakeGenericType(genArgs));
            } else {
              defaultType.set((model.MapType($T4B().__Type__)).MakeGenericType(JSIL.Array.New($T02(), [itemType.get()])));
            }
          }
        }
        var flag11 = (defaultType.get() !== null) && 
        !$T08().IsAssignableFrom(type, defaultType.get());
        if (flag11) {
          defaultType.set(null);
        }
      }
    }
  }; 

  function MetaType_ResolveMethod (name, instance) {
    if ($T08().IsNullOrEmpty(name)) {
      var result = null;
    } else {
      result = (
        instance
           ? $T08().GetInstanceMethod(this.type, name)
           : $T08().GetStaticMethod(this.type, name))
      ;
    }
    return result;
  }; 

  function MetaType_ResolveTupleConstructor (type, /* ref */ mappedMembers) {
    mappedMembers.set(null);
    var flag = type === null;
    if (flag) {
      throw $S00().Construct("type");
    }
    var isAbstract = type.get_IsAbstract();
    if (isAbstract) {
      var result2 = null;
    } else {
      var ctors = $T08().GetConstructors(type, false);
      var flag2 = ((ctors.length | 0) === 0) || 
      (((ctors.length | 0) === 1) && 
        (((ctors[0]).GetParameters().length | 0) === 0));
      if (flag2) {
        result2 = null;
      } else {
        var fieldsPropsUnfiltered = $T08().GetInstanceFieldsAndProperties(type, true);
        var memberList = new ($T04())();

        for (var i = 0; i < (fieldsPropsUnfiltered.length | 0); ) {
          var prop = $T14().$As(fieldsPropsUnfiltered[i]);
          var flag3 = prop !== null;
          if (flag3) {
            var flag4 = !prop.get_CanRead();
            if (flag4) {
              result2 = null;
              return result2;
            }
            var flag5 = prop.get_CanWrite() && 
            ($T08().GetSetMethod(prop, false, false) !== null);
            if (flag5) {
              result2 = null;
              return result2;
            }
            memberList.Add(prop);
          } else {
            var field = $T15().$As(fieldsPropsUnfiltered[i]);
            var flag6 = field !== null;
            if (flag6) {
              var flag7 = !field.get_IsInitOnly();
              if (flag7) {
                result2 = null;
                return result2;
              }
              memberList.Add(field);
            }
          }
          var num = i;
          i = ((num + 1) | 0);
        }
        var flag8 = (memberList.get_Count() | 0) === 0;
        if (flag8) {
          result2 = null;
        } else {
          var members = JSIL.Array.New($T09(), memberList.get_Count());
          memberList.CopyTo(members, 0);
          var mapping = JSIL.Array.New($T0C(), members.length);
          var found = 0;
          var result = null;
          mappedMembers.set(JSIL.Array.New($T09(), mapping.length));

          for (var j = 0; j < (ctors.length | 0); ) {
            var parameters = (ctors[j]).GetParameters();
            var flag9 = (parameters.length | 0) !== (members.length | 0);
            if (!flag9) {

              for (var k = 0; k < (mapping.length | 0); ) {
                mapping[k] = -1;
                num = k;
                k = ((num + 1) | 0);
              }

              for (var l = 0; l < (parameters.length | 0); ) {
                var lower = ((parameters[l]).get_Name().toLowerCase());

                for (var m = 0; m < (members.length | 0); ) {
                  var flag10 = ((members[m]).get_Name().toLowerCase() != lower);
                  if (!flag10) {
                    var memberType = $T08().GetMemberType(members[m]);
                    var flag11 = memberType !== (parameters[l]).get_ParameterType();
                    if (!flag11) {
                      mapping[l] = m;
                    }
                  }
                  num = m;
                  m = ((num + 1) | 0);
                }
                num = l;
                l = ((num + 1) | 0);
              }
              var notMapped = false;

            $loop5: 
              for (var n = 0; n < (mapping.length | 0); ) {
                var flag12 = (mapping[n] | 0) < 0;
                if (flag12) {
                  notMapped = true;
                  break $loop5;
                }
                mappedMembers.get()[n] = members[mapping[n]];
                num = n;
                n = ((num + 1) | 0);
              }
              var flag13 = notMapped;
              if (!flag13) {
                num = found;
                found = ((num + 1) | 0);
                result = ctors[j];
              }
            }
            num = j;
            j = ((num + 1) | 0);
          }
          result2 = (
            (found === 1)
               ? result
               : null)
          ;
        }
      }
    }
    return result2;
  }; 

  function MetaType_set_AsReferenceDefault (value) {
    this.SetFlag(32, value, true);
  }; 

  function MetaType_set_ConstructType (value) {
    this.ThrowIfFrozen();
    this.constructType = value;
  }; 

  function MetaType_set_EnumPassthru (value) {
    this.SetFlag(2, value, true);
  }; 

  function MetaType_set_IgnoreListHandling (value) {
    this.SetFlag(128, value, true);
  }; 

  function MetaType_set_IncludeSerializerMethod (value) {
    this.SetFlag(8, !value, true);
  }; 

  function MetaType_set_Name (value) {
    this.ThrowIfFrozen();
    this.$name = value;
  }; 

  function MetaType_set_Pending (value) {
    this.SetFlag(1, value, false);
  }; 

  function MetaType_set_UseConstructor (value) {
    this.SetFlag(16, !value, true);
  }; 

  function MetaType_SetBaseType (baseType) {
    if (baseType === null) {
      throw $S00().Construct("baseType");
    }
    var flag2 = this.baseType === baseType;
    if (!flag2) {
      if (this.baseType !== null) {
        throw $S06().Construct("A type can only participate in one inheritance hierarchy");
      }

      for (var type = baseType; type !== null; type = type.baseType) {
        var flag4 = type === this;
        if (flag4) {
          throw $S06().Construct("Cyclic inheritance is not allowed");
        }
      }
      this.baseType = baseType;
    }
  }; 

  function MetaType_SetCallbacks$11 (beforeSerialize, afterSerialize, beforeDeserialize, afterDeserialize) {
    var callbacks = this.get_Callbacks();
    callbacks.set_BeforeSerialize(beforeSerialize);
    callbacks.set_AfterSerialize(afterSerialize);
    callbacks.set_BeforeDeserialize(beforeDeserialize);
    callbacks.set_AfterDeserialize(afterDeserialize);
    return this;
  }; 

  function MetaType_SetCallbacks$12 (beforeSerialize, afterSerialize, beforeDeserialize, afterDeserialize) {
    var isValueType = this.get_IsValueType();
    if (isValueType) {
      throw $S0D().Construct();
    }
    var callbacks = this.get_Callbacks();
    callbacks.set_BeforeSerialize(this.ResolveMethod(beforeSerialize, true));
    callbacks.set_AfterSerialize(this.ResolveMethod(afterSerialize, true));
    callbacks.set_BeforeDeserialize(this.ResolveMethod(beforeDeserialize, true));
    callbacks.set_AfterDeserialize(this.ResolveMethod(afterDeserialize, true));
    return this;
  }; 

  function MetaType_SetFactory$13 (factory) {
    (this.model).VerifyFactory(factory, this.type);
    this.ThrowIfFrozen();
    this.factory = factory;
    return this;
  }; 

  function MetaType_SetFactory$14 (factory) {
    return $S17().CallVirtual("SetFactory", null, this, this.ResolveMethod(factory, false));
  }; 

  function MetaType_SetFlag (flag, value, throwIfFrozen) {
    if (throwIfFrozen && (this.HasFlag(flag) !== value)) {
      this.ThrowIfFrozen();
    }
    if (value) {
      this.flags = this.flags | (flag | 0);
    } else {
      this.flags = this.flags & (~flag & 0xFF);
    }
  }; 

  function MetaType_SetSurrogate (surrogateType) {
    var flag = surrogateType === this.type;
    if (flag) {
      surrogateType = null;
    }
    var flag2 = surrogateType !== null;
    if (flag2) {
      var flag3 = (surrogateType !== null) && 
      $T08().IsAssignableFrom((this.model).MapType($T00().__Type__), surrogateType);
      if (flag3) {
        throw $S0B().Construct("Repeated data (a list, collection, etc) has inbuilt behaviour and cannot be used as a surrogate");
      }
    }
    this.ThrowIfFrozen();
    this.surrogate = surrogateType;
  }; 

  function MetaType_ThrowIfFrozen () {
    if ((this.flags & 4) > 0) {
      throw $S06().Construct(JSIL.ConcatString("The type cannot be changed once a serializer has been generated for ", (this.type).get_FullName()));
    }
  }; 

  function MetaType_toString () {
    return (this.type).toString();
  }; 

  function MetaType_WriteSchema (builder, indent, /* ref */ requiresBclImport) {
    var mapping = new JSIL.BoxedVariable(null);
    if (this.surrogate === null) {
      var fieldsArr = JSIL.Array.New($T10(), (this.fields).get_Count());
      (this.fields).CopyTo(fieldsArr, 0);
      $S0F().CallStatic($T24(), "Sort$b1", [$asm0E.ProtoBuf.Meta.ValueMember], fieldsArr, $T41().Default);
      var isList = this.get_IsList();
      if (isList) {
        var itemTypeName = (this.model).GetSchemaTypeName(
          $T0A().GetListItemType(this.model, this.type), 
          $T17().Default, 
          false, 
          false, 
          /* ref */ requiresBclImport
        );
        $S12().CallVirtual("Append", null, $S12().CallVirtual("Append", null, $S12().CallVirtual("Append", null, $thisType.NewLine(builder, indent), "message "), this.GetSchemaTypeName()), " {");
        $S12().CallVirtual("Append", null, $S12().CallVirtual("Append", null, $S12().CallVirtual("Append", null, $thisType.NewLine(builder, (((indent | 0) + 1) | 0)), "repeated "), itemTypeName), " items = 1;");
        $S11().CallVirtual("Append", null, $thisType.NewLine(builder, indent), "}");
      } else {
        var isAutoTuple = this.get_IsAutoTuple();
        if (isAutoTuple) {
          var flag2 = $thisType.ResolveTupleConstructor(this.type, /* ref */ mapping) !== null;
          if (flag2) {
            $S12().CallVirtual("Append", null, $S12().CallVirtual("Append", null, $S12().CallVirtual("Append", null, $thisType.NewLine(builder, indent), "message "), this.GetSchemaTypeName()), " {");

            for (var i = 0; i < (mapping.get().length | 0); ) {
              var flag3 = $T14().$Is(mapping.get()[i]);
              if (flag3) {
                var effectiveType = ($T14().$Cast(mapping.get()[i])).get_PropertyType();
              } else {
                var flag4 = $T15().$Is(mapping.get()[i]);
                if (!flag4) {
                  throw $S02().Construct(JSIL.ConcatString("Unknown member type: ", (JSIL.GetType(mapping.get()[i])).get_Name()));
                }
                effectiveType = ($T15().$Cast(mapping.get()[i])).get_FieldType();
              }
              $S11().CallVirtual("Append", null, $S18().CallVirtual("Append", null, $S12().CallVirtual("Append", null, $S12().CallVirtual("Append", null, $S11().CallVirtual("Append", null, $S12().CallVirtual("Append", null, $S12().CallVirtual("Append", null, $thisType.NewLine(builder, (((indent | 0) + 1) | 0)), "optional "), System.String.Replace((this.model).GetSchemaTypeName(
                            effectiveType, 
                            $T17().Default, 
                            false, 
                            false, 
                            /* ref */ requiresBclImport
                          ), ".", "_")), " "), (mapping.get()[i]).get_Name()), " = "), ((i + 1) | 0)), ";");
              var num = i;
              i = ((num + 1) | 0);
            }
            $S11().CallVirtual("Append", null, $thisType.NewLine(builder, indent), "}");
          }
        } else {
          if ($T08().IsEnum(this.type)) {
            $S12().CallVirtual("Append", null, $S12().CallVirtual("Append", null, $S12().CallVirtual("Append", null, $thisType.NewLine(builder, indent), "enum "), this.GetSchemaTypeName()), " {");
            var flag6 = ((fieldsArr.length | 0) === 0) && 
            this.get_EnumPassthru();
            if (flag6) {
              var flag7 = (this.type).IsDefined((this.model).MapType($T0B().__Type__), false);
              if (flag7) {
                $S12().CallVirtual("Append", null, $thisType.NewLine(builder, (((indent | 0) + 1) | 0)), "// this is a composite/flags enumeration");
              } else {
                $S12().CallVirtual("Append", null, $thisType.NewLine(builder, (((indent | 0) + 1) | 0)), "// this enumeration will be passed as a raw value");
              }
              var array = (this.type).GetFields();

              for (var j = 0; j < (array.length | 0); j = ((j + 1) | 0)) {
                var field = array[j];
                var flag8 = field.get_IsStatic() && 
                field.get_IsLiteral();
                if (flag8) {
                  var enumVal = field.GetValue(null);
                  $S12().CallVirtual("Append", null, $S19().CallVirtual("Append", null, $S12().CallVirtual("Append", null, $S12().CallVirtual("Append", null, $thisType.NewLine(builder, (((indent | 0) + 1) | 0)), field.get_Name()), " = "), enumVal), ";");
                }
              }
            } else {
              var array2 = fieldsArr;

              for (var k = 0; k < (array2.length | 0); k = ((k + 1) | 0)) {
                var member = array2[k];
                $S11().CallVirtual("Append", null, $S18().CallVirtual("Append", null, $S12().CallVirtual("Append", null, $S12().CallVirtual("Append", null, $thisType.NewLine(builder, (((indent | 0) + 1) | 0)), member.get_Name()), " = "), member.get_FieldNumber()), ";");
              }
            }
            $S11().CallVirtual("Append", null, $thisType.NewLine(builder, indent), "}");
          } else {
            $S12().CallVirtual("Append", null, $S12().CallVirtual("Append", null, $S12().CallVirtual("Append", null, $thisType.NewLine(builder, indent), "message "), this.GetSchemaTypeName()), " {");
            var array3 = fieldsArr;

            for (var l = 0; l < (array3.length | 0); l = ((l + 1) | 0)) {
              var member2 = array3[l];
              var ordinality = (
                (member2.get_ItemType() !== null)
                   ? "repeated"
                   : (
                    member2.get_IsRequired()
                       ? "required"
                       : "optional")
              )
              ;
              $S11().CallVirtual("Append", null, $S12().CallVirtual("Append", null, $thisType.NewLine(builder, (((indent | 0) + 1) | 0)), ordinality), " ");
              var flag9 = member2.get_DataFormat() === $T17().Group;
              if (flag9) {
                $S12().CallVirtual("Append", null, builder, "group ");
              }
              var schemaTypeName = member2.GetSchemaTypeName(true, /* ref */ requiresBclImport);
              $S18().CallVirtual("Append", null, $S12().CallVirtual("Append", null, $S12().CallVirtual("Append", null, $S12().CallVirtual("Append", null, $S12().CallVirtual("Append", null, builder, schemaTypeName), " "), member2.get_Name()), " = "), member2.get_FieldNumber());
              var flag10 = member2.get_DefaultValue() !== null;
              if (flag10) {
                var flag11 = $T0D().$Is(member2.get_DefaultValue());
                if (flag11) {
                  $S12().CallVirtual("Append", null, $S19().CallVirtual("Append", null, $S12().CallVirtual("Append", null, builder, " [default = \""), member2.get_DefaultValue()), "\"]");
                } else {
                  var flag12 = $T05().$Is(member2.get_DefaultValue());
                  if (flag12) {
                    $S12().CallVirtual("Append", null, builder, (
                        $T05().$Cast(member2.get_DefaultValue())
                           ? " [default = true]"
                           : " [default = false]")
                    );
                  } else {
                    $S11().CallVirtual("Append", null, $S19().CallVirtual("Append", null, $S12().CallVirtual("Append", null, builder, " [default = "), member2.get_DefaultValue()), "]");
                  }
                }
              }
              var flag13 = (member2.get_ItemType() !== null) && 
              member2.get_IsPacked();
              if (flag13) {
                $S12().CallVirtual("Append", null, builder, " [packed=true]");
              }
              $S11().CallVirtual("Append", null, builder, ";");
              var flag14 = !(!(schemaTypeName == "bcl.NetObjectProxy") || 
                !member2.get_AsReference()) && 
              !member2.get_DynamicType();
              if (flag14) {
                $S12().CallVirtual("Append", null, $S12().CallVirtual("Append", null, builder, " // reference-tracked "), member2.GetSchemaTypeName(false, /* ref */ requiresBclImport));
              }
            }
            var flag15 = (this.subTypes !== null) && 
            (((this.subTypes).get_Count() | 0) > 0);
            if (flag15) {
              $S12().CallVirtual("Append", null, $thisType.NewLine(builder, (((indent | 0) + 1) | 0)), "// the following represent sub-types; at most 1 should have a value");
              var subTypeArr = JSIL.Array.New($T1A(), (this.subTypes).get_Count());
              (this.subTypes).CopyTo(subTypeArr, 0);
              $S13().CallStatic($T24(), "Sort$b1", [$asm0E.ProtoBuf.Meta.SubType], subTypeArr, $T45().Default);
              var array4 = subTypeArr;

              for (var m = 0; m < (array4.length | 0); m = ((m + 1) | 0)) {
                var subType = array4[m];
                var subTypeName = (subType.get_DerivedType()).GetSchemaTypeName();
                $S11().CallVirtual("Append", null, $S18().CallVirtual("Append", null, $S12().CallVirtual("Append", null, $S12().CallVirtual("Append", null, $S12().CallVirtual("Append", null, $S12().CallVirtual("Append", null, $S12().CallVirtual("Append", null, $thisType.NewLine(builder, (((indent | 0) + 1) | 0)), "optional "), subTypeName), " "), subTypeName), " = "), subType.get_FieldNumber()), ";");
              }
            }
            $S11().CallVirtual("Append", null, $thisType.NewLine(builder, indent), "}");
          }
        }
      }
    }
  }; 

  JSIL.MakeType({
      BaseType: $asm14.TypeRef("System.Object"), 
      Name: "ProtoBuf.Meta.MetaType", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0E.TypeRef("ProtoBuf.Meta.RuntimeTypeModel"), $asm14.TypeRef("System.Type"), 
          $asm14.TypeRef("System.Reflection.MethodInfo")
        ]), 
      MetaType__ctor
    );

    $.Method({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($.Type, [$.Int32, $.String]), 
      MetaType_Add$00
    );

    $.Method({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($.Type, [$.String]), 
      MetaType_Add$01
    );

    $.Method({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($.Type, [$jsilcore.TypeRef("System.Array", [$.String])]), 
      MetaType_Add$02
    )
      .Parameter(0, "memberNames", function (_) {
          _.Attribute($asm14.TypeRef("System.ParamArrayAttribute"))
        });

    $.Method({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($.Type, [
          $.Int32, $.String, 
          $.Object
        ]), 
      MetaType_Add$03
    );

    $.Method({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($.Type, [
          $.Int32, $.String, 
          $asm14.TypeRef("System.Type"), $asm14.TypeRef("System.Type")
        ]), 
      MetaType_Add$04
    );

    $.Method({Static:false, Public:false}, "Add", 
      JSIL.MethodSignature.Action($asm0E.TypeRef("ProtoBuf.Meta.ValueMember")), 
      MetaType_Add$05
    );

    $.Method({Static:false, Public:true }, "AddField", 
      new JSIL.MethodSignature($asm0E.TypeRef("ProtoBuf.Meta.ValueMember"), [$.Int32, $.String]), 
      MetaType_AddField$06
    );

    $.Method({Static:false, Public:true }, "AddField", 
      new JSIL.MethodSignature($asm0E.TypeRef("ProtoBuf.Meta.ValueMember"), [
          $.Int32, $.String, 
          $asm14.TypeRef("System.Type"), $asm14.TypeRef("System.Type")
        ]), 
      MetaType_AddField$07
    );

    $.Method({Static:false, Public:false}, "AddField", 
      new JSIL.MethodSignature($asm0E.TypeRef("ProtoBuf.Meta.ValueMember"), [
          $.Int32, $.String, 
          $asm14.TypeRef("System.Type"), $asm14.TypeRef("System.Type"), 
          $.Object
        ]), 
      MetaType_AddField$08
    );

    $.Method({Static:false, Public:true }, "AddSubType", 
      new JSIL.MethodSignature($.Type, [$.Int32, $asm14.TypeRef("System.Type")]), 
      MetaType_AddSubType$09
    );

    $.Method({Static:false, Public:true }, "AddSubType", 
      new JSIL.MethodSignature($.Type, [
          $.Int32, $asm14.TypeRef("System.Type"), 
          $asm0E.TypeRef("ProtoBuf.DataFormat")
        ]), 
      MetaType_AddSubType$0A
    );

    $.Method({Static:false, Public:false}, "ApplyDefaultBehaviour", 
      JSIL.MethodSignature.Void, 
      MetaType_ApplyDefaultBehaviour$0B
    );

    $.Method({Static:false, Public:false}, "ApplyDefaultBehaviour", 
      new JSIL.MethodSignature($asm0E.TypeRef("ProtoBuf.Meta.ValueMember"), [$.Boolean, $asm0E.TypeRef("ProtoBuf.ProtoMemberAttribute")]), 
      MetaType_ApplyDefaultBehaviour$0C
    );

    $.Method({Static:true , Public:false}, "ApplyDefaultBehaviour_AddMembers", 
      new JSIL.MethodSignature(null, [
          $asm0E.TypeRef("ProtoBuf.Meta.TypeModel"), $asm0E.TypeRef("ProtoBuf.Meta.MetaType+AttributeFamily"), 
          $.Boolean, $asm0E.TypeRef("ProtoBuf.Meta.BasicList"), 
          $.Int32, $.Boolean, 
          $asm0E.TypeRef("ProtoBuf.ImplicitFields"), $asm0E.TypeRef("ProtoBuf.Meta.BasicList"), 
          $asm14.TypeRef("System.Reflection.MemberInfo"), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), 
          $.Boolean, $.Boolean, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm14.TypeRef("System.Type")])
        ]), 
      MetaType_ApplyDefaultBehaviour_AddMembers
    );

    $.Method({Static:false, Public:false}, "BuildSerializer", 
      JSIL.MethodSignature.Return($asm0E.TypeRef("ProtoBuf.Serializers.IProtoTypeSerializer")), 
      MetaType_BuildSerializer
    );

    $.Method({Static:true , Public:false}, "CheckForCallback", 
      new JSIL.MethodSignature(null, [
          $asm14.TypeRef("System.Reflection.MethodInfo"), $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("ProtoBuf.Meta.AttributeMap")]), 
          $.String, $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$asm14.TypeRef("System.Reflection.MethodInfo")])]), 
          $.Int32
        ]), 
      MetaType_CheckForCallback
    );

    $.Method({Static:true , Public:false}, "Coalesce", 
      new JSIL.MethodSignature($asm14.TypeRef("System.Reflection.MethodInfo"), [
          $jsilcore.TypeRef("System.Array", [$asm14.TypeRef("System.Reflection.MethodInfo")]), $.Int32, 
          $.Int32
        ]), 
      MetaType_Coalesce
    );

    $.Method({Static:false, Public:true }, "get_AsReferenceDefault", 
      JSIL.MethodSignature.Return($.Boolean), 
      MetaType_get_AsReferenceDefault
    );

    $.Method({Static:false, Public:true }, "get_BaseType", 
      JSIL.MethodSignature.Return($.Type), 
      MetaType_get_BaseType
    );

    $.Method({Static:false, Public:true }, "get_Callbacks", 
      JSIL.MethodSignature.Return($asm0E.TypeRef("ProtoBuf.Meta.CallbackSet")), 
      MetaType_get_Callbacks
    );

    $.Method({Static:false, Public:true }, "get_ConstructType", 
      JSIL.MethodSignature.Return($asm14.TypeRef("System.Type")), 
      MetaType_get_ConstructType
    );

    $.Method({Static:false, Public:true }, "get_EnumPassthru", 
      JSIL.MethodSignature.Return($.Boolean), 
      MetaType_get_EnumPassthru
    );

    $.Method({Static:false, Public:false}, "get_Fields", 
      JSIL.MethodSignature.Return($asm14.TypeRef("System.Collections.IEnumerable")), 
      MetaType_get_Fields
    );

    $.Method({Static:false, Public:true }, "get_HasCallbacks", 
      JSIL.MethodSignature.Return($.Boolean), 
      MetaType_get_HasCallbacks
    );

    $.Method({Static:false, Public:true }, "get_HasSubtypes", 
      JSIL.MethodSignature.Return($.Boolean), 
      MetaType_get_HasSubtypes
    );

    $.Method({Static:false, Public:true }, "get_IgnoreListHandling", 
      JSIL.MethodSignature.Return($.Boolean), 
      MetaType_get_IgnoreListHandling
    );

    $.Method({Static:false, Public:true }, "get_IncludeSerializerMethod", 
      JSIL.MethodSignature.Return($.Boolean), 
      MetaType_get_IncludeSerializerMethod
    );

    $.Method({Static:false, Public:false}, "get_IsAutoTuple", 
      JSIL.MethodSignature.Return($.Boolean), 
      MetaType_get_IsAutoTuple
    );

    $.Method({Static:false, Public:false}, "get_IsList", 
      JSIL.MethodSignature.Return($.Boolean), 
      MetaType_get_IsList
    );

    $.Method({Static:false, Public:false}, "get_IsValueType", 
      JSIL.MethodSignature.Return($.Boolean), 
      MetaType_get_IsValueType
    );

    $.Method({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm0E.TypeRef("ProtoBuf.Meta.ValueMember"), [$.Int32]), 
      MetaType_get_Item$0D
    );

    $.Method({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm0E.TypeRef("ProtoBuf.Meta.ValueMember"), [$asm14.TypeRef("System.Reflection.MemberInfo")]), 
      MetaType_get_Item$0E
    );

    $.Method({Static:false, Public:false}, "get_Model", 
      JSIL.MethodSignature.Return($asm0E.TypeRef("ProtoBuf.Meta.TypeModel")), 
      MetaType_get_Model
    );

    $.Method({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String), 
      MetaType_get_Name
    );

    $.Method({Static:false, Public:false}, "get_Pending", 
      JSIL.MethodSignature.Return($.Boolean), 
      MetaType_get_Pending
    );

    $.Method({Static:false, Public:false}, "get_Serializer", 
      JSIL.MethodSignature.Return($asm0E.TypeRef("ProtoBuf.Serializers.IProtoTypeSerializer")), 
      MetaType_get_Serializer
    );

    $.Method({Static:false, Public:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm14.TypeRef("System.Type")), 
      MetaType_get_Type
    );

    $.Method({Static:false, Public:true }, "get_UseConstructor", 
      JSIL.MethodSignature.Return($.Boolean), 
      MetaType_get_UseConstructor
    );

    $.Method({Static:true , Public:false}, "GetAsReferenceDefault", 
      new JSIL.MethodSignature($.Boolean, [$asm0E.TypeRef("ProtoBuf.Meta.RuntimeTypeModel"), $asm14.TypeRef("System.Type")]), 
      MetaType_GetAsReferenceDefault
    );

    $.Method({Static:true , Public:false}, "GetAttribute", 
      new JSIL.MethodSignature($asm0E.TypeRef("ProtoBuf.Meta.AttributeMap"), [$jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("ProtoBuf.Meta.AttributeMap")]), $.String]), 
      MetaType_GetAttribute
    );

    $.Method({Static:true , Public:false}, "GetBaseType", 
      new JSIL.MethodSignature($asm14.TypeRef("System.Type"), [$.Type]), 
      MetaType_GetBaseType
    );

    $.Method({Static:true , Public:false}, "GetContractFamily", 
      new JSIL.MethodSignature($asm0E.TypeRef("ProtoBuf.Meta.MetaType+AttributeFamily"), [
          $asm0E.TypeRef("ProtoBuf.Meta.RuntimeTypeModel"), $asm14.TypeRef("System.Type"), 
          $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("ProtoBuf.Meta.AttributeMap")])
        ]), 
      MetaType_GetContractFamily
    );

    $.Method({Static:true , Public:false}, "GetDataFormat", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm0E.TypeRef("ProtoBuf.DataFormat")]), $asm0E.TypeRef("ProtoBuf.Meta.AttributeMap"), 
          $.String
        ]), 
      MetaType_GetDataFormat
    );

    $.Method({Static:false, Public:false}, "GetEnumMap", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("ProtoBuf.Serializers.EnumSerializer+EnumPair")])), 
      MetaType_GetEnumMap
    );

    $.Method({Static:true , Public:false}, "GetFieldBoolean", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), $asm0E.TypeRef("ProtoBuf.Meta.AttributeMap"), 
          $.String
        ]), 
      MetaType_GetFieldBoolean$0F
    );

    $.Method({Static:true , Public:false}, "GetFieldBoolean", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), $asm0E.TypeRef("ProtoBuf.Meta.AttributeMap"), 
          $.String, $.Boolean
        ]), 
      MetaType_GetFieldBoolean$10
    );

    $.Method({Static:true , Public:false}, "GetFieldName", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.String]), $asm0E.TypeRef("ProtoBuf.Meta.AttributeMap"), 
          $.String
        ]), 
      MetaType_GetFieldName
    );

    $.Method({Static:true , Public:false}, "GetFieldNumber", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $asm0E.TypeRef("ProtoBuf.Meta.AttributeMap"), 
          $.String
        ]), 
      MetaType_GetFieldNumber
    );

    $.Method({Static:false, Public:true }, "GetFields", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("ProtoBuf.Meta.ValueMember")])), 
      MetaType_GetFields
    );

    $.Method({Static:true , Public:false}, "GetIgnore", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), $asm0E.TypeRef("ProtoBuf.Meta.AttributeMap"), 
          $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("ProtoBuf.Meta.AttributeMap")]), $.String
        ]), 
      MetaType_GetIgnore
    );

    $.Method({Static:false, Public:false}, "GetKey", 
      new JSIL.MethodSignature($.Int32, [$.Boolean, $.Boolean]), 
      MetaType_GetKey
    );

    $.Method({Static:false, Public:false}, "GetNextFieldNumber", 
      JSIL.MethodSignature.Return($.Int32), 
      MetaType_GetNextFieldNumber
    );

    $.Method({Static:true , Public:false}, "GetRootType", 
      new JSIL.MethodSignature($.Type, [$.Type]), 
      MetaType_GetRootType
    );

    $.Method({Static:false, Public:false}, "GetSchemaTypeName", 
      JSIL.MethodSignature.Return($.String), 
      MetaType_GetSchemaTypeName
    );

    $.Method({Static:false, Public:true }, "GetSubtypes", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("ProtoBuf.Meta.SubType")])), 
      MetaType_GetSubtypes
    );

    $.Method({Static:false, Public:false}, "GetSurrogateOrBaseOrSelf", 
      new JSIL.MethodSignature($.Type, [$.Boolean]), 
      MetaType_GetSurrogateOrBaseOrSelf
    );

    $.Method({Static:false, Public:false}, "GetSurrogateOrSelf", 
      JSIL.MethodSignature.Return($.Type), 
      MetaType_GetSurrogateOrSelf
    );

    $.Method({Static:true , Public:false}, "HasFamily", 
      new JSIL.MethodSignature($.Boolean, [$asm0E.TypeRef("ProtoBuf.Meta.MetaType+AttributeFamily"), $asm0E.TypeRef("ProtoBuf.Meta.MetaType+AttributeFamily")]), 
      MetaType_HasFamily
    );

    $.Method({Static:false, Public:false}, "HasFlag", 
      new JSIL.MethodSignature($.Boolean, [$.Byte]), 
      MetaType_HasFlag
    );

    $.Method({Static:true , Public:false}, "InbuiltType", 
      new JSIL.MethodSignature($asm14.TypeRef("System.Exception"), [$asm14.TypeRef("System.Type")]), 
      MetaType_InbuiltType
    );

    $.Method({Static:false, Public:false}, "IsDefined", 
      new JSIL.MethodSignature($.Boolean, [$.Int32]), 
      MetaType_IsDefined
    );

    $.Method({Static:false, Public:false}, "IsPrepared", 
      JSIL.MethodSignature.Return($.Boolean), 
      MetaType_IsPrepared
    );

    $.Method({Static:false, Public:false}, "IsValidSubType", 
      new JSIL.MethodSignature($.Boolean, [$asm14.TypeRef("System.Type")]), 
      MetaType_IsValidSubType
    );

    $.Method({Static:true , Public:false}, "NewLine", 
      new JSIL.MethodSignature($asm14.TypeRef("System.Text.StringBuilder"), [$asm14.TypeRef("System.Text.StringBuilder"), $.Int32]), 
      MetaType_NewLine
    );

    $.Method({Static:true , Public:false}, "NormalizeProtoMember", 
      new JSIL.MethodSignature($asm0E.TypeRef("ProtoBuf.ProtoMemberAttribute"), [
          $asm0E.TypeRef("ProtoBuf.Meta.TypeModel"), $asm14.TypeRef("System.Reflection.MemberInfo"), 
          $asm0E.TypeRef("ProtoBuf.Meta.MetaType+AttributeFamily"), $.Boolean, 
          $.Boolean, $asm0E.TypeRef("ProtoBuf.Meta.BasicList"), 
          $.Int32, $.Boolean
        ]), 
      MetaType_NormalizeProtoMember
    );

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.ISerializerProxy.get_Serializer", 
      JSIL.MethodSignature.Return($asm0E.TypeRef("ProtoBuf.Serializers.IProtoSerializer")), 
      MetaType_ProtoBuf_Serializers_ISerializerProxy_get_Serializer
    )
      .Overrides($asm0E.TypeRef("ProtoBuf.Serializers.ISerializerProxy"), "get_Serializer");

    $.Method({Static:true , Public:false}, "ResolveListTypes", 
      new JSIL.MethodSignature(null, [
          $asm0E.TypeRef("ProtoBuf.Meta.TypeModel"), $asm14.TypeRef("System.Type"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm14.TypeRef("System.Type")]), $jsilcore.TypeRef("JSIL.Reference", [$asm14.TypeRef("System.Type")])
        ]), 
      MetaType_ResolveListTypes
    );

    $.Method({Static:false, Public:false}, "ResolveMethod", 
      new JSIL.MethodSignature($asm14.TypeRef("System.Reflection.MethodInfo"), [$.String, $.Boolean]), 
      MetaType_ResolveMethod
    );

    $.Method({Static:true , Public:false}, "ResolveTupleConstructor", 
      new JSIL.MethodSignature($asm14.TypeRef("System.Reflection.ConstructorInfo"), [$asm14.TypeRef("System.Type"), $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$asm14.TypeRef("System.Reflection.MemberInfo")])])]), 
      MetaType_ResolveTupleConstructor
    );

    $.Method({Static:false, Public:true }, "set_AsReferenceDefault", 
      JSIL.MethodSignature.Action($.Boolean), 
      MetaType_set_AsReferenceDefault
    );

    $.Method({Static:false, Public:true }, "set_ConstructType", 
      JSIL.MethodSignature.Action($asm14.TypeRef("System.Type")), 
      MetaType_set_ConstructType
    );

    $.Method({Static:false, Public:true }, "set_EnumPassthru", 
      JSIL.MethodSignature.Action($.Boolean), 
      MetaType_set_EnumPassthru
    );

    $.Method({Static:false, Public:true }, "set_IgnoreListHandling", 
      JSIL.MethodSignature.Action($.Boolean), 
      MetaType_set_IgnoreListHandling
    );

    $.Method({Static:false, Public:true }, "set_IncludeSerializerMethod", 
      JSIL.MethodSignature.Action($.Boolean), 
      MetaType_set_IncludeSerializerMethod
    );

    $.Method({Static:false, Public:true }, "set_Name", 
      JSIL.MethodSignature.Action($.String), 
      MetaType_set_Name
    );

    $.Method({Static:false, Public:false}, "set_Pending", 
      JSIL.MethodSignature.Action($.Boolean), 
      MetaType_set_Pending
    );

    $.Method({Static:false, Public:true }, "set_UseConstructor", 
      JSIL.MethodSignature.Action($.Boolean), 
      MetaType_set_UseConstructor
    );

    $.Method({Static:false, Public:false}, "SetBaseType", 
      JSIL.MethodSignature.Action($.Type), 
      MetaType_SetBaseType
    );

    $.Method({Static:false, Public:true }, "SetCallbacks", 
      new JSIL.MethodSignature($.Type, [
          $asm14.TypeRef("System.Reflection.MethodInfo"), $asm14.TypeRef("System.Reflection.MethodInfo"), 
          $asm14.TypeRef("System.Reflection.MethodInfo"), $asm14.TypeRef("System.Reflection.MethodInfo")
        ]), 
      MetaType_SetCallbacks$11
    );

    $.Method({Static:false, Public:true }, "SetCallbacks", 
      new JSIL.MethodSignature($.Type, [
          $.String, $.String, 
          $.String, $.String
        ]), 
      MetaType_SetCallbacks$12
    );

    $.Method({Static:false, Public:true }, "SetFactory", 
      new JSIL.MethodSignature($.Type, [$asm14.TypeRef("System.Reflection.MethodInfo")]), 
      MetaType_SetFactory$13
    );

    $.Method({Static:false, Public:true }, "SetFactory", 
      new JSIL.MethodSignature($.Type, [$.String]), 
      MetaType_SetFactory$14
    );

    $.Method({Static:false, Public:false}, "SetFlag", 
      new JSIL.MethodSignature(null, [
          $.Byte, $.Boolean, 
          $.Boolean
        ]), 
      MetaType_SetFlag
    );

    $.Method({Static:false, Public:true }, "SetSurrogate", 
      JSIL.MethodSignature.Action($asm14.TypeRef("System.Type")), 
      MetaType_SetSurrogate
    );

    $.Method({Static:false, Public:false}, "ThrowIfFrozen", 
      JSIL.MethodSignature.Void, 
      MetaType_ThrowIfFrozen
    );

    $.Method({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String), 
      MetaType_toString
    );

    $.Method({Static:false, Public:false}, "WriteSchema", 
      new JSIL.MethodSignature(null, [
          $asm14.TypeRef("System.Text.StringBuilder"), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ]), 
      MetaType_WriteSchema
    );

    $.Field({Static:false, Public:false}, "baseType", $.Type);

    $.Field({Static:false, Public:false}, "subTypes", $asm0E.TypeRef("ProtoBuf.Meta.BasicList"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "ienumerable", $asm14.TypeRef("System.Type"), function ($pi) {
        return $asm14.System.Collections.IEnumerable.__Type__;
      });

    $.Field({Static:false, Public:false}, "callbacks", $asm0E.TypeRef("ProtoBuf.Meta.CallbackSet"));

    $.Field({Static:false, Public:false}, "$name", $.String);

    $.Field({Static:false, Public:false}, "factory", $asm14.TypeRef("System.Reflection.MethodInfo"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "model", $asm0E.TypeRef("ProtoBuf.Meta.RuntimeTypeModel"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "type", $asm14.TypeRef("System.Type"));

    $.Field({Static:false, Public:false}, "serializer", $asm0E.TypeRef("ProtoBuf.Serializers.IProtoTypeSerializer"));

    $.Field({Static:false, Public:false}, "constructType", $asm14.TypeRef("System.Type"));

    $.Field({Static:false, Public:false}, "surrogate", $asm14.TypeRef("System.Type"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "fields", $asm0E.TypeRef("ProtoBuf.Meta.BasicList"));

    $.Constant({Static:true , Public:false}, "OPTIONS_Pending", $.Byte, 1);

    $.Constant({Static:true , Public:false}, "OPTIONS_EnumPassThru", $.Byte, 2);

    $.Constant({Static:true , Public:false}, "OPTIONS_Frozen", $.Byte, 4);

    $.Constant({Static:true , Public:false}, "OPTIONS_PrivateOnApi", $.Byte, 8);

    $.Constant({Static:true , Public:false}, "OPTIONS_SkipConstructor", $.Byte, 16);

    $.Constant({Static:true , Public:false}, "OPTIONS_AsReferenceDefault", $.Byte, 32);

    $.Constant({Static:true , Public:false}, "OPTIONS_AutoTuple", $.Byte, 64);

    $.Constant({Static:true , Public:false}, "OPTIONS_IgnoreListHandling", $.Byte, 128);

    $.Field({Static:false, Public:false}, "flags", $asm14.TypeRef("System.Byte"));


    function MetaType__cctor () {
      $thisType.ienumerable = $T00().__Type__;
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      MetaType__cctor
    );

    $.Property({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.ISerializerProxy.Serializer", $asm0E.TypeRef("ProtoBuf.Serializers.IProtoSerializer"));

    $.Property({Static:false, Public:true }, "BaseType", $.Type);

    $.Property({Static:false, Public:false}, "Model", $asm0E.TypeRef("ProtoBuf.Meta.TypeModel"));

    $.Property({Static:false, Public:true }, "IncludeSerializerMethod", $.Boolean);

    $.Property({Static:false, Public:true }, "AsReferenceDefault", $.Boolean);

    $.Property({Static:false, Public:true }, "HasCallbacks", $.Boolean);

    $.Property({Static:false, Public:true }, "HasSubtypes", $.Boolean);

    $.Property({Static:false, Public:true }, "Callbacks", $asm0E.TypeRef("ProtoBuf.Meta.CallbackSet"));

    $.Property({Static:false, Public:false}, "IsValueType", $.Boolean);

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "Type", $asm14.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "Serializer", $asm0E.TypeRef("ProtoBuf.Serializers.IProtoTypeSerializer"));

    $.Property({Static:false, Public:false}, "IsList", $.Boolean);

    $.Property({Static:false, Public:true }, "UseConstructor", $.Boolean);

    $.Property({Static:false, Public:true }, "ConstructType", $asm14.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "Item", $asm0E.TypeRef("ProtoBuf.Meta.ValueMember"));

    $.Property({Static:false, Public:true }, "Item", $asm0E.TypeRef("ProtoBuf.Meta.ValueMember"));

    $.Property({Static:false, Public:true }, "EnumPassthru", $.Boolean);

    $.Property({Static:false, Public:true }, "IgnoreListHandling", $.Boolean);

    $.Property({Static:false, Public:false}, "Pending", $.Boolean);

    $.Property({Static:false, Public:false}, "Fields", $asm14.TypeRef("System.Collections.IEnumerable"));

    $.Property({Static:false, Public:false}, "IsAutoTuple", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm0E.TypeRef("ProtoBuf.Serializers.ISerializerProxy")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm14.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class ProtoBuf.Meta.MetaType+Comparer */ 

(function Comparer$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm14.System.Object)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0E.ProtoBuf.Meta.MetaType)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm14.System.Boolean)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm14.System.Int32)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm14.System.String)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm14.System.StringComparison)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature($asm14.TypeRef("System.Int32"), [$asm0E.TypeRef("ProtoBuf.Meta.MetaType"), $asm0E.TypeRef("ProtoBuf.Meta.MetaType")]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature($asm14.TypeRef("System.Int32"), [
        $asm14.TypeRef("System.String"), $asm14.TypeRef("System.String"), 
        $asm14.TypeRef("System.StringComparison")
      ]))) ();
  };


  function Comparer__ctor () {
  }; 

  function Comparer_Compare$00 (x, y) {
    return $S00().CallVirtual("Compare", null, this, $T01().$As(x), $T01().$As(y));
  }; 

  function Comparer_Compare$01 (x, y) {
    var flag = x === y;
    if (flag) {
      var result = 0;
    } else {
      var flag2 = x === null;
      if (flag2) {
        result = -1;
      } else {
        var flag3 = y === null;
        if (flag3) {
          result = 1;
        } else {
          result = ($S01().CallStatic($T04(), "Compare", null, 
            x.GetSchemaTypeName(), 
            y.GetSchemaTypeName(), 
            $T05().Ordinal
          ) | 0);
        }
      }
    }
    return result;
  }; 

  JSIL.MakeType({
      BaseType: $asm14.TypeRef("System.Object"), 
      Name: "ProtoBuf.Meta.MetaType+Comparer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      Comparer__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.Object, $.Object]), 
      Comparer_Compare$00
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$asm0E.TypeRef("ProtoBuf.Meta.MetaType"), $asm0E.TypeRef("ProtoBuf.Meta.MetaType")]), 
      Comparer_Compare$01
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "Default", $.Type);


    function Comparer__cctor () {
      $thisType.Default = new $thisType();
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      Comparer__cctor
    );

    $.ImplementInterfaces(
      /* 0 */ $asm14.TypeRef("System.Collections.IComparer"), 
      /* 1 */ $asm14.TypeRef("System.Collections.Generic.IComparer`1", [$asm0E.TypeRef("ProtoBuf.Meta.MetaType")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum ProtoBuf.Meta.MetaType+AttributeFamily */ 

JSIL.MakeEnum(
  {
    FullName: "ProtoBuf.Meta.MetaType+AttributeFamily", 
    BaseType: $asm14.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: true, 
  }, 
  {
    None: 0, 
    ProtoBuf: 1, 
    DataContractSerialier: 2, 
    XmlSerializer: 4, 
    AutoTuple: 8, 
  }
);

/* class ProtoBuf.Meta.TypeModel */ 

(function TypeModel$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm14.System.Collections.IList)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0E.ProtoBuf.Meta.TypeFormatEventHandler)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm14.System.Delegate)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm14.System.Threading.Interlocked)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm14.System.Type)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm14.System.Boolean)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm14.System.ArgumentNullException)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm0E.ProtoBuf.Helpers)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm0E.ProtoBuf.ProtoTypeCode)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm14.System.Int32)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm14.System.Collections.Generic.KeyValuePair$b2)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm0E.ProtoBuf.Meta.RuntimeTypeModel)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm14.System.String)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm14.System.Object)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm14.System.Array)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm14.System.Collections.Generic.IDictionary$b2)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize(System.Array.Of($asm14.System.Type))) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm14.System.Collections.Generic.Dictionary$b2)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm14.System.Collections.Generic.List$b1)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm14.System.Activator)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm14.System.NotSupportedException)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm14.System.IO.MemoryStream)) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm0E.ProtoBuf.ProtoWriter)) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm14.System.IDisposable)) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize($asm14.System.IO.Stream)) ();
  };
  var $T19 = function () {
    return ($T19 = JSIL.Memoize($asm14.System.Int64)) ();
  };
  var $T1A = function () {
    return ($T1A = JSIL.Memoize($asm0E.ProtoBuf.ProtoReader)) ();
  };
  var $T1B = function () {
    return ($T1B = JSIL.Memoize(System.Array.Of($asm14.System.Byte))) ();
  };
  var $T1C = function () {
    return ($T1C = JSIL.Memoize($asm14.System.Byte)) ();
  };
  var $T1D = function () {
    return ($T1D = JSIL.Memoize($asm0E.ProtoBuf.DataFormat)) ();
  };
  var $T1E = function () {
    return ($T1E = JSIL.Memoize($asm0E.ProtoBuf.WireType)) ();
  };
  var $T1F = function () {
    return ($T1F = JSIL.Memoize($asm0E.ProtoBuf.SerializationContext)) ();
  };
  var $T20 = function () {
    return ($T20 = JSIL.Memoize($asm0E.ProtoBuf.PrefixStyle)) ();
  };
  var $T21 = function () {
    return ($T21 = JSIL.Memoize($asm0E.ProtoBuf.Serializer_TypeResolver)) ();
  };
  var $T22 = function () {
    return ($T22 = JSIL.Memoize($asm0E.ProtoBuf.Meta.TypeModel_DeserializeItemsIterator)) ();
  };
  var $T23 = function () {
    return ($T23 = JSIL.Memoize($asm0E.ProtoBuf.Meta.TypeFormatEventArgs)) ();
  };
  var $T24 = function () {
    return ($T24 = JSIL.Memoize($asm14.System.InvalidOperationException)) ();
  };
  var $T25 = function () {
    return ($T25 = JSIL.Memoize($asm14.System.Collections.IEnumerable)) ();
  };
  var $T26 = function () {
    return ($T26 = JSIL.Memoize($asm0E.ProtoBuf.Meta.BasicList)) ();
  };
  var $T27 = function () {
    return ($T27 = JSIL.Memoize(System.Array.Of($asm14.System.Reflection.MethodInfo))) ();
  };
  var $T28 = function () {
    return ($T28 = JSIL.Memoize($asm14.System.Reflection.MethodInfo)) ();
  };
  var $T29 = function () {
    return ($T29 = JSIL.Memoize($asm14.System.Reflection.MethodBase)) ();
  };
  var $T2A = function () {
    return ($T2A = JSIL.Memoize($asm14.System.Reflection.MemberInfo)) ();
  };
  var $T2B = function () {
    return ($T2B = JSIL.Memoize(System.Array.Of($asm14.System.Reflection.ParameterInfo))) ();
  };
  var $T2C = function () {
    return ($T2C = JSIL.Memoize($asm14.System.Reflection.ParameterInfo)) ();
  };
  var $T2D = function () {
    return ($T2D = JSIL.Memoize(System.Array.Of($asm14.System.Reflection.PropertyInfo))) ();
  };
  var $T2E = function () {
    return ($T2E = JSIL.Memoize($asm14.System.Reflection.BindingFlags)) ();
  };
  var $T2F = function () {
    return ($T2F = JSIL.Memoize($asm14.System.Reflection.PropertyInfo)) ();
  };
  var $T30 = function () {
    return ($T30 = JSIL.Memoize($asm14.System.Reflection.Assembly)) ();
  };
  var $T31 = function () {
    return ($T31 = JSIL.Memoize($asm14.System.Exception)) ();
  };
  var $T32 = function () {
    return ($T32 = JSIL.Memoize($asm14.System.Char)) ();
  };
  var $T33 = function () {
    return ($T33 = JSIL.Memoize($asm14.System.Collections.Generic.IEnumerable$b1)) ();
  };
  var $T34 = function () {
    return ($T34 = JSIL.Memoize($asm14.System.Collections.Generic.ICollection$b1)) ();
  };
  var $T35 = function () {
    return ($T35 = JSIL.Memoize($asm14.System.ArgumentOutOfRangeException)) ();
  };
  var $T36 = function () {
    return ($T36 = JSIL.Memoize($asm0E.ProtoBuf.ProtoException)) ();
  };
  var $T37 = function () {
    return ($T37 = JSIL.Memoize($asm0E.ProtoBuf.SubItemToken)) ();
  };
  var $T38 = function () {
    return ($T38 = JSIL.Memoize($asm14.System.SByte)) ();
  };
  var $T39 = function () {
    return ($T39 = JSIL.Memoize($asm14.System.Int16)) ();
  };
  var $T3A = function () {
    return ($T3A = JSIL.Memoize($asm14.System.UInt16)) ();
  };
  var $T3B = function () {
    return ($T3B = JSIL.Memoize($asm14.System.UInt32)) ();
  };
  var $T3C = function () {
    return ($T3C = JSIL.Memoize($asm14.System.Single)) ();
  };
  var $T3D = function () {
    return ($T3D = JSIL.Memoize($asm14.System.Double)) ();
  };
  var $T3E = function () {
    return ($T3E = JSIL.Memoize($asm0E.ProtoBuf.BclHelpers)) ();
  };
  var $T3F = function () {
    return ($T3F = JSIL.Memoize($asm0F.System.Uri)) ();
  };
  var $T40 = function () {
    return ($T40 = JSIL.Memoize(System.Array.Of($asm14.System.Object))) ();
  };
  var $T41 = function () {
    return ($T41 = JSIL.Memoize($asm14.System.UInt64)) ();
  };
  var $T42 = function () {
    return ($T42 = JSIL.Memoize($asm14.System.Decimal)) ();
  };
  var $T43 = function () {
    return ($T43 = JSIL.Memoize($asm14.System.DateTime)) ();
  };
  var $T44 = function () {
    return ($T44 = JSIL.Memoize($asm14.System.TimeSpan)) ();
  };
  var $T45 = function () {
    return ($T45 = JSIL.Memoize($asm14.System.Guid)) ();
  };
  var $T46 = function () {
    return ($T46 = JSIL.Memoize($asm14.System.Collections.IEnumerator)) ();
  };
  var $T47 = function () {
    return ($T47 = JSIL.Memoize($asm14.System.NullReferenceException)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm14.TypeRef("System.ArgumentNullException"), [$asm14.TypeRef("System.String")]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature($asm14.TypeRef("System.Object"), [$asm14.TypeRef("System.Type")]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm14.TypeRef("System.NotSupportedException"), [$asm14.TypeRef("System.String")]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm14.TypeRef("System.IO.MemoryStream"), null))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm14.TypeRef("System.Int32"), $asm14.TypeRef("System.Object"), 
        $asm0E.TypeRef("ProtoBuf.ProtoWriter")
      ]))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.MethodSignature($asm14.TypeRef("System.Object"), [
        $asm14.TypeRef("System.Int32"), $asm14.TypeRef("System.Object"), 
        $asm0E.TypeRef("ProtoBuf.ProtoReader")
      ]))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(new JSIL.MethodSignature($asm14.TypeRef("System.Object"), [
        $asm14.TypeRef("System.IO.Stream"), $asm14.TypeRef("System.Object"), 
        $asm14.TypeRef("System.Type"), $asm0E.TypeRef("ProtoBuf.SerializationContext")
      ]))) ();
  };
  var $S07 = function () {
    return ($S07 = JSIL.Memoize(new JSIL.MethodSignature($asm14.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [
        $asm14.TypeRef("System.IO.Stream"), $asm0E.TypeRef("ProtoBuf.PrefixStyle"), 
        $asm14.TypeRef("System.Int32"), $asm0E.TypeRef("ProtoBuf.SerializationContext")
      ], ["T"]))) ();
  };
  var $S08 = function () {
    return ($S08 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0E.TypeRef("ProtoBuf.Meta.TypeFormatEventArgs"), [$asm14.TypeRef("System.String")]))) ();
  };
  var $S09 = function () {
    return ($S09 = JSIL.Memoize(new JSIL.ConstructorSignature($asm14.TypeRef("System.InvalidOperationException"), [$asm14.TypeRef("System.String")]))) ();
  };
  var $S0A = function () {
    return ($S0A = JSIL.Memoize(new JSIL.ConstructorSignature($asm14.TypeRef("System.InvalidOperationException"), null))) ();
  };
  var $S0B = function () {
    return ($S0B = JSIL.Memoize(new JSIL.ConstructorSignature($asm14.TypeRef("System.NotSupportedException"), null))) ();
  };
  var $S0C = function () {
    return ($S0C = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm14.TypeRef("System.IO.Stream"), $asm14.TypeRef("System.Object"), 
        $asm0E.TypeRef("ProtoBuf.SerializationContext")
      ]))) ();
  };
  var $S0D = function () {
    return ($S0D = JSIL.Memoize(new JSIL.ConstructorSignature($asm0E.TypeRef("ProtoBuf.Meta.TypeFormatEventArgs"), [$asm14.TypeRef("System.Type")]))) ();
  };
  var $S0E = function () {
    return ($S0E = JSIL.Memoize(new JSIL.ConstructorSignature($asm14.TypeRef("System.ArgumentOutOfRangeException"), [$asm14.TypeRef("System.String")]))) ();
  };
  var $S0F = function () {
    return ($S0F = JSIL.Memoize(new JSIL.ConstructorSignature($asm0E.TypeRef("ProtoBuf.ProtoException"), [$asm14.TypeRef("System.String")]))) ();
  };
  var $S10 = function () {
    return ($S10 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.TypeRef("System.Uri"), [$asm0D.TypeRef("System.String")]))) ();
  };
  var $S11 = function () {
    return ($S11 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm14.TypeRef("System.Array"), $asm14.TypeRef("System.Array"), 
        $asm14.TypeRef("System.Int32")
      ]))) ();
  };
  var $S12 = function () {
    return ($S12 = JSIL.Memoize(new JSIL.ConstructorSignature($asm14.TypeRef("System.NullReferenceException"), null))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm14.System.IDisposable.Dispose)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm14.System.Collections.IList.Add)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm14.System.Collections.IEnumerable.GetEnumerator)) ();
  };
  var $IM03 = function () {
    return ($IM03 = JSIL.Memoize($asm14.System.Collections.IEnumerator.MoveNext)) ();
  };
  var $IM04 = function () {
    return ($IM04 = JSIL.Memoize($asm14.System.Collections.IEnumerator.get_Current)) ();
  };


  function TypeModel__ctor () {
  }; 

  function TypeModel_add_DynamicTypeFormatting (value) {
    var typeFormatEventHandler = this.DynamicTypeFormatting;

    do {
      var typeFormatEventHandler2 = typeFormatEventHandler;
      var value2 = $T02().Combine(typeFormatEventHandler2, value);
      typeFormatEventHandler = $T03().CompareExchange$b1($T01())(/* ref */ new JSIL.MemberReference(this, "DynamicTypeFormatting"), value2, typeFormatEventHandler2);
    } while (typeFormatEventHandler !== typeFormatEventHandler2);
  }; 

  function TypeModel_CanSerialize$00 (type) {
    return this.CanSerialize(type, true, true, true);
  }; 

  function TypeModel_CanSerialize$01 ($type, allowBasic, allowContract, allowLists) {
    var type = new JSIL.BoxedVariable($type);
    var flag = type.get() === null;
    if (flag) {
      throw $S00().Construct("type");
    }
    var tmp = $T07().GetUnderlyingType(type.get());
    var flag2 = tmp !== null;
    if (flag2) {
      type.set(tmp);
    }
    var typeCode = $T07().GetTypeCode(type.get());
    var protoTypeCode = typeCode;
    if (!(((protoTypeCode.valueOf() | 0) === 0) || (protoTypeCode === $T08().Unknown))) {
      var result = allowBasic;
    } else {
      var modelKey = (this.GetKey(/* ref */ type) | 0);
      var flag3 = modelKey >= 0;
      if (flag3) {
        result = allowContract;
      } else {
        if (allowLists) {
          var itemType = null;
          var isArray = (type.get()).get_IsArray();
          if (isArray) {
            var flag4 = ((type.get()).GetArrayRank() | 0) === 1;
            if (flag4) {
              itemType = (type.get()).GetElementType();
            }
          } else {
            itemType = $thisType.GetListItemType(this, type.get());
          }
          var flag5 = itemType !== null;
          if (flag5) {
            result = this.CanSerialize(itemType, allowBasic, allowContract, false);
            return result;
          }
        }
        result = false;
      }
    }
    return result;
  }; 

  function TypeModel_CanSerializeBasicType (type) {
    return this.CanSerialize(type, true, false, true);
  }; 

  function TypeModel_CanSerializeContractType (type) {
    return this.CanSerialize(type, false, true, true);
  }; 

  function TypeModel_CheckDictionaryAccessors (model, pair, value) {
    return (!(!pair.get_IsGenericType() || 
        (pair.GetGenericTypeDefinition() !== model.MapType($T0A().__Type__))) && (pair.GetGenericArguments()[1] === value));
  }; 

  function TypeModel_Create$02 () {
    return new ($T0B())(false);
  }; 

  function TypeModel_CreateListInstance (listType, itemType) {
    var fullName = null;
    var concreteListType = listType;
    var isArray = listType.get_IsArray();
    if (isArray) {
      var result = (JSIL.Array.New(itemType, 0));
    } else {
      var flag = !listType.get_IsClass() || 
      listType.get_IsAbstract() || 
      ($T07().GetConstructor(listType, $T07().EmptyTypes, true) === null);
      if (flag) {
        var handled = false;
        var flag2 = !(!listType.get_IsInterface() || 
          ((fullName = listType.get_FullName()) === null)) && 
        ((fullName.indexOf("Dictionary")) >= 0);
        if (flag2) {
          var flag3 = listType.get_IsGenericType() && 
          (listType.GetGenericTypeDefinition() === $T0F().__Type__);
          if (flag3) {
            var genericTypes = listType.GetGenericArguments();
            concreteListType = $T11().__Type__.MakeGenericType(genericTypes);
            handled = true;
          }
        }
        var flag4 = !handled;
        if (flag4) {
          concreteListType = $T12().__Type__.MakeGenericType(JSIL.Array.New($T04(), [itemType]));
        }
      }
      result = $S01().CallStatic($T13(), "CreateInstance", null, concreteListType);
    }
    return result;
  }; 

  function TypeModel_CreateNestedListsNotSupported () {
    return $S02().Construct("Nested or jagged lists and arrays are not supported");
  }; 

  function TypeModel_DeepClone ($value) {
    var value = new JSIL.BoxedVariable($value);
    var modelKey = new JSIL.BoxedVariable(0);
    var flag = value.get() === null;
    var type = new JSIL.BoxedVariable(null);
    if (flag) {
      var result = null;
    } else {
      type.set(JSIL.GetType(value.get()));
      var key = (this.GetKey(/* ref */ type) | 0);
      var flag2 = (key >= 0) && 
      !$T07().IsEnum(type.get());
      if (flag2) {
        var ms = $S03().Construct();
        try {
          var writer = new ($T16())(ms, this, null);
          try {
            writer.SetRootObject(value.get());
            $S04().CallVirtual("Serialize", null, this, key, value.get(), writer);
            writer.Close();
          } finally {
            if (writer !== null) {
              $IM00().Call(writer, null);
            }
          }
          ms.set_Position($T19().Create(0, 0, 0));
          var reader = null;
          try {
            reader = $T1A().Create(ms, this, null, -1);
            result = $S05().CallVirtual("Deserialize", null, this, key, null, reader);
            return result;
          } finally {
            $T1A().Recycle(reader);
          }
        } finally {
          if (ms !== null) {
            $IM00().Call(ms, null);
          }
        }
      }
      var flag3 = type.get() === $T1B().__Type__;
      if (flag3) {
        var orig = $T1B().$Cast(value.get());
        var clone = JSIL.Array.New($T1C(), orig.length);
        $T07().BlockCopy(
          orig, 
          0, 
          clone, 
          0, 
          orig.length
        );
        result = clone;
      } else {
        var flag4 = (this.GetWireType($T07().GetTypeCode(type.get()), $T1D().Default, /* ref */ type, /* ref */ modelKey) !== $T1E().None) && 
        ((modelKey.get() | 0) < 0);
        if (flag4) {
          result = value.get();
        } else {
          var ms2 = $S03().Construct();
          try {
            var writer2 = new ($T16())(ms2, this, null);
            try {
              var flag5 = !this.TrySerializeAuxiliaryType(
                writer2, 
                type.get(), 
                $T1D().Default, 
                1, 
                value.get(), 
                false
              );
              if (flag5) {
                $thisType.ThrowUnexpectedType(type.get());
              }
              writer2.Close();
            } finally {
              if (writer2 !== null) {
                $IM00().Call(writer2, null);
              }
            }
            ms2.set_Position($T19().Create(0, 0, 0));
            var reader2 = null;
            try {
              reader2 = $T1A().Create(ms2, this, null, -1);
              value.set(null);
              this.TryDeserializeAuxiliaryType(
                reader2, 
                $T1D().Default, 
                1, 
                type.get(), 
                /* ref */ value, 
                true, 
                false, 
                true, 
                false
              );
              result = value.get();
            } finally {
              $T1A().Recycle(reader2);
            }
          } finally {
            if (ms2 !== null) {
              $IM00().Call(ms2, null);
            }
          }
        }
      }
    }
    return result;
  }; 

  function TypeModel_Deserialize$03 (source, value, type) {
    return $S06().CallVirtual("Deserialize", null, this, source, value, type, null);
  }; 

  function TypeModel_Deserialize$04 (source, value, $type, context) {
    var type = new JSIL.BoxedVariable($type);
    var autoCreate = this.PrepareDeserialize(value, /* ref */ type);
    var reader = null;
    try {
      reader = $T1A().Create(source, this, context, -1);
      if (value !== null) {
        reader.SetRootObject(value);
      }
      var obj = this.DeserializeCore(reader, type.get(), value, autoCreate);
      reader.CheckFullyConsumed();
      var result = obj;
    } finally {
      $T1A().Recycle(reader);
    }
    return result;
  }; 

  function TypeModel_Deserialize$05 (source, value, type, length) {
    return this.Deserialize(
      source, 
      value, 
      type, 
      length, 
      null
    );
  }; 

  function TypeModel_Deserialize$06 (source, value, $type, length, context) {
    var type = new JSIL.BoxedVariable($type);
    var autoCreate = this.PrepareDeserialize(value, /* ref */ type);
    var reader = null;
    try {
      reader = $T1A().Create(source, this, context, length);
      if (value !== null) {
        reader.SetRootObject(value);
      }
      var obj = this.DeserializeCore(reader, type.get(), value, autoCreate);
      reader.CheckFullyConsumed();
      var result = obj;
    } finally {
      $T1A().Recycle(reader);
    }
    return result;
  }; 

  function TypeModel_Deserialize$07 (source, value, $type) {
    var type = new JSIL.BoxedVariable($type);
    var flag = source === null;
    if (flag) {
      throw $S00().Construct("source");
    }
    var autoCreate = this.PrepareDeserialize(value, /* ref */ type);
    if (value !== null) {
      source.SetRootObject(value);
    }
    var obj = this.DeserializeCore(source, type.get(), value, autoCreate);
    source.CheckFullyConsumed();
    return obj;
  }; 

  function TypeModel_DeserializeCore (reader, $type, $value, noAutoCreate) {
    var value = new JSIL.BoxedVariable($value);
    var type = new JSIL.BoxedVariable($type);
    var key = (this.GetKey(/* ref */ type) | 0);
    var flag = (key >= 0) && 
    !$T07().IsEnum(type.get());
    if (flag) {
      var result = $S05().CallVirtual("Deserialize", null, this, key, value.get(), reader);
    } else {
      this.TryDeserializeAuxiliaryType(
        reader, 
        $T1D().Default, 
        1, 
        type.get(), 
        /* ref */ value, 
        true, 
        false, 
        noAutoCreate, 
        false
      );
      result = value.get();
    }
    return result;
  }; 

  function TypeModel_DeserializeItems$08 (source, type, style, expectedField, resolver) {
    return this.DeserializeItems(
      source, 
      type, 
      style, 
      expectedField, 
      resolver, 
      null
    );
  }; 

  function TypeModel_DeserializeItems$09 (source, type, style, expectedField, resolver, context) {
    return new ($T22())(this, source, type, style, expectedField, resolver, context);
  }; 

  function TypeModel_DeserializeItems$b1$0A (T, source, style, expectedField) {
    return $S07().CallVirtual("DeserializeItems$b1", [T], this, source, style, expectedField, null);
  }; 

  function TypeModel_DeserializeItems$b1$0B (T, source, style, expectedField, context) {
    return new ($asm0E.ProtoBuf.Meta.TypeModel_DeserializeItemsIterator$b1.Of(T)) (this, source, style, expectedField, context);
  }; 

  function TypeModel_DeserializeType (model, value) {
    var flag = model !== null;
    if (flag) {
      var handler = model.DynamicTypeFormatting;
      var flag2 = handler !== null;
      if (flag2) {
        var args = $S08().Construct(value);
        handler(model, args);
        var flag3 = args.get_Type() !== null;
        if (flag3) {
          var type = args.get_Type();
          return type;
        }
      }
    }
    type = (JSIL.ReflectionGetTypeInternal($asm0E.__Assembly__, value, false, false));
    return type;
  }; 

  function TypeModel_DeserializeWithLengthPrefix$0C (source, value, type, style, fieldNumber) {
    var bytesRead = new JSIL.BoxedVariable(0);
    return this.DeserializeWithLengthPrefix(
      source, 
      value, 
      type, 
      style, 
      fieldNumber, 
      null, 
      /* ref */ bytesRead
    );
  }; 

  function TypeModel_DeserializeWithLengthPrefix$0D (source, value, type, style, expectedField, resolver) {
    var bytesRead = new JSIL.BoxedVariable(0);
    return this.DeserializeWithLengthPrefix(
      source, 
      value, 
      type, 
      style, 
      expectedField, 
      resolver, 
      /* ref */ bytesRead
    );
  }; 

  function TypeModel_DeserializeWithLengthPrefix$0E (source, value, type, style, expectedField, resolver, /* ref */ bytesRead) {
    var haveObject = new JSIL.BoxedVariable(false);
    return this.DeserializeWithLengthPrefix(
      source, 
      value, 
      type, 
      style, 
      expectedField, 
      resolver, 
      /* ref */ bytesRead, 
      /* ref */ haveObject, 
      null
    );
  }; 

  function TypeModel_DeserializeWithLengthPrefix$0F (source, $value, $type, style, expectedField, resolver, /* ref */ bytesRead, /* ref */ haveObject, context) {
    var value = new JSIL.BoxedVariable($value);
    var type = new JSIL.BoxedVariable($type);
    var actualField = new JSIL.BoxedVariable(0);
    var tmpBytesRead = new JSIL.BoxedVariable(0);

    var $label0 = 0;
  $labelgroup0: 
    while (true) {
      switch ($label0) {
        case 0: /* $entry0 */ 
          haveObject.set(false);
          bytesRead.set(0);
          var flag = (type.get() === null) && 
          ((style !== $T20().Base128) || 
            (resolver === null));
          if (flag) {
            throw $S09().Construct("A type must be provided unless base-128 prefixing is being used in combination with a resolver");
          }

        $loop0: 
          while (true) {
            var expectPrefix = ((expectedField | 0) > 0) || 
            (resolver !== null);
            var len = ($T1A().ReadLengthPrefix(
              source, 
              expectPrefix, 
              style, 
              /* ref */ actualField, 
              /* ref */ tmpBytesRead
            ) | 0);
            var flag2 = (tmpBytesRead.get() | 0) === 0;
            if (flag2) {
              break $loop0;
            }
            bytesRead.set((((bytesRead.get() | 0) + (tmpBytesRead.get() | 0)) | 0));
            if (len < 0) {
              $label0 = 1 /* goto Block_6 */ ;
              continue $labelgroup0;
            }
            if (style !== $T20().Base128) {
              var skip = false;
            } else {
              var flag4 = !(!expectPrefix || 
                ((expectedField | 0) !== 0) || 
                (type.get() !== null)) && 
              (resolver !== null);
              if (flag4) {
                type.set(resolver(actualField.get()));
                skip = type.get() === null;
              } else {
                skip = (expectedField | 0) !== (actualField.get() | 0);
              }
            }
            var flag5 = skip;
            if (flag5) {
              if (len === 2147483647) {
                $label0 = 2 /* goto Block_13 */ ;
                continue $labelgroup0;
              }
              $T1A().Seek(source, len, null);
              bytesRead.set((((bytesRead.get() | 0) + len) | 0));
            }
            if (!skip) {
              break $labelgroup0;
            }
          }
          var result = value.get();
          return result;

          $label0 = 1 /* goto Block_6 */ ;
          continue $labelgroup0;
        case 1: /* Block_6 */ 
          result = value.get();
          return result;

          $label0 = 2 /* goto Block_13 */ ;
          continue $labelgroup0;
        case 2: /* Block_13 */ 
          throw $S0A().Construct();
          break $labelgroup0;

      }
    }
    /* Original label Block_14 */ 
    var reader = null;
    try {
      reader = $T1A().Create(source, this, context, len);
      var key = (this.GetKey(/* ref */ type) | 0);
      var flag7 = (key >= 0) && 
      !$T07().IsEnum(type.get());
      if (flag7) {
        value.set($S05().CallVirtual("Deserialize", null, this, key, value.get(), reader));
      } else {
        var flag8 = !this.TryDeserializeAuxiliaryType(
          reader, 
          $T1D().Default, 
          1, 
          type.get(), 
          /* ref */ value, 
          true, 
          false, 
          true, 
          false
        ) && 
        (len > 0);
        if (flag8) {
          $thisType.ThrowUnexpectedType(type.get());
        }
      }
      bytesRead.set((((bytesRead.get() | 0) + (reader.get_Position() | 0)) | 0));
      haveObject.set(true);
      result = value.get();
    } finally {
      $T1A().Recycle(reader);
    }
    return result;
  }; 

  function TypeModel_GetKey$10 (/* ref */ type) {
    var flag = type.get() === null;
    if (flag) {
      var result = -1;
    } else {
      var key = (this.GetKeyImpl(type.get()) | 0);
      var flag2 = key < 0;
      if (flag2) {
        var normalized = $thisType.ResolveProxies(type.get());
        if (normalized !== null) {
          type.set(normalized);
          key = (this.GetKeyImpl(type.get()) | 0);
        }
      }
      result = key;
    }
    return result;
  }; 

  function TypeModel_GetKeyImpD (types, _type) {
    var answer = -1;

  $loop0: 
    for (var i = 0; i < (types.length | 0); ) {
      var flag = types[i] === _type;
      if (flag) {
        answer = i;
        break $loop0;
      }
      var num = i;
      i = ((num + 1) | 0);
    }
    return answer;
  }; 

  function TypeModel_GetListItemType (model, listType) {
    var paramType = null;
    var flag = (listType === model.MapType($T0C().__Type__)) || 
    listType.get_IsArray() || 
    !(model.MapType($T25().__Type__)).IsAssignableFrom(listType);
    if (flag) {
      var result = null;
    } else {
      var candidates = new ($T26())();
      var methods = listType.GetMethods();

      for (var i = 0; i < (methods.length | 0); i = ((i + 1) | 0)) {
        var method = methods[i];
        var flag2 = method.get_IsStatic() || 
        (method.get_Name() != "Add");
        if (!flag2) {
          var parameters = method.GetParameters();
          var flag3 = ((parameters.length | 0) === 1) && 
          !candidates.Contains(paramType = (parameters[0]).get_ParameterType());
          if (flag3) {
            candidates.Add(paramType);
          }
        }
      }
      var name = listType.get_Name();
      var isQueueStack = (name !== null) && 
      (((name.indexOf("Queue")) >= 0) || 
        ((name.indexOf("Stack")) >= 0));
      if (!isQueueStack) {
        $thisType.TestEnumerableListPatterns(model, candidates, listType);
        var interfaces = listType.GetInterfaces();

        for (var j = 0; j < (interfaces.length | 0); j = ((j + 1) | 0)) {
          var iType = interfaces[j];
          $thisType.TestEnumerableListPatterns(model, candidates, iType);
        }
      }
      var properties = listType.GetProperties($T2E().$Flags("Instance", "NonPublic", "Public"));

      for (var k = 0; k < (properties.length | 0); k = ((k + 1) | 0)) {
        var indexer = properties[k];
        var flag5 = (indexer.get_Name() != "Item") || 
        candidates.Contains(indexer.get_PropertyType());
        if (!flag5) {
          var args = indexer.GetIndexParameters();
          var flag6 = ((args.length | 0) !== 1) || 
          ((args[0]).get_ParameterType() !== model.MapType($T09().__Type__));
          if (!flag6) {
            candidates.Add(indexer.get_PropertyType());
          }
        }
      }
      switch (candidates.get_Count()) {
        case 0: 
          result = null;
          return result;

        case 1: 
          result = $T04().$Cast(candidates.get_Item(0));
          return result;

        case 2: 
          var flag7 = $thisType.CheckDictionaryAccessors(
            model, 
            $T04().$Cast(candidates.get_Item(0)), 
            $T04().$Cast(candidates.get_Item(1))
          );
          if (flag7) {
            result = $T04().$Cast(candidates.get_Item(0));
            return result;
          }
          var flag8 = $thisType.CheckDictionaryAccessors(
            model, 
            $T04().$Cast(candidates.get_Item(1)), 
            $T04().$Cast(candidates.get_Item(0))
          );
          if (flag8) {
            result = $T04().$Cast(candidates.get_Item(1));
            return result;
          }
          break;

      }
      result = null;
    }
    return result;
  }; 

  function TypeModel_GetSchema (type) {
    throw $S0B().Construct();
  }; 

  function TypeModel_GetType$11 (fullName, context) {
    return $thisType.ResolveKnownType(fullName, this, context);
  }; 

  function TypeModel_GetWireType (code, format, /* ref */ type, /* ref */ modelKey) {
    modelKey.set(-1);
    var flag = $T07().IsEnum(type.get());
    if (flag) {
      modelKey.set(this.GetKey(/* ref */ type));
      var result = $T1E().Variant;
    } else {

      var $label0 = 0;
    $labelgroup0: 
      while (true) {
        switch ($label0) {
          case 0: /* $entry0 */ 
            switch (code.valueOf()) {
              case 3: 
              case 4: 
              case 5: 
              case 6: 
              case 7: 
              case 8: 
              case 9: 
              case 10: 
                result = (
                  (format === $T1D().FixedSize)
                     ? $T1E().Fixed32
                     : $T1E().Variant)
                ;
                return result;

              case 11: 
              case 12: 
                result = (
                  (format === $T1D().FixedSize)
                     ? $T1E().Fixed64
                     : $T1E().Variant)
                ;
                return result;

              case 13: 
                result = $T1E().Fixed32;
                return result;

              case 14: 
                result = $T1E().Fixed64;
                return result;

              case 15: 
              case 16: 
              case 18: 
                break;

              case 17: 
                $label0 = 1 /* goto IL_AB */ ;
                continue $labelgroup0;

              default: 
                switch (code.valueOf()) {
                  case 100: 
                  case 101: 
                  case 102: 
                  case 103: 
                    break;

                  default: 
                    $label0 = 1 /* goto IL_AB */ ;
                    continue $labelgroup0;

                }
                break;

            }
            result = $T1E().String;
            return result;

            $label0 = 1 /* goto IL_AB */ ;
            continue $labelgroup0;
          case 1: /* IL_AB */ 
            var flag2 = modelKey.set(this.GetKey(/* ref */ type)) >= 0;
            if (flag2) {
              result = $T1E().String;
            } else {
              result = $T1E().None;
            }

            break $labelgroup0;
        }
      }
    }
    return result;
  }; 

  function TypeModel_IsDefined ($type) {
    var type = new JSIL.BoxedVariable($type);
    return ((this.GetKey(/* ref */ type) | 0) >= 0);
  }; 

  function TypeModel_MapType$12 (type) {
    return this.MapType(type, true);
  }; 

  function TypeModel_MapType$13 (type, demand) {
    return type;
  }; 

  function TypeModel_PrepareDeserialize (value, /* ref */ type) {
    var flag = type.get() === null;
    if (flag) {
      if (value === null) {
        throw $S00().Construct("type");
      }
      type.set(this.MapType(JSIL.GetType(value)));
    }
    var autoCreate = true;
    var underlyingType = $T07().GetUnderlyingType(type.get());
    var flag3 = underlyingType !== null;
    if (flag3) {
      type.set(underlyingType);
      autoCreate = false;
    }
    return autoCreate;
  }; 

  function TypeModel_remove_DynamicTypeFormatting (value) {
    var typeFormatEventHandler = this.DynamicTypeFormatting;

    do {
      var typeFormatEventHandler2 = typeFormatEventHandler;
      var value2 = $T02().Remove(typeFormatEventHandler2, value);
      typeFormatEventHandler = $T03().CompareExchange$b1($T01())(/* ref */ new JSIL.MemberReference(this, "DynamicTypeFormatting"), value2, typeFormatEventHandler2);
    } while (typeFormatEventHandler !== typeFormatEventHandler2);
  }; 

  function TypeModel_ResolveKnownType (name, model, assembly, $exception) {
    if ($T07().IsNullOrEmpty(name)) {
      var result = null;
    } else {
      try {
        var type = (JSIL.ReflectionGetTypeInternal($asm0E.__Assembly__, name, false, false));
        var flag2 = type !== null;
        if (flag2) {
          result = type;
          return result;
        }
      } catch ($exception) {
      }
      try {
        var i = (name.indexOf(","));
        var fullName = ((
            (i > 0)
               ? name.substr(0, i)
               : name)
          .trim());
        var flag3 = assembly === null;
        if (flag3) {
          assembly = $T30().GetCallingAssembly();
        }
        var type2 = (
          (assembly === null)
             ? null
             : assembly.GetType(fullName))
        ;
        var flag4 = type2 !== null;
        if (flag4) {
          result = type2;
          return result;
        }
      } catch ($exception) {
      }
      result = null;
    }
    return result;
  }; 

  function TypeModel_ResolveListAdd (model, listType, itemType, /* ref */ isList) {
    isList.set((model.MapType($thisType.ilist)).IsAssignableFrom(listType));
    var types = JSIL.Array.New($T04(), [itemType]);
    var add = $T07().GetInstanceMethod(listType, "Add", types);
    var flag = add === null;
    if (flag) {
      var forceList = listType.get_IsInterface() && 
      (listType === (model.MapType($T33().__Type__)).MakeGenericType(types));
      var constuctedListType = (model.MapType($T34().__Type__)).MakeGenericType(types);
      var flag2 = forceList || 
      constuctedListType.IsAssignableFrom(listType);
      if (flag2) {
        add = $T07().GetInstanceMethod(constuctedListType, "Add", types);
      }
    }
    var flag3 = add === null;
    if (flag3) {
      var interfaces = listType.GetInterfaces();

    $loop0: 
      for (var i = 0; i < (interfaces.length | 0); i = ((i + 1) | 0)) {
        var interfaceType = interfaces[i];
        var flag4 = !(!(interfaceType.get_Name() == "IProducerConsumerCollection`1") || 
          !interfaceType.get_IsGenericType()) && 
        ((interfaceType.GetGenericTypeDefinition()).get_FullName() == "System.Collections.Concurrent.IProducerConsumerCollection`1");
        if (flag4) {
          add = $T07().GetInstanceMethod(interfaceType, "TryAdd", types);
          var flag5 = add !== null;
          if (flag5) {
            break $loop0;
          }
        }
      }
    }
    var flag6 = add === null;
    if (flag6) {
      types[0] = model.MapType($T0D().__Type__);
      add = $T07().GetInstanceMethod(listType, "Add", types);
    }
    var flag7 = (add === null) & isList.get();
    if (flag7) {
      add = $T07().GetInstanceMethod(model.MapType($thisType.ilist), "Add", types);
    }
    return add;
  }; 

  function TypeModel_ResolveProxies (type) {
    var flag = type === null;
    if (flag) {
      var result = null;
    } else {
      var isGenericParameter = type.get_IsGenericParameter();
      if (isGenericParameter) {
        result = null;
      } else {
        var tmp = $T07().GetUnderlyingType(type);
        if (tmp !== null) {
          result = tmp;
        } else {
          var fullName = type.get_FullName();
          var flag3 = (fullName !== null) && 
          (System.String.StartsWith(fullName, "System.Data.Entity.DynamicProxies."));
          if (flag3) {
            result = type.get_BaseType();
          } else {
            var interfaces = type.GetInterfaces();

            for (var i = 0; i < (interfaces.length | 0); ) {
              var fullName2 = (interfaces[i]).get_FullName();
              if ((fullName2 == "NHibernate.Proxy.INHibernateProxy") || 
                (fullName2 == "NHibernate.Proxy.DynamicProxy.IProxy") || (fullName2 == "NHibernate.Intercept.IFieldInterceptorAccessor")) {
                result = type.get_BaseType();
                return result;
              }
              var num = i;
              i = ((num + 1) | 0);
            }
            result = null;
          }
        }
      }
    }
    return result;
  }; 

  function TypeModel_Serialize$14 (dest, value) {
    $S0C().CallVirtual("Serialize", null, this, dest, value, null);
  }; 

  function TypeModel_Serialize$15 (dest, value, context) {
    var writer = new ($T16())(dest, this, context);
    try {
      writer.SetRootObject(value);
      this.SerializeCore(writer, value);
      writer.Close();
    } finally {
      if (writer !== null) {
        $IM00().Call(writer, null);
      }
    }
  }; 

  function TypeModel_Serialize$16 (dest, value) {
    var flag = dest === null;
    if (flag) {
      throw $S00().Construct("dest");
    }
    dest.CheckDepthFlushlock();
    dest.SetRootObject(value);
    this.SerializeCore(dest, value);
    dest.CheckDepthFlushlock();
    $T16().Flush(dest);
  }; 

  function TypeModel_SerializeCore (writer, value) {
    if (value === null) {
      throw $S00().Construct("value");
    }
    var type = new JSIL.BoxedVariable(JSIL.GetType(value));
    var key = (this.GetKey(/* ref */ type) | 0);
    if (key >= 0) {
      $S04().CallVirtual("Serialize", null, this, key, value, writer);
    } else {
      var flag3 = !this.TrySerializeAuxiliaryType(
        writer, 
        type.get(), 
        $T1D().Default, 
        1, 
        value, 
        false
      );
      if (flag3) {
        $thisType.ThrowUnexpectedType(type.get());
      }
    }
  }; 

  function TypeModel_SerializeType (model, type) {
    var flag = model !== null;
    if (flag) {
      var handler = model.DynamicTypeFormatting;
      var flag2 = handler !== null;
      if (flag2) {
        var args = $S0D().Construct(type);
        handler(model, args);
        var flag3 = !$T07().IsNullOrEmpty(args.get_FormattedName());
        if (flag3) {
          var result = args.get_FormattedName();
          return result;
        }
      }
    }
    result = type.get_AssemblyQualifiedName();
    return result;
  }; 

  function TypeModel_SerializeWithLengthPrefix$17 (dest, value, type, style, fieldNumber) {
    this.SerializeWithLengthPrefix(
      dest, 
      value, 
      type, 
      style, 
      fieldNumber, 
      null
    );
  }; 

  function TypeModel_SerializeWithLengthPrefix$18 (dest, value, $type, style, fieldNumber, context) {
    var type = new JSIL.BoxedVariable($type);
    var flag = type.get() === null;
    if (flag) {
      if (value === null) {
        throw $S00().Construct("value");
      }
      type.set(this.MapType(JSIL.GetType(value)));
    }
    var key = (this.GetKey(/* ref */ type) | 0);
    var writer = new ($T16())(dest, this, context);
    try {
      switch (style.valueOf()) {
        case 0: 
          $S04().CallVirtual("Serialize", null, this, key, value, writer);
          break;

        case 1: 
        case 2: 
        case 3: 
          $T16().WriteObject(
            value, 
            key, 
            writer, 
            style, 
            fieldNumber
          );
          break;

        default: 
          throw $S0E().Construct("style");

      }
      writer.Close();
    } finally {
      if (writer !== null) {
        $IM00().Call(writer, null);
      }
    }
  }; 

  function TypeModel_TestEnumerableListPatterns (model, candidates, iType) {
    var isGenericType = iType.get_IsGenericType();
    if (isGenericType) {
      var typeDef = iType.GetGenericTypeDefinition();
      var flag = (typeDef === model.MapType($T33().__Type__)) || 
      (typeDef === model.MapType($T34().__Type__)) || 
      (typeDef.get_FullName() == "System.Collections.Concurrent.IProducerConsumerCollection`1");
      if (flag) {
        var iTypeArgs = iType.GetGenericArguments();
        var flag2 = !candidates.Contains(iTypeArgs[0]);
        if (flag2) {
          candidates.Add(iTypeArgs[0]);
        }
      }
    }
  }; 

  function TypeModel_ThrowCannotCreateInstance (type) {
    throw $S0F().Construct(JSIL.ConcatString("No parameterless constructor found for ", (
        (type === null)
           ? "(null)"
           : type.get_Name())
      ));
  }; 

  function TypeModel_ThrowUnexpectedSubtype (expected, actual) {
    var flag = expected !== $thisType.ResolveProxies(actual);
    if (flag) {
      throw $S09().Construct(JSIL.ConcatString("Unexpected sub-type: ", actual.get_FullName()));
    }
  }; 

  function TypeModel_ThrowUnexpectedType (type) {
    var fullName = (
      (type === null)
         ? "(unknown)"
         : type.get_FullName())
    ;
    if (type !== null) {
      var baseType = type.get_BaseType();
      var flag2 = !((baseType === null) || 
        !baseType.get_IsGenericType()) && 
      ((baseType.GetGenericTypeDefinition()).get_Name() == "GeneratedMessage`2");
      if (flag2) {
        throw $S09().Construct(JSIL.ConcatString("Are you mixing protobuf-net and protobuf-csharp-port? See http://stackoverflow.com/q/11564914; type: ", fullName));
      }
    }
    throw $S09().Construct(JSIL.ConcatString("Type is not expected, and no contract can be inferred: ", fullName));
  }; 

  function TypeModel_TryDeserializeAuxiliaryType (reader, format, tag, $type, /* ref */ value, skipOtherFields, asListItem, autoCreate, insideList) {
    var type = new JSIL.BoxedVariable($type);
    var modelKey = new JSIL.BoxedVariable(0);

    var $label0 = 0;
  $labelgroup0: 
    while (true) {
      switch ($label0) {
        case 0: /* $entry0 */ 
          var flag = type.get() === null;
          if (flag) {
            throw $S00().Construct("type");
          }
          var typecode = $T07().GetTypeCode(type.get());
          var wiretype = this.GetWireType(typecode, format, /* ref */ type, /* ref */ modelKey);
          var found = false;
          if (wiretype === $T1E().None) {
            var itemType = $thisType.GetListItemType(this, type.get());
            var flag3 = !((itemType !== null) || 
              !(type.get()).get_IsArray() || 
              (((type.get()).GetArrayRank() | 0) !== 1)) && 
            (type.get() !== $T1B().__Type__);
            if (flag3) {
              itemType = (type.get()).GetElementType();
            }
            var flag4 = itemType !== null;
            if (flag4) {
              if (insideList) {
                throw $thisType.CreateNestedListsNotSupported();
              }
              found = this.TryDeserializeList(
                this, 
                reader, 
                format, 
                tag, 
                type.get(), 
                itemType, 
                /* ref */ value
              );
              var flag5 = !found & autoCreate;
              if (flag5) {
                value.set($thisType.CreateListInstance(type.get(), itemType));
              }
              var result = found;
              return result;
            } else {
              $thisType.ThrowUnexpectedType(type.get());
            }
          }

        $loop0: 
          while (true) {
            var flag6 = found & asListItem;
            if (flag6) {
              break $loop0;
            }
            var fieldNumber = (reader.ReadFieldHeader() | 0);
            if (fieldNumber <= 0) {
              break $loop0;
            }
            if (fieldNumber !== (tag | 0)) {
              if (!skipOtherFields) {
                $label0 = 1 /* goto IL_12E */ ;
                continue $labelgroup0;
              }
              reader.SkipField();
            } else {
              found = true;
              reader.Hint(wiretype);
              var flag9 = (modelKey.get() | 0) >= 0;
              if (flag9) {
                var wireType = wiretype;
                if (!((wireType === $T1E().String) || (wireType === $T1E().StartGroup))) {
                  value.set($S05().CallVirtual("Deserialize", null, this, modelKey.get(), value.get(), reader));
                } else {
                  var token = $T1A().StartSubItem(reader);
                  value.set($S05().CallVirtual("Deserialize", null, this, modelKey.get(), value.get(), reader));
                  $T1A().EndSubItem(token, reader);
                }
              } else {
                var protoTypeCode = typecode;
                switch (protoTypeCode.valueOf()) {
                  case 3: 
                    value.set($T05().$Box(reader.ReadBoolean()));
                    break;

                  case 4: 
                    value.set(String.fromCharCode(reader.ReadUInt16()));
                    break;

                  case 5: 
                    value.set($T38().$Box(reader.ReadSByte()));
                    break;

                  case 6: 
                    value.set($T1C().$Box(reader.ReadByte()));
                    break;

                  case 7: 
                    value.set($T39().$Box(reader.ReadInt16()));
                    break;

                  case 8: 
                    value.set($T3A().$Box(reader.ReadUInt16()));
                    break;

                  case 9: 
                    value.set($T09().$Box(reader.ReadInt32()));
                    break;

                  case 10: 
                    value.set($T3B().$Box(reader.ReadUInt32()));
                    break;

                  case 11: 
                    value.set(reader.ReadInt64());
                    break;

                  case 12: 
                    value.set(reader.ReadUInt64());
                    break;

                  case 13: 
                    value.set($T3C().$Box(reader.ReadSingle()));
                    break;

                  case 14: 
                    value.set($T3D().$Box(reader.ReadDouble()));
                    break;

                  case 15: 
                    value.set($T3E().ReadDecimal(reader));
                    break;

                  case 16: 
                    value.set($T3E().ReadDateTime(reader));
                    break;

                  case 17: 
                    break;

                  case 18: 
                    value.set(reader.ReadString());
                    break;

                  default: 
                    switch (protoTypeCode.valueOf()) {
                      case 100: 
                        value.set($T3E().ReadTimeSpan(reader));
                        break;

                      case 101: 
                        value.set($T1A().AppendBytes($T1B().$Cast(value.get()), reader));
                        break;

                      case 102: 
                        value.set($T3E().ReadGuid(reader));
                        break;

                      case 103: 
                        value.set($S10().Construct(reader.ReadString()));
                        break;

                    }
                    break;

                }
              }
            }
          }
          break $labelgroup0;

        case 1: /* IL_12E */ 
          throw $T1A().AddErrorData($S09().Construct(("Expected field " + (tag).toString() + ", but found " + (fieldNumber).toString())), reader);
          break $labelgroup0;

      }
    }
    /* Original label IL_37A */ 
    var flag10 = (!found && 
      !asListItem) & autoCreate;
    if (flag10) {
      var flag11 = type.get() !== $T0C().__Type__;
      if (flag11) {
        value.set($S01().CallStatic($T13(), "CreateInstance", null, type.get()));
      }
    }
    result = found;
    return result;
  }; 

  function TypeModel_TryDeserializeList (model, reader, format, tag, listType, itemType, /* ref */ value) {
    var isList = new JSIL.BoxedVariable(false);
    var addMethod = $thisType.ResolveListAdd(model, listType, itemType, /* ref */ isList);
    var flag = addMethod === null;
    if (flag) {
      throw $S02().Construct(JSIL.ConcatString("Unknown list variant: ", listType.get_FullName()));
    }
    var found = false;
    var nextItem = new JSIL.BoxedVariable(null);
    var list = $T00().$As(value.get());
    var args = (
      isList.get()
         ? null
         : JSIL.Array.New($T0D(), 1))
    ;
    var arraySurrogate = (
      listType.get_IsArray()
         ? new ($T26())()
         : null)
    ;

    while (this.TryDeserializeAuxiliaryType(
        reader, 
        format, 
        tag, 
        itemType, 
        /* ref */ nextItem, 
        true, 
        true, 
        true, 
        true
      )) {
      found = true;
      var flag2 = (value.get() === null) && 
      (arraySurrogate === null);
      if (flag2) {
        value.set($thisType.CreateListInstance(listType, itemType));
        list = $T00().$As(value.get());
      }
      var flag3 = list !== null;
      if (flag3) {
        $IM01().Call(list, null, nextItem.get());
      } else {
        var flag4 = arraySurrogate !== null;
        if (flag4) {
          arraySurrogate.Add(nextItem.get());
        } else {
          args[0] = nextItem.get();
          addMethod.Invoke(value.get(), args);
        }
      }
      nextItem.set(null);
    }
    var flag5 = arraySurrogate !== null;
    if (flag5) {
      var flag6 = value.get() !== null;
      if (flag6) {
        var flag7 = (arraySurrogate.get_Count() | 0) === 0;
        if (!flag7) {
          var existing = $T0E().$Cast(value.get());
          var newArray = (JSIL.Array.New(itemType, (((existing.length | 0) + (arraySurrogate.get_Count() | 0)) | 0)));
          $S11().CallStatic($T0E(), "Copy", null, existing, newArray, existing.length);
          arraySurrogate.CopyTo(newArray, existing.length);
          value.set(newArray);
        }
      } else {
        newArray = (JSIL.Array.New(itemType, arraySurrogate.get_Count()));
        arraySurrogate.CopyTo(newArray, 0);
        value.set(newArray);
      }
    }
    return found;
  }; 

  function TypeModel_TrySerializeAuxiliaryType (writer, $type, format, tag, value, isInsideList) {
    var type = new JSIL.BoxedVariable($type);
    var modelKey = new JSIL.BoxedVariable(0);
    var flag = type.get() === null;
    if (flag) {
      type.set(JSIL.GetType(value));
    }
    var typecode = $T07().GetTypeCode(type.get());
    var wireType = this.GetWireType(typecode, format, /* ref */ type, /* ref */ modelKey);
    var flag2 = (modelKey.get() | 0) >= 0;
    if (flag2) {
      var flag3 = $T07().IsEnum(type.get());
      if (flag3) {
        $S04().CallVirtual("Serialize", null, this, modelKey.get(), value, writer);
        var result = true;
      } else {
        $T16().WriteFieldHeader(tag, wireType, writer);
        switch (wireType.valueOf()) {
          case -1: 
            throw $T16().CreateException(writer);

          case 2: 
          case 3: 
            var token = $T16().StartSubItem(value, writer);
            $S04().CallVirtual("Serialize", null, this, modelKey.get(), value, writer);
            $T16().EndSubItem(token, writer);
            result = true;
            return result;

        }
        $S04().CallVirtual("Serialize", null, this, modelKey.get(), value, writer);
        result = true;
      }
    } else {
      if (wireType !== $T1E().None) {
        $T16().WriteFieldHeader(tag, wireType, writer);
      }
      var protoTypeCode = typecode;
      switch (protoTypeCode.valueOf()) {
        case 3: 
          $T16().WriteBoolean($T05().$Cast(value), writer);
          result = true;
          return result;

        case 4: 
          $T16().WriteUInt16(($T32().$Cast(value)).charCodeAt(0), writer);
          result = true;
          return result;

        case 5: 
          $T16().WriteSByte($T38().$Cast(value), writer);
          result = true;
          return result;

        case 6: 
          $T16().WriteByte($T1C().$Cast(value), writer);
          result = true;
          return result;

        case 7: 
          $T16().WriteInt16($T39().$Cast(value), writer);
          result = true;
          return result;

        case 8: 
          $T16().WriteUInt16($T3A().$Cast(value), writer);
          result = true;
          return result;

        case 9: 
          $T16().WriteInt32($T09().$Cast(value), writer);
          result = true;
          return result;

        case 10: 
          $T16().WriteUInt32($T3B().$Cast(value), writer);
          result = true;
          return result;

        case 11: 
          $T16().WriteInt64($T19().$Cast(value), writer);
          result = true;
          return result;

        case 12: 
          $T16().WriteUInt64($T41().$Cast(value), writer);
          result = true;
          return result;

        case 13: 
          $T16().WriteSingle($T3C().$Cast(value), writer);
          result = true;
          return result;

        case 14: 
          $T16().WriteDouble($T3D().$Cast(value), writer);
          result = true;
          return result;

        case 15: 
          $T3E().WriteDecimal($T42().$Cast(value), writer);
          result = true;
          return result;

        case 16: 
          $T3E().WriteDateTime($T43().$Cast(value).MemberwiseClone(), writer);
          result = true;
          return result;

        case 17: 
          break;

        case 18: 
          $T16().WriteString($T0C().$Cast(value), writer);
          result = true;
          return result;

        default: 
          switch (protoTypeCode.valueOf()) {
            case 100: 
              $T3E().WriteTimeSpan($T44().$Cast(value).MemberwiseClone(), writer);
              result = true;
              return result;

            case 101: 
              $T16().WriteBytes($T1B().$Cast(value), writer);
              result = true;
              return result;

            case 102: 
              $T3E().WriteGuid($T45().$Cast(value).MemberwiseClone(), writer);
              result = true;
              return result;

            case 103: 
              $T16().WriteString(($T3F().$Cast(value)).get_AbsoluteUri(), writer);
              result = true;
              return result;

          }
          break;

      }
      var sequence = $T25().$As(value);
      var flag5 = sequence !== null;
      if (flag5) {
        if (isInsideList) {
          throw $thisType.CreateNestedListsNotSupported();
        }
        var enumerator = $IM02().Call(sequence, null);
        try {

          while ($IM03().Call(enumerator, null)) {
            var item = $IM04().Call(enumerator, null);
            if (item === null) {
              throw $S12().Construct();
            }
            var flag7 = !this.TrySerializeAuxiliaryType(
              writer, 
              null, 
              format, 
              tag, 
              item, 
              true
            );
            if (flag7) {
              $thisType.ThrowUnexpectedType(JSIL.GetType(item));
            }
          }
        } finally {
          var disposable = $T17().$As(enumerator);
          if (disposable !== null) {
            $IM00().Call(disposable, null);
          }
        }
        result = true;
      } else {
        result = false;
      }
    }
    return result;
  }; 

  JSIL.MakeType({
      BaseType: $asm14.TypeRef("System.Object"), 
      Name: "ProtoBuf.Meta.TypeModel", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void, 
      TypeModel__ctor
    );

    $.Method({Static:false, Public:true }, "add_DynamicTypeFormatting", 
      JSIL.MethodSignature.Action($asm0E.TypeRef("ProtoBuf.Meta.TypeFormatEventHandler")), 
      TypeModel_add_DynamicTypeFormatting
    )
      .Attribute($asm14.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "CanSerialize", 
      new JSIL.MethodSignature($.Boolean, [$asm14.TypeRef("System.Type")]), 
      TypeModel_CanSerialize$00
    );

    $.Method({Static:false, Public:false}, "CanSerialize", 
      new JSIL.MethodSignature($.Boolean, [
          $asm14.TypeRef("System.Type"), $.Boolean, 
          $.Boolean, $.Boolean
        ]), 
      TypeModel_CanSerialize$01
    );

    $.Method({Static:false, Public:true }, "CanSerializeBasicType", 
      new JSIL.MethodSignature($.Boolean, [$asm14.TypeRef("System.Type")]), 
      TypeModel_CanSerializeBasicType
    );

    $.Method({Static:false, Public:true }, "CanSerializeContractType", 
      new JSIL.MethodSignature($.Boolean, [$asm14.TypeRef("System.Type")]), 
      TypeModel_CanSerializeContractType
    );

    $.Method({Static:true , Public:false}, "CheckDictionaryAccessors", 
      new JSIL.MethodSignature($.Boolean, [
          $.Type, $asm14.TypeRef("System.Type"), 
          $asm14.TypeRef("System.Type")
        ]), 
      TypeModel_CheckDictionaryAccessors
    );

    $.Method({Static:true , Public:true }, "Create", 
      JSIL.MethodSignature.Return($asm0E.TypeRef("ProtoBuf.Meta.RuntimeTypeModel")), 
      TypeModel_Create$02
    );

    $.Method({Static:true , Public:false}, "CreateListInstance", 
      new JSIL.MethodSignature($.Object, [$asm14.TypeRef("System.Type"), $asm14.TypeRef("System.Type")]), 
      TypeModel_CreateListInstance
    );

    $.Method({Static:true , Public:false}, "CreateNestedListsNotSupported", 
      JSIL.MethodSignature.Return($asm14.TypeRef("System.Exception")), 
      TypeModel_CreateNestedListsNotSupported
    );

    $.Method({Static:false, Public:true }, "DeepClone", 
      new JSIL.MethodSignature($.Object, [$.Object]), 
      TypeModel_DeepClone
    );

    $.Method({Static:false, Public:true }, "Deserialize", 
      new JSIL.MethodSignature($.Object, [
          $asm14.TypeRef("System.IO.Stream"), $.Object, 
          $asm14.TypeRef("System.Type")
        ]), 
      TypeModel_Deserialize$03
    );

    $.Method({Static:false, Public:true }, "Deserialize", 
      new JSIL.MethodSignature($.Object, [
          $asm14.TypeRef("System.IO.Stream"), $.Object, 
          $asm14.TypeRef("System.Type"), $asm0E.TypeRef("ProtoBuf.SerializationContext")
        ]), 
      TypeModel_Deserialize$04
    );

    $.Method({Static:false, Public:true }, "Deserialize", 
      new JSIL.MethodSignature($.Object, [
          $asm14.TypeRef("System.IO.Stream"), $.Object, 
          $asm14.TypeRef("System.Type"), $.Int32
        ]), 
      TypeModel_Deserialize$05
    );

    $.Method({Static:false, Public:true }, "Deserialize", 
      new JSIL.MethodSignature($.Object, [
          $asm14.TypeRef("System.IO.Stream"), $.Object, 
          $asm14.TypeRef("System.Type"), $.Int32, 
          $asm0E.TypeRef("ProtoBuf.SerializationContext")
        ]), 
      TypeModel_Deserialize$06
    );

    $.Method({Static:false, Public:true }, "Deserialize", 
      new JSIL.MethodSignature($.Object, [
          $asm0E.TypeRef("ProtoBuf.ProtoReader"), $.Object, 
          $asm14.TypeRef("System.Type")
        ]), 
      TypeModel_Deserialize$07
    );

    $.Method({Static:false, Public:false}, "DeserializeCore", 
      new JSIL.MethodSignature($.Object, [
          $asm0E.TypeRef("ProtoBuf.ProtoReader"), $asm14.TypeRef("System.Type"), 
          $.Object, $.Boolean
        ]), 
      TypeModel_DeserializeCore
    );

    $.Method({Static:false, Public:true }, "DeserializeItems", 
      new JSIL.MethodSignature($asm14.TypeRef("System.Collections.IEnumerable"), [
          $asm14.TypeRef("System.IO.Stream"), $asm14.TypeRef("System.Type"), 
          $asm0E.TypeRef("ProtoBuf.PrefixStyle"), $.Int32, 
          $asm0E.TypeRef("ProtoBuf.Serializer+TypeResolver")
        ]), 
      TypeModel_DeserializeItems$08
    );

    $.Method({Static:false, Public:true }, "DeserializeItems", 
      new JSIL.MethodSignature($asm14.TypeRef("System.Collections.IEnumerable"), [
          $asm14.TypeRef("System.IO.Stream"), $asm14.TypeRef("System.Type"), 
          $asm0E.TypeRef("ProtoBuf.PrefixStyle"), $.Int32, 
          $asm0E.TypeRef("ProtoBuf.Serializer+TypeResolver"), $asm0E.TypeRef("ProtoBuf.SerializationContext")
        ]), 
      TypeModel_DeserializeItems$09
    );

    $.Method({Static:false, Public:true }, "DeserializeItems", 
      new JSIL.MethodSignature($asm14.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [
          $asm14.TypeRef("System.IO.Stream"), $asm0E.TypeRef("ProtoBuf.PrefixStyle"), 
          $.Int32
        ], ["T"]), 
      TypeModel_DeserializeItems$b1$0A
    );

    $.Method({Static:false, Public:true }, "DeserializeItems", 
      new JSIL.MethodSignature($asm14.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [
          $asm14.TypeRef("System.IO.Stream"), $asm0E.TypeRef("ProtoBuf.PrefixStyle"), 
          $.Int32, $asm0E.TypeRef("ProtoBuf.SerializationContext")
        ], ["T"]), 
      TypeModel_DeserializeItems$b1$0B
    );

    $.Method({Static:true , Public:false}, "DeserializeType", 
      new JSIL.MethodSignature($asm14.TypeRef("System.Type"), [$.Type, $.String]), 
      TypeModel_DeserializeType
    );

    $.Method({Static:false, Public:true }, "DeserializeWithLengthPrefix", 
      new JSIL.MethodSignature($.Object, [
          $asm14.TypeRef("System.IO.Stream"), $.Object, 
          $asm14.TypeRef("System.Type"), $asm0E.TypeRef("ProtoBuf.PrefixStyle"), 
          $.Int32
        ]), 
      TypeModel_DeserializeWithLengthPrefix$0C
    );

    $.Method({Static:false, Public:true }, "DeserializeWithLengthPrefix", 
      new JSIL.MethodSignature($.Object, [
          $asm14.TypeRef("System.IO.Stream"), $.Object, 
          $asm14.TypeRef("System.Type"), $asm0E.TypeRef("ProtoBuf.PrefixStyle"), 
          $.Int32, $asm0E.TypeRef("ProtoBuf.Serializer+TypeResolver")
        ]), 
      TypeModel_DeserializeWithLengthPrefix$0D
    );

    $.Method({Static:false, Public:true }, "DeserializeWithLengthPrefix", 
      new JSIL.MethodSignature($.Object, [
          $asm14.TypeRef("System.IO.Stream"), $.Object, 
          $asm14.TypeRef("System.Type"), $asm0E.TypeRef("ProtoBuf.PrefixStyle"), 
          $.Int32, $asm0E.TypeRef("ProtoBuf.Serializer+TypeResolver"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]), 
      TypeModel_DeserializeWithLengthPrefix$0E
    );

    $.Method({Static:false, Public:false}, "DeserializeWithLengthPrefix", 
      new JSIL.MethodSignature($.Object, [
          $asm14.TypeRef("System.IO.Stream"), $.Object, 
          $asm14.TypeRef("System.Type"), $asm0E.TypeRef("ProtoBuf.PrefixStyle"), 
          $.Int32, $asm0E.TypeRef("ProtoBuf.Serializer+TypeResolver"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), 
          $asm0E.TypeRef("ProtoBuf.SerializationContext")
        ]), 
      TypeModel_DeserializeWithLengthPrefix$0F
    );

    $.Method({Static:false, Public:false}, "GetKey", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$asm14.TypeRef("System.Type")])]), 
      TypeModel_GetKey$10
    );

    $.Method({Static:true , Public:true }, "GetKeyImpD", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("System.Array", [$asm14.TypeRef("System.Type")]), $asm14.TypeRef("System.Type")]), 
      TypeModel_GetKeyImpD
    );

    $.Method({Static:true , Public:false}, "GetListItemType", 
      new JSIL.MethodSignature($asm14.TypeRef("System.Type"), [$.Type, $asm14.TypeRef("System.Type")]), 
      TypeModel_GetListItemType
    );

    $.Method({Static:false, Public:true , Virtual:true }, "GetSchema", 
      new JSIL.MethodSignature($.String, [$asm14.TypeRef("System.Type")]), 
      TypeModel_GetSchema
    );

    $.Method({Static:false, Public:false, Virtual:true }, "GetType", 
      new JSIL.MethodSignature($asm14.TypeRef("System.Type"), [$.String, $asm14.TypeRef("System.Reflection.Assembly")]), 
      TypeModel_GetType$11
    );

    $.Method({Static:false, Public:false}, "GetWireType", 
      new JSIL.MethodSignature($asm0E.TypeRef("ProtoBuf.WireType"), [
          $asm0E.TypeRef("ProtoBuf.ProtoTypeCode"), $asm0E.TypeRef("ProtoBuf.DataFormat"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm14.TypeRef("System.Type")]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]), 
      TypeModel_GetWireType
    );

    $.Method({Static:false, Public:true }, "IsDefined", 
      new JSIL.MethodSignature($.Boolean, [$asm14.TypeRef("System.Type")]), 
      TypeModel_IsDefined
    );

    $.Method({Static:false, Public:false}, "MapType", 
      new JSIL.MethodSignature($asm14.TypeRef("System.Type"), [$asm14.TypeRef("System.Type")]), 
      TypeModel_MapType$12
    );

    $.Method({Static:false, Public:false, Virtual:true }, "MapType", 
      new JSIL.MethodSignature($asm14.TypeRef("System.Type"), [$asm14.TypeRef("System.Type"), $.Boolean]), 
      TypeModel_MapType$13
    );

    $.Method({Static:false, Public:false}, "PrepareDeserialize", 
      new JSIL.MethodSignature($.Boolean, [$.Object, $jsilcore.TypeRef("JSIL.Reference", [$asm14.TypeRef("System.Type")])]), 
      TypeModel_PrepareDeserialize
    );

    $.Method({Static:false, Public:true }, "remove_DynamicTypeFormatting", 
      JSIL.MethodSignature.Action($asm0E.TypeRef("ProtoBuf.Meta.TypeFormatEventHandler")), 
      TypeModel_remove_DynamicTypeFormatting
    )
      .Attribute($asm14.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "ResolveKnownType", 
      new JSIL.MethodSignature($asm14.TypeRef("System.Type"), [
          $.String, $.Type, 
          $asm14.TypeRef("System.Reflection.Assembly")
        ]), 
      TypeModel_ResolveKnownType
    );

    $.Method({Static:true , Public:false}, "ResolveListAdd", 
      new JSIL.MethodSignature($asm14.TypeRef("System.Reflection.MethodInfo"), [
          $.Type, $asm14.TypeRef("System.Type"), 
          $asm14.TypeRef("System.Type"), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ]), 
      TypeModel_ResolveListAdd
    );

    $.Method({Static:true , Public:false}, "ResolveProxies", 
      new JSIL.MethodSignature($asm14.TypeRef("System.Type"), [$asm14.TypeRef("System.Type")]), 
      TypeModel_ResolveProxies
    );

    $.Method({Static:false, Public:true }, "Serialize", 
      new JSIL.MethodSignature(null, [$asm14.TypeRef("System.IO.Stream"), $.Object]), 
      TypeModel_Serialize$14
    );

    $.Method({Static:false, Public:true }, "Serialize", 
      new JSIL.MethodSignature(null, [
          $asm14.TypeRef("System.IO.Stream"), $.Object, 
          $asm0E.TypeRef("ProtoBuf.SerializationContext")
        ]), 
      TypeModel_Serialize$15
    );

    $.Method({Static:false, Public:true }, "Serialize", 
      new JSIL.MethodSignature(null, [$asm0E.TypeRef("ProtoBuf.ProtoWriter"), $.Object]), 
      TypeModel_Serialize$16
    );

    $.Method({Static:false, Public:false}, "SerializeCore", 
      new JSIL.MethodSignature(null, [$asm0E.TypeRef("ProtoBuf.ProtoWriter"), $.Object]), 
      TypeModel_SerializeCore
    );

    $.Method({Static:true , Public:false}, "SerializeType", 
      new JSIL.MethodSignature($.String, [$.Type, $asm14.TypeRef("System.Type")]), 
      TypeModel_SerializeType
    );

    $.Method({Static:false, Public:true }, "SerializeWithLengthPrefix", 
      new JSIL.MethodSignature(null, [
          $asm14.TypeRef("System.IO.Stream"), $.Object, 
          $asm14.TypeRef("System.Type"), $asm0E.TypeRef("ProtoBuf.PrefixStyle"), 
          $.Int32
        ]), 
      TypeModel_SerializeWithLengthPrefix$17
    );

    $.Method({Static:false, Public:true }, "SerializeWithLengthPrefix", 
      new JSIL.MethodSignature(null, [
          $asm14.TypeRef("System.IO.Stream"), $.Object, 
          $asm14.TypeRef("System.Type"), $asm0E.TypeRef("ProtoBuf.PrefixStyle"), 
          $.Int32, $asm0E.TypeRef("ProtoBuf.SerializationContext")
        ]), 
      TypeModel_SerializeWithLengthPrefix$18
    );

    $.Method({Static:true , Public:false}, "TestEnumerableListPatterns", 
      new JSIL.MethodSignature(null, [
          $.Type, $asm0E.TypeRef("ProtoBuf.Meta.BasicList"), 
          $asm14.TypeRef("System.Type")
        ]), 
      TypeModel_TestEnumerableListPatterns
    );

    $.Method({Static:true , Public:true }, "ThrowCannotCreateInstance", 
      JSIL.MethodSignature.Action($asm14.TypeRef("System.Type")), 
      TypeModel_ThrowCannotCreateInstance
    );

    $.Method({Static:true , Public:false}, "ThrowUnexpectedSubtype", 
      new JSIL.MethodSignature(null, [$asm14.TypeRef("System.Type"), $asm14.TypeRef("System.Type")]), 
      TypeModel_ThrowUnexpectedSubtype
    );

    $.Method({Static:true , Public:false}, "ThrowUnexpectedType", 
      JSIL.MethodSignature.Action($asm14.TypeRef("System.Type")), 
      TypeModel_ThrowUnexpectedType
    );

    $.Method({Static:false, Public:false}, "TryDeserializeAuxiliaryType", 
      new JSIL.MethodSignature($.Boolean, [
          $asm0E.TypeRef("ProtoBuf.ProtoReader"), $asm0E.TypeRef("ProtoBuf.DataFormat"), 
          $.Int32, $asm14.TypeRef("System.Type"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Object]), $.Boolean, 
          $.Boolean, $.Boolean, 
          $.Boolean
        ]), 
      TypeModel_TryDeserializeAuxiliaryType
    );

    $.Method({Static:false, Public:false}, "TryDeserializeList", 
      new JSIL.MethodSignature($.Boolean, [
          $.Type, $asm0E.TypeRef("ProtoBuf.ProtoReader"), 
          $asm0E.TypeRef("ProtoBuf.DataFormat"), $.Int32, 
          $asm14.TypeRef("System.Type"), $asm14.TypeRef("System.Type"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ]), 
      TypeModel_TryDeserializeList
    );

    $.Method({Static:false, Public:false}, "TrySerializeAuxiliaryType", 
      new JSIL.MethodSignature($.Boolean, [
          $asm0E.TypeRef("ProtoBuf.ProtoWriter"), $asm14.TypeRef("System.Type"), 
          $asm0E.TypeRef("ProtoBuf.DataFormat"), $.Int32, 
          $.Object, $.Boolean
        ]), 
      TypeModel_TrySerializeAuxiliaryType
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "ilist", $asm14.TypeRef("System.Type"), function ($pi) {
        return $asm14.System.Collections.IList.__Type__;
      });

    $.Field({Static:false, Public:false}, "DynamicTypeFormatting", $asm0E.TypeRef("ProtoBuf.Meta.TypeFormatEventHandler"))
      .Attribute($asm14.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm14.TypeRef("System.Diagnostics.DebuggerBrowsableAttribute"), function () { return [$asm14.System.Diagnostics.DebuggerBrowsableState.Never]; });


    function TypeModel__cctor () {
      $thisType.ilist = $T00().__Type__;
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      TypeModel__cctor
    );

    $.Event({Static:false, Public:true }, "DynamicTypeFormatting", $asm0E.TypeRef("ProtoBuf.Meta.TypeFormatEventHandler"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ProtoBuf.Meta.TypeModel+DeserializeItemsIterator */ 

(function DeserializeItemsIterator$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0E.ProtoBuf.Meta.TypeModel)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm14.System.IO.Stream)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm14.System.Type)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0E.ProtoBuf.PrefixStyle)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm14.System.Int32)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm0E.ProtoBuf.Serializer_TypeResolver)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm0E.ProtoBuf.SerializationContext)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm14.System.Boolean)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm14.System.NotSupportedException)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm14.TypeRef("System.NotSupportedException"), null))) ();
  };


  function DeserializeItemsIterator__ctor (model, source, type, style, expectedField, resolver, context) {
    this.haveObject = true;
    this.source = source;
    this.type = type;
    this.style = style;
    this.expectedField = (expectedField | 0);
    this.resolver = resolver;
    this.model = model;
    this.context = context;
  }; 

  function DeserializeItemsIterator_get_Current$00 () {
    return this.current;
  }; 

  function DeserializeItemsIterator_MoveNext () {
    var bytesRead = new JSIL.BoxedVariable(0);
    var flag = this.haveObject;
    if (flag) {
      this.current = (this.model).DeserializeWithLengthPrefix(
        this.source, 
        null, 
        this.type, 
        this.style, 
        this.expectedField, 
        this.resolver, 
        /* ref */ bytesRead, 
        /* ref */ new JSIL.MemberReference(this, "haveObject"), 
        this.context
      );
    }
    return this.haveObject;
  }; 

  function DeserializeItemsIterator_System_Collections_IEnumerable_GetEnumerator () {
    return this;
  }; 

  function DeserializeItemsIterator_System_Collections_IEnumerator_Reset () {
    throw $S00().Construct();
  }; 

  JSIL.MakeType({
      BaseType: $asm14.TypeRef("System.Object"), 
      Name: "ProtoBuf.Meta.TypeModel+DeserializeItemsIterator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 7, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0E.TypeRef("ProtoBuf.Meta.TypeModel"), $asm14.TypeRef("System.IO.Stream"), 
          $asm14.TypeRef("System.Type"), $asm0E.TypeRef("ProtoBuf.PrefixStyle"), 
          $.Int32, $asm0E.TypeRef("ProtoBuf.Serializer+TypeResolver"), 
          $asm0E.TypeRef("ProtoBuf.SerializationContext")
        ]), 
      DeserializeItemsIterator__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_Current", 
      JSIL.MethodSignature.Return($.Object), 
      DeserializeItemsIterator_get_Current$00
    );

    $.Method({Static:false, Public:true , Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean), 
      DeserializeItemsIterator_MoveNext
    );

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm14.TypeRef("System.Collections.IEnumerator")), 
      DeserializeItemsIterator_System_Collections_IEnumerable_GetEnumerator
    )
      .Overrides($asm14.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void, 
      DeserializeItemsIterator_System_Collections_IEnumerator_Reset
    )
      .Overrides($asm14.TypeRef("System.Collections.IEnumerator"), "Reset");

    $.Field({Static:false, Public:false}, "haveObject", $.Boolean);

    $.Field({Static:false, Public:false}, "current", $.Object);

    $.Field({Static:false, Public:false, ReadOnly:true }, "source", $asm14.TypeRef("System.IO.Stream"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "type", $asm14.TypeRef("System.Type"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "style", $asm0E.TypeRef("ProtoBuf.PrefixStyle"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "expectedField", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "resolver", $asm0E.TypeRef("ProtoBuf.Serializer+TypeResolver"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "model", $asm0E.TypeRef("ProtoBuf.Meta.TypeModel"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "context", $asm0E.TypeRef("ProtoBuf.SerializationContext"));

    $.Property({Static:false, Public:true , Virtual:true }, "Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm14.TypeRef("System.Collections.IEnumerator"), 
      /* 1 */ $asm14.TypeRef("System.Collections.IEnumerable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ProtoBuf.Meta.TypeModel+DeserializeItemsIterator`1 */ 

(function DeserializeItemsIterator$b1$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0E.ProtoBuf.Meta.TypeModel)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm14.System.IO.Stream)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0E.ProtoBuf.PrefixStyle)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm14.System.Int32)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm0E.ProtoBuf.SerializationContext)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm0E.ProtoBuf.Meta.TypeModel_DeserializeItemsIterator)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(JSIL.MethodSignature.Return($asm14.TypeRef("System.Object")))) ();
  };


  function DeserializeItemsIterator$b1__ctor (model, source, style, expectedField, context) {
    $T05().prototype._ctor.call(this, 
      model, 
      source, 
      model.MapType($thisType.T.get(this)), 
      style, 
      expectedField, 
      null, 
      context
    );
  }; 

  function DeserializeItemsIterator$b1_get_Current$00 () {
    return $thisType.T.get(this).$Cast($S00().Call($T05().prototype, "get_Current", null, this));
  }; 

  function DeserializeItemsIterator$b1_System_Collections_Generic_IEnumerable$lT$g_GetEnumerator () {
    return this;
  }; 

  function DeserializeItemsIterator$b1_System_IDisposable_Dispose () {
  }; 

  JSIL.MakeType({
      BaseType: $asm0E.TypeRef("ProtoBuf.Meta.TypeModel+DeserializeItemsIterator"), 
      Name: "ProtoBuf.Meta.TypeModel+DeserializeItemsIterator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0E.TypeRef("ProtoBuf.Meta.TypeModel"), $asm14.TypeRef("System.IO.Stream"), 
          $asm0E.TypeRef("ProtoBuf.PrefixStyle"), $.Int32, 
          $asm0E.TypeRef("ProtoBuf.SerializationContext")
        ]), 
      DeserializeItemsIterator$b1__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_Current", 
      new JSIL.MethodSignature($.GenericParameter("T"), null), 
      DeserializeItemsIterator$b1_get_Current$00
    );

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lT$g.GetEnumerator", 
      new JSIL.MethodSignature($asm14.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("T")]), null), 
      DeserializeItemsIterator$b1_System_Collections_Generic_IEnumerable$lT$g_GetEnumerator
    )
      .Overrides($asm14.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")]), "GetEnumerator");

    $.Method({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void, 
      DeserializeItemsIterator$b1_System_IDisposable_Dispose
    )
      .Overrides($asm14.TypeRef("System.IDisposable"), "Dispose");

    $.Property({Static:false, Public:true , Virtual:true }, "Current", $.GenericParameter("T"));

    $.ImplementInterfaces(
      /* 2 */ $asm14.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("T")]), 
      /* 3 */ $asm14.TypeRef("System.IDisposable"), 
      /* 4 */ $asm14.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum ProtoBuf.Meta.TypeModel+CallbackType */ 

JSIL.MakeEnum(
  {
    FullName: "ProtoBuf.Meta.TypeModel+CallbackType", 
    BaseType: $asm14.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    BeforeSerialize: 0, 
    AfterSerialize: 1, 
    BeforeDeserialize: 2, 
    AfterDeserialize: 3, 
  }
);

/* class ProtoBuf.Meta.RuntimeTypeModel */ 

(function RuntimeTypeModel$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0E.ProtoBuf.Meta.BasicList_MatchPredicate)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm14.System.Boolean)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0E.ProtoBuf.Meta.BasicList)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0E.ProtoBuf.Meta.TypeModel)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm14.System.Type)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm14.System.ArgumentNullException)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm0E.ProtoBuf.Meta.MetaType)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm14.System.Int32)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm14.System.ArgumentException)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm14.System.String)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm0E.ProtoBuf.Meta.LockContentedEventHandler)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm14.System.Delegate)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm14.System.Threading.Interlocked)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm14.System.Object)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm0E.ProtoBuf.Meta.RuntimeTypeModel_BasicType)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm0E.ProtoBuf.WireType)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize(System.Array.Of($asm14.System.Reflection.MemberInfo))) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm0E.ProtoBuf.Serializers.IProtoSerializer)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm0E.ProtoBuf.Meta.ValueMember)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm0E.ProtoBuf.DataFormat)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm14.System.Reflection.PropertyInfo)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm14.System.Reflection.FieldInfo)) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm14.System.Collections.IEnumerator)) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm14.System.Collections.IEnumerable)) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize($asm14.System.IDisposable)) ();
  };
  var $T19 = function () {
    return ($T19 = JSIL.Memoize(System.Array.Of($asm0E.ProtoBuf.Meta.SubType))) ();
  };
  var $T1A = function () {
    return ($T1A = JSIL.Memoize($asm0E.ProtoBuf.Meta.SubType)) ();
  };
  var $T1B = function () {
    return ($T1B = JSIL.Memoize($asm0E.ProtoBuf.ProtoReader)) ();
  };
  var $T1C = function () {
    return ($T1C = JSIL.Memoize($asm0E.ProtoBuf.Helpers)) ();
  };
  var $T1D = function () {
    return ($T1D = JSIL.Memoize($asm14.System.Activator)) ();
  };
  var $T1E = function () {
    return ($T1E = JSIL.Memoize($asm0E.ProtoBuf.Meta.MetaType_AttributeFamily)) ();
  };
  var $T1F = function () {
    return ($T1F = JSIL.Memoize($asm0E.ProtoBuf.Meta.BasicList_NodeEnumerator)) ();
  };
  var $T20 = function () {
    return ($T20 = JSIL.Memoize($asm14.System.InvalidOperationException)) ();
  };
  var $T21 = function () {
    return ($T21 = JSIL.Memoize($asm0E.ProtoBuf.Meta.RuntimeTypeModel_Singleton)) ();
  };
  var $T22 = function () {
    return ($T22 = JSIL.Memoize($asm14.System.Exception)) ();
  };
  var $T23 = function () {
    return ($T23 = JSIL.Memoize($asm14.System.NotSupportedException)) ();
  };
  var $T24 = function () {
    return ($T24 = JSIL.Memoize($asm0E.ProtoBuf.ProtoException)) ();
  };
  var $T25 = function () {
    return ($T25 = JSIL.Memoize($asm14.System.Byte)) ();
  };
  var $T26 = function () {
    return ($T26 = JSIL.Memoize($asm14.System.Text.StringBuilder)) ();
  };
  var $T27 = function () {
    return ($T27 = JSIL.Memoize(System.Array.Of($asm0E.ProtoBuf.Meta.MetaType))) ();
  };
  var $T28 = function () {
    return ($T28 = JSIL.Memoize($asm14.System.Array)) ();
  };
  var $T29 = function () {
    return ($T29 = JSIL.Memoize($asm0E.ProtoBuf.Meta.MetaType_Comparer)) ();
  };
  var $T2A = function () {
    return ($T2A = JSIL.Memoize($asm14.System.Reflection.MemberInfo)) ();
  };
  var $T2B = function () {
    return ($T2B = JSIL.Memoize(System.Array.Of($asm14.System.Byte))) ();
  };
  var $T2C = function () {
    return ($T2C = JSIL.Memoize($asm0E.ProtoBuf.Serializers.ParseableSerializer)) ();
  };
  var $T2D = function () {
    return ($T2D = JSIL.Memoize($asm0E.ProtoBuf.ProtoTypeCode)) ();
  };
  var $T2E = function () {
    return ($T2E = JSIL.Memoize($asm14.System.Threading.Monitor)) ();
  };
  var $T2F = function () {
    return ($T2F = JSIL.Memoize($asm0E.ProtoBuf.Meta.LockContentedEventArgs)) ();
  };
  var $T30 = function () {
    return ($T30 = JSIL.Memoize(System.Array.Of($asm14.System.Type))) ();
  };
  var $T31 = function () {
    return ($T31 = JSIL.Memoize($asm14.System.Collections.Generic.IDictionary$b2)) ();
  };
  var $T32 = function () {
    return ($T32 = JSIL.Memoize($asm14.System.Collections.Generic.KeyValuePair$b2)) ();
  };
  var $T33 = function () {
    return ($T33 = JSIL.Memoize($asm14.System.Collections.Generic.Dictionary$b2)) ();
  };
  var $T34 = function () {
    return ($T34 = JSIL.Memoize($asm14.System.Collections.Generic.List$b1)) ();
  };
  var $T35 = function () {
    return ($T35 = JSIL.Memoize($asm0E.ProtoBuf.ProtoWriter)) ();
  };
  var $T36 = function () {
    return ($T36 = JSIL.Memoize($asm14.System.ArgumentOutOfRangeException)) ();
  };
  var $T37 = function () {
    return ($T37 = JSIL.Memoize($asm14.System.Reflection.MethodInfo)) ();
  };
  var $T38 = function () {
    return ($T38 = JSIL.Memoize($asm14.System.TimeoutException)) ();
  };
  var $T39 = function () {
    return ($T39 = JSIL.Memoize($asm14.System.Reflection.MethodBase)) ();
  };
  var $T3A = function () {
    return ($T3A = JSIL.Memoize($asm0E.ProtoBuf.Meta.CallbackSet)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature($asm14.TypeRef("System.Boolean"), [$asm14.TypeRef("System.Object"), $asm14.TypeRef("System.Object")]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature($asm14.TypeRef("System.Boolean"), [$asm14.TypeRef("System.Object"), $asm14.TypeRef("System.Object")]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm14.TypeRef("System.ArgumentNullException"), [$asm14.TypeRef("System.String")]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm14.TypeRef("System.ArgumentException"), [$asm14.TypeRef("System.String")]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.ConstructorSignature($asm14.TypeRef("System.ArgumentException"), [$asm14.TypeRef("System.String"), $asm14.TypeRef("System.String")]))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.MethodSignature($asm14.TypeRef("System.Int32"), [$jsilcore.TypeRef("JSIL.Reference", [$asm14.TypeRef("System.Int32")])]))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(new JSIL.MethodSignature($asm14.TypeRef("System.Object"), [$asm14.TypeRef("System.Type")]))) ();
  };
  var $S07 = function () {
    return ($S07 = JSIL.Memoize(new JSIL.ConstructorSignature($asm14.TypeRef("System.InvalidOperationException"), [$asm14.TypeRef("System.String")]))) ();
  };
  var $S08 = function () {
    return ($S08 = JSIL.Memoize(new JSIL.MethodSignature($asm14.TypeRef("System.Int32"), [
        $jsilcore.TypeRef("JSIL.Reference", [$asm14.TypeRef("System.Int32")]), $asm14.TypeRef("System.Int32"), 
        $asm14.TypeRef("System.Int32")
      ]))) ();
  };
  var $S09 = function () {
    return ($S09 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0E.TypeRef("ProtoBuf.ProtoException"), [$asm14.TypeRef("System.String"), $asm14.TypeRef("System.Exception")]))) ();
  };
  var $S0A = function () {
    return ($S0A = JSIL.Memoize(new JSIL.ConstructorSignature($asm14.TypeRef("System.Text.StringBuilder"), null))) ();
  };
  var $S0B = function () {
    return ($S0B = JSIL.Memoize(new JSIL.MethodSignature($asm14.TypeRef("System.Text.StringBuilder"), [$asm14.TypeRef("System.Char")]))) ();
  };
  var $S0C = function () {
    return ($S0C = JSIL.Memoize(new JSIL.MethodSignature($asm14.TypeRef("System.Text.StringBuilder"), [$asm14.TypeRef("System.String")]))) ();
  };
  var $S0D = function () {
    return ($S0D = JSIL.Memoize(new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", ["!!0"]), $asm14.TypeRef("System.Collections.Generic.IComparer`1", ["!!0"])], ["T"]))) ();
  };
  var $S0E = function () {
    return ($S0E = JSIL.Memoize(new JSIL.MethodSignature($asm14.TypeRef("System.Text.StringBuilder"), [$asm14.TypeRef("System.Object")]))) ();
  };
  var $S0F = function () {
    return ($S0F = JSIL.Memoize(new JSIL.ConstructorSignature($asm14.TypeRef("System.NotSupportedException"), [$asm14.TypeRef("System.String")]))) ();
  };
  var $S10 = function () {
    return ($S10 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0E.TypeRef("ProtoBuf.ProtoException"), null))) ();
  };
  var $S11 = function () {
    return ($S11 = JSIL.Memoize(new JSIL.ConstructorSignature($asm14.TypeRef("System.ArgumentOutOfRangeException"), [$asm14.TypeRef("System.String")]))) ();
  };
  var $S12 = function () {
    return ($S12 = JSIL.Memoize(new JSIL.ConstructorSignature($asm14.TypeRef("System.TimeoutException"), [$asm14.TypeRef("System.String")]))) ();
  };
  var $S13 = function () {
    return ($S13 = JSIL.Memoize(new JSIL.ConstructorSignature($asm14.TypeRef("System.InvalidOperationException"), null))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm14.System.Collections.IEnumerable.GetEnumerator)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm14.System.Collections.IEnumerator.MoveNext)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm14.System.Collections.IEnumerator.get_Current)) ();
  };
  var $IM03 = function () {
    return ($IM03 = JSIL.Memoize($asm14.System.IDisposable.Dispose)) ();
  };
  var $IM04 = function () {
    return ($IM04 = JSIL.Memoize($asm0E.ProtoBuf.Serializers.IProtoSerializer.get_ExpectedType)) ();
  };
  var $IM05 = function () {
    return ($IM05 = JSIL.Memoize($asm0E.ProtoBuf.Serializers.IProtoSerializer.get_RequiresOldValue)) ();
  };
  var $IM06 = function () {
    return ($IM06 = JSIL.Memoize($asm0E.ProtoBuf.Serializers.IProtoSerializer.Read)) ();
  };
  var $IM07 = function () {
    return ($IM07 = JSIL.Memoize($asm0E.ProtoBuf.Serializers.IProtoSerializer.Write)) ();
  };


  function RuntimeTypeModel__ctor (isDefault) {
    this.basicTypes = new ($T02())();
    this.types = new ($T02())();
    this.metadataTimeoutMilliseconds = 5000;
    this.contentionCounter = 1;
    $T03().prototype._ctor.call(this);
    this.set_AutoAddMissingTypes(true);
    this.set_UseImplicitZeroDefaults(true);
    this.SetOption(2, isDefault);
  }; 

  function RuntimeTypeModel_Add (type, applyDefaultBehaviour) {
    var flag = type === null;
    if (flag) {
      throw $S02().Construct("type");
    }
    var newType = this.FindWithoutAdd(type);
    var flag2 = newType !== null;
    var opaqueToken = new JSIL.BoxedVariable(0);
    if (flag2) {
      var result = newType;
    } else {
      opaqueToken.set(0);
      var flag3 = !(!type.get_IsInterface() || 
        !(this.MapType($T06().ienumerable)).IsAssignableFrom(type)) && 
      ($T03().GetListItemType(this, type) === null);
      if (flag3) {
        throw $S03().Construct("IEnumerable[<T>] data cannot be used as a meta-type unless an Add method can be resolved");
      }
      try {
        newType = this.RecogniseCommonTypes(type);
        var flag4 = newType !== null;
        if (flag4) {
          var flag5 = !applyDefaultBehaviour;
          if (flag5) {
            throw $S04().Construct(JSIL.ConcatString("Default behaviour must be observed for certain types with special handling; ", type.get_FullName()), "applyDefaultBehaviour");
          }
          applyDefaultBehaviour = false;
        }
        var flag6 = newType === null;
        if (flag6) {
          newType = this.Create(type);
        }
        newType.set_Pending(true);
        this.TakeLock(/* ref */ opaqueToken);
        var flag7 = this.FindWithoutAdd(type) !== null;
        if (flag7) {
          throw $S04().Construct("Duplicate type", "type");
        }
        this.ThrowIfFrozen();
        (this.types).Add(newType);
        var flag8 = applyDefaultBehaviour;
        if (flag8) {
          newType.ApplyDefaultBehaviour();
        }
        newType.set_Pending(false);
      } finally {
        this.ReleaseLock(opaqueToken.get());
      }
      result = newType;
    }
    return result;
  }; 

  function RuntimeTypeModel_add_LockContended (value) {
    var lockContentedEventHandler = this.LockContended;

    do {
      var lockContentedEventHandler2 = lockContentedEventHandler;
      var value2 = $T0B().Combine(lockContentedEventHandler2, value);
      lockContentedEventHandler = $T0C().CompareExchange$b1($T0A())(/* ref */ new JSIL.MemberReference(this, "LockContended"), value2, lockContentedEventHandler2);
    } while (lockContentedEventHandler !== lockContentedEventHandler2);
  }; 

  function RuntimeTypeModel_AddContention () {
    $S05().CallStatic($T0C(), "Increment", null, /* ref */ new JSIL.MemberReference(this, "contentionCounter"));
  }; 

  function RuntimeTypeModel_BasicTypeFinderImpl (value, ctx) {
    return (($T0E().$Cast(value)).get_Type() === $T04().$Cast(ctx));
  }; 

  function RuntimeTypeModel_CascadeDependents (list, metaType) {
    var defaultWireType = new JSIL.BoxedVariable($asm0E.ProtoBuf.WireType.Variant);
    var mapping = new JSIL.BoxedVariable(null);
    var defaultWireType2 = new JSIL.BoxedVariable($asm0E.ProtoBuf.WireType.Variant);
    var defaultWireType3 = new JSIL.BoxedVariable($asm0E.ProtoBuf.WireType.Variant);
    var isList = metaType.get_IsList();
    if (isList) {
      var itemType = $T03().GetListItemType(this, metaType.get_Type());
      var coreSerializer = $T12().TryGetCoreSerializer(
        this, 
        $T13().Default, 
        itemType, 
        /* ref */ defaultWireType, 
        false, 
        false, 
        false, 
        false
      );
      var flag = coreSerializer === null;
      if (flag) {
        var index = (this.FindOrAddAuto(itemType, false, false, false) | 0);
        var flag2 = index >= 0;
        if (flag2) {
          var tmp = ($T06().$Cast((this.types).get_Item(index))).GetSurrogateOrBaseOrSelf(false);
          var flag3 = !list.Contains(tmp);
          if (flag3) {
            list.Add(tmp);
            this.CascadeDependents(list, tmp);
          }
        }
      }
    } else {
      var isAutoTuple = metaType.get_IsAutoTuple();
      if (isAutoTuple) {
        var flag4 = $T06().ResolveTupleConstructor(metaType.get_Type(), /* ref */ mapping) !== null;
        if (flag4) {

          for (var i = 0; i < (mapping.get().length | 0); ) {
            var type = null;
            var flag5 = $T14().$Is(mapping.get()[i]);
            if (flag5) {
              type = ($T14().$Cast(mapping.get()[i])).get_PropertyType();
            } else {
              var flag6 = $T15().$Is(mapping.get()[i]);
              if (flag6) {
                type = ($T15().$Cast(mapping.get()[i])).get_FieldType();
              }
            }
            var coreSerializer2 = $T12().TryGetCoreSerializer(
              this, 
              $T13().Default, 
              type, 
              /* ref */ defaultWireType2, 
              false, 
              false, 
              false, 
              false
            );
            var flag7 = coreSerializer2 === null;
            if (flag7) {
              var index2 = (this.FindOrAddAuto(type, false, false, false) | 0);
              if (index2 >= 0) {
                tmp = ($T06().$Cast((this.types).get_Item(index2))).GetSurrogateOrBaseOrSelf(false);
                var flag9 = !list.Contains(tmp);
                if (flag9) {
                  list.Add(tmp);
                  this.CascadeDependents(list, tmp);
                }
              }
            }
            var num = i;
            i = ((num + 1) | 0);
          }
        }
      } else {
        var enumerator = $IM00().Call(metaType.get_Fields(), null);
        try {

          while ($IM01().Call(enumerator, null)) {
            var member = $T12().$Cast($IM02().Call(enumerator, null));
            var type2 = member.get_ItemType();
            var flag10 = type2 === null;
            if (flag10) {
              type2 = member.get_MemberType();
            }
            var coreSerializer3 = $T12().TryGetCoreSerializer(
              this, 
              $T13().Default, 
              type2, 
              /* ref */ defaultWireType3, 
              false, 
              false, 
              false, 
              false
            );
            var flag11 = coreSerializer3 === null;
            if (flag11) {
              var index3 = (this.FindOrAddAuto(type2, false, false, false) | 0);
              if (index3 >= 0) {
                tmp = ($T06().$Cast((this.types).get_Item(index3))).GetSurrogateOrBaseOrSelf(false);
                var flag13 = !list.Contains(tmp);
                if (flag13) {
                  list.Add(tmp);
                  this.CascadeDependents(list, tmp);
                }
              }
            }
          }
        } finally {
          var disposable = $T18().$As(enumerator);
          if (disposable !== null) {
            $IM03().Call(disposable, null);
          }
        }
      }
      var hasSubtypes = metaType.get_HasSubtypes();
      if (hasSubtypes) {
        var subtypes = metaType.GetSubtypes();

        for (var j = 0; j < (subtypes.length | 0); j = ((j + 1) | 0)) {
          var subType = subtypes[j];
          tmp = (subType.get_DerivedType()).GetSurrogateOrSelf();
          var flag14 = !list.Contains(tmp);
          if (flag14) {
            list.Add(tmp);
            this.CascadeDependents(list, tmp);
          }
        }
      }
      tmp = metaType.get_BaseType();
      var flag15 = tmp !== null;
      if (flag15) {
        tmp = tmp.GetSurrogateOrSelf();
      }
      var flag16 = (tmp !== null) && 
      !list.Contains(tmp);
      if (flag16) {
        list.Add(tmp);
        this.CascadeDependents(list, tmp);
      }
    }
  }; 

  function RuntimeTypeModel_Create (type) {
    this.ThrowIfFrozen();
    return new ($T06())(this, type, this.defaultFactory);
  }; 

  function RuntimeTypeModel_Deserialize$00 (key, value, source) {
    var ser = ($T06().$Cast((this.types).get_Item(key))).get_Serializer();
    var flag = (value === null) && 
    $T1C().IsValueType($IM04().Call(ser, null));
    if (flag) {
      var requiresOldValue = $IM05().Call(ser, null);
      if (requiresOldValue) {
        value = $S06().CallStatic($T1D(), "CreateInstance", null, $IM04().Call(ser, null));
      }
      var result = $IM06().Call(ser, null, value, source);
    } else {
      result = $IM06().Call(ser, null, value, source);
    }
    return result;
  }; 

  function RuntimeTypeModel_FindOrAddAuto (type, demand, addWithContractOnly, addEvenIfAutoDisabled) {
    var key = ((this.types).IndexOf($thisType.MetaTypeFinder, type) | 0);
    var flag = key >= 0;
    var opaqueToken = new JSIL.BoxedVariable(0);
    if (flag) {
      var metaType = $T06().$Cast((this.types).get_Item(key));
      var pending = metaType.get_Pending();
      if (pending) {
        this.WaitOnLock(metaType);
      }
      var result = key;
    } else {
      var shouldAdd = this.get_AutoAddMissingTypes() | addEvenIfAutoDisabled;
      var flag2 = !$T1C().IsEnum(type) && 
      (this.TryGetBasicTypeSerializer(type) !== null);
      if (flag2) {
        var flag3 = shouldAdd && 
        !addWithContractOnly;
        if (flag3) {
          throw $T06().InbuiltType(type);
        }
        result = -1;
      } else {
        var underlyingType = $T03().ResolveProxies(type);
        var flag4 = underlyingType !== null;
        if (flag4) {
          key = ((this.types).IndexOf($thisType.MetaTypeFinder, underlyingType) | 0);
          type = underlyingType;
        }
        var flag5 = key < 0;
        if (flag5) {
          opaqueToken.set(0);
          try {
            this.TakeLock(/* ref */ opaqueToken);
            var flag6 = (metaType = this.RecogniseCommonTypes(type)) === null;
            if (flag6) {
              var family = $T06().GetContractFamily(this, type, null);
              if (family === $T1E().AutoTuple) {
                addEvenIfAutoDisabled = shouldAdd = true;
              }
              var flag8 = !shouldAdd || 
              ((!$T1C().IsEnum(type) & addWithContractOnly) && 
                (family === $T1E().None));
              if (flag8) {
                if (demand) {
                  $T03().ThrowUnexpectedType(type);
                }
                result = key;
                return result;
              }
              metaType = this.Create(type);
            }
            metaType.set_Pending(true);
            var weAdded = false;
            var winner = ((this.types).IndexOf($thisType.MetaTypeFinder, type) | 0);
            var flag9 = winner < 0;
            if (flag9) {
              this.ThrowIfFrozen();
              key = ((this.types).Add(metaType) | 0);
              weAdded = true;
            } else {
              key = winner;
            }
            var flag10 = weAdded;
            if (flag10) {
              metaType.ApplyDefaultBehaviour();
              metaType.set_Pending(false);
            }
          } finally {
            this.ReleaseLock(opaqueToken.get());
          }
        }
        result = key;
      }
    }
    return result;
  }; 

  function RuntimeTypeModel_FindWithoutAdd (type) {

    for (var enumerator = (this.types).GetEnumerator(); enumerator.MoveNext(); ) {
      var metaType = $T06().$Cast(enumerator.get_Current());
      var flag = metaType.get_Type() === type;
      if (flag) {
        var pending = metaType.get_Pending();
        if (pending) {
          this.WaitOnLock(metaType);
        }
        var result = metaType;
        return result;
      }
    }
    var underlyingType = $T03().ResolveProxies(type);
    result = (
      (underlyingType === null)
         ? null
         : this.FindWithoutAdd(underlyingType))
    ;
    return result;
  }; 

  function RuntimeTypeModel_Freeze () {
    if (this.GetOption(2)) {
      throw $S07().Construct("The default model cannot be frozen");
    }
    this.SetOption(4, true);
  }; 

  function RuntimeTypeModel_get_AllowParseableTypes () {
    return this.GetOption(64);
  }; 

  function RuntimeTypeModel_get_AutoAddMissingTypes () {
    return this.GetOption(8);
  }; 

  function RuntimeTypeModel_get_AutoAddProtoContractTypesOnly () {
    return this.GetOption(128);
  }; 

  function RuntimeTypeModel_get_Default () {
    return $T21().Value;
  }; 

  function RuntimeTypeModel_get_InferTagFromNameDefault () {
    return this.GetOption(1);
  }; 

  function RuntimeTypeModel_get_Item (type) {
    return $T06().$Cast((this.types).get_Item(this.FindOrAddAuto(type, true, false, false)));
  }; 

  function RuntimeTypeModel_get_MetadataTimeoutMilliseconds () {
    return this.metadataTimeoutMilliseconds;
  }; 

  function RuntimeTypeModel_get_UseImplicitZeroDefaults () {
    return this.GetOption(32);
  }; 

  function RuntimeTypeModel_GetContention () {
    return $S08().CallStatic($T0C(), "CompareExchange", null, /* ref */ new JSIL.MemberReference(this, "contentionCounter"), 0, 0);
  }; 

  function RuntimeTypeModel_GetEnumMap (type) {
    var index = (this.FindOrAddAuto(type, false, false, false) | 0);
    return (
      (index < 0)
         ? null
         : ($T06().$Cast((this.types).get_Item(index))).GetEnumMap())
    ;
  }; 

  function RuntimeTypeModel_GetKey$01 (type, demand, getBaseKey, $exception) {
    try {
      var typeIndex = (this.FindOrAddAuto(type, demand, true, false) | 0);
      var flag = typeIndex >= 0;
      if (flag) {
        var mt = $T06().$Cast((this.types).get_Item(typeIndex));
        if (getBaseKey) {
          mt = $T06().GetRootType(mt);
          typeIndex = (this.FindOrAddAuto(mt.get_Type(), true, true, false) | 0);
        }
      }
      var result = typeIndex;
    } catch ($exception) {
      if ($T23().$Is($exception)) {
        throw $exception;
      } else {
        var ex = $exception;
        var flag2 = (ex.get_Message().indexOf(type.get_FullName())) >= 0;
        if (flag2) {
          throw $exception;
        }
        throw $S09().Construct((ex.get_Message() + " (" + type.get_FullName() + ")"), ex);
      }
    }
    return result;
  }; 

  function RuntimeTypeModel_GetKeyImpl (type) {
    return this.GetKey(type, false, true);
  }; 

  function RuntimeTypeModel_GetOption (option) {
    return (((this.options | 0) & (option | 0)) === (option | 0));
  }; 

  function RuntimeTypeModel_GetSchema (type) {
    var defaultWireType = new JSIL.BoxedVariable($asm0E.ProtoBuf.WireType.Variant);
    var requiredTypes = new ($T02())();
    var primaryType = null;
    var isInbuiltType = false;
    var flag = type === null;
    if (flag) {

      for (var enumerator = (this.types).GetEnumerator(); enumerator.MoveNext(); ) {
        var meta = $T06().$Cast(enumerator.get_Current());
        var tmp = meta.GetSurrogateOrBaseOrSelf(false);
        var flag2 = !requiredTypes.Contains(tmp);
        if (flag2) {
          requiredTypes.Add(tmp);
          this.CascadeDependents(requiredTypes, tmp);
        }
      }
    } else {
      var tmp2 = $T1C().GetUnderlyingType(type);
      var flag3 = tmp2 !== null;
      if (flag3) {
        type = tmp2;
      }
      isInbuiltType = $T12().TryGetCoreSerializer(
        this, 
        $T13().Default, 
        type, 
        /* ref */ defaultWireType, 
        false, 
        false, 
        false, 
        false
      ) !== null;
      var flag4 = !isInbuiltType;
      if (flag4) {
        var index = (this.FindOrAddAuto(type, false, false, false) | 0);
        if (index < 0) {
          throw $S04().Construct("The type specified is not a contract-type", "type");
        }
        primaryType = ($T06().$Cast((this.types).get_Item(index))).GetSurrogateOrBaseOrSelf(false);
        requiredTypes.Add(primaryType);
        this.CascadeDependents(requiredTypes, primaryType);
      }
    }
    var headerBuilder = $S0A().Construct();
    var $package = null;
    var flag6 = !isInbuiltType;
    if (flag6) {
      var typesForNamespace = (
        (primaryType === null)
           ? this.types
           : requiredTypes)
      ;
      var enumerator2 = $IM00().Call(typesForNamespace, null);
      try {

      $loop1: 
        while ($IM01().Call(enumerator2, null)) {
          var meta2 = $T06().$Cast($IM02().Call(enumerator2, null));
          var isList = meta2.get_IsList();
          if (!isList) {
            var tmp3 = (meta2.get_Type()).get_Namespace();
            if (!$T1C().IsNullOrEmpty(tmp3)) {
              var flag8 = (System.String.StartsWith(tmp3, "System."));
              if (!flag8) {
                var flag9 = $package === null;
                if (flag9) {
                  $package = tmp3;
                } else {
                  var flag10 = ($package == tmp3);
                  if (!flag10) {
                    $package = null;
                    break $loop1;
                  }
                }
              }
            }
          }
        }
      } finally {
        var disposable = $T18().$As(enumerator2);
        if (disposable !== null) {
          $IM03().Call(disposable, null);
        }
      }
    }
    var flag11 = !$T1C().IsNullOrEmpty($package);
    if (flag11) {
      $S0B().CallVirtual("Append", null, $S0C().CallVirtual("Append", null, $S0C().CallVirtual("Append", null, headerBuilder, "package "), $package), ";");
      $T1C().AppendLine(headerBuilder);
    }
    var requiresBclImport = new JSIL.BoxedVariable(false);
    var bodyBuilder = $S0A().Construct();
    var metaTypesArr = JSIL.Array.New($T06(), requiredTypes.get_Count());
    requiredTypes.CopyTo(metaTypesArr, 0);
    $S0D().CallStatic($T28(), "Sort$b1", [$asm0E.ProtoBuf.Meta.MetaType], metaTypesArr, $T29().Default);
    var flag12 = isInbuiltType;
    if (flag12) {
      $S0C().CallVirtual("Append", null, $S0C().CallVirtual("Append", null, $S0C().CallVirtual("Append", null, $T1C().AppendLine(bodyBuilder), "message "), type.get_Name()), " {");
      $S0C().CallVirtual("Append", null, $S0C().CallVirtual("Append", null, $S0C().CallVirtual("Append", null, $T06().NewLine(bodyBuilder, 1), "optional "), this.GetSchemaTypeName(
            type, 
            $T13().Default, 
            false, 
            false, 
            /* ref */ requiresBclImport
          )), " value = 1;");
      $S0B().CallVirtual("Append", null, $T1C().AppendLine(bodyBuilder), "}");
    } else {

      for (var i = 0; i < (metaTypesArr.length | 0); ) {
        var tmp4 = metaTypesArr[i];
        var flag13 = tmp4.get_IsList() && 
        (tmp4 !== primaryType);
        if (!flag13) {
          tmp4.WriteSchema(bodyBuilder, 0, /* ref */ requiresBclImport);
        }
        var num = i;
        i = ((num + 1) | 0);
      }
    }
    var flag14 = requiresBclImport.get();
    if (flag14) {
      $S0C().CallVirtual("Append", null, headerBuilder, "import \"bcl.proto\"; // schema for protobuf-net's handling of core .NET types");
      $T1C().AppendLine(headerBuilder);
    }
    return ($T1C().AppendLine($S0E().CallVirtual("Append", null, headerBuilder, bodyBuilder))).toString();
  }; 

  function RuntimeTypeModel_GetSchemaTypeName (effectiveType, dataFormat, asReference, dynamicType, /* ref */ requiresBclImport) {
    var wireType = new JSIL.BoxedVariable($asm0E.ProtoBuf.WireType.Variant);
    var tmp = $T1C().GetUnderlyingType(effectiveType);
    if (tmp !== null) {
      effectiveType = tmp;
    }
    var flag2 = effectiveType === this.MapType($T2B().__Type__);
    if (flag2) {
      var result = "bytes";
    } else {
      var ser = $T12().TryGetCoreSerializer(
        this, 
        dataFormat, 
        effectiveType, 
        /* ref */ wireType, 
        false, 
        false, 
        false, 
        false
      );
      var flag3 = ser === null;
      if (flag3) {
        var flag4 = asReference | dynamicType;
        if (flag4) {
          requiresBclImport.set(true);
          result = "bcl.NetObjectProxy";
        } else {
          result = ((this.get_Item(effectiveType)).GetSurrogateOrBaseOrSelf(true)).GetSchemaTypeName();
        }
      } else {
        var flag5 = $T2C().$Is(ser);
        if (!flag5) {
          var typeCode = $T1C().GetTypeCode(effectiveType);
          switch (typeCode.valueOf()) {
            case 3: 
              result = "bool";
              return result;

            case 4: 
            case 6: 
            case 8: 
            case 10: 
              if (dataFormat !== $T13().FixedSize) {
                result = "uint32";
                return result;
              }
              result = "fixed32";
              return result;

            case 5: 
            case 7: 
            case 9: 
              if (dataFormat === $T13().ZigZag) {
                result = "sint32";
                return result;
              }
              if (dataFormat !== $T13().FixedSize) {
                result = "int32";
                return result;
              }
              result = "sfixed32";
              return result;

            case 11: 
              if (dataFormat === $T13().ZigZag) {
                result = "sint64";
                return result;
              }
              if (dataFormat !== $T13().FixedSize) {
                result = "int64";
                return result;
              }
              result = "sfixed64";
              return result;

            case 12: 
              if (dataFormat !== $T13().FixedSize) {
                result = "uint64";
                return result;
              }
              result = "fixed64";
              return result;

            case 13: 
              result = "float";
              return result;

            case 14: 
              result = "double";
              return result;

            case 15: 
              requiresBclImport.set(true);
              result = "bcl.Decimal";
              return result;

            case 16: 
              requiresBclImport.set(true);
              result = "bcl.DateTime";
              return result;

            case 17: 
              break;

            case 18: 
              if (asReference) {
                requiresBclImport.set(true);
              }
              result = (
                asReference
                   ? "bcl.NetObjectProxy"
                   : "string")
              ;
              return result;

            default: 
              if (typeCode === $T2D().TimeSpan) {
                requiresBclImport.set(true);
                result = "bcl.TimeSpan";
                return result;
              }
              if (typeCode === $T2D().Guid) {
                requiresBclImport.set(true);
                result = "bcl.Guid";
                return result;
              }
              break;

          }
          throw $S0F().Construct(JSIL.ConcatString("No .proto map found for: ", effectiveType.get_FullName()));
        }
        if (asReference) {
          requiresBclImport.set(true);
        }
        result = (
          asReference
             ? "bcl.NetObjectProxy"
             : "string")
        ;
      }
    }
    return result;
  }; 

  function RuntimeTypeModel_GetTypes () {
    return this.types;
  }; 

  function RuntimeTypeModel_IsPrepared (type) {
    var meta = this.FindWithoutAdd(type);
    return ((meta !== null) && meta.IsPrepared());
  }; 

  function RuntimeTypeModel_MetaTypeFinderImpl (value, ctx) {
    return (($T06().$Cast(value)).get_Type() === $T04().$Cast(ctx));
  }; 

  function RuntimeTypeModel_RecogniseCommonTypes (type) {
    return null;
  }; 

  function RuntimeTypeModel_ReleaseLock (opaqueToken, $exception) {
    if ((opaqueToken | 0) > 0) {
      $T2E().Exit(this.types);
      var flag2 = (opaqueToken | 0) !== (this.GetContention() | 0);
      if (flag2) {
        var handler = this.LockContended;
        var flag3 = handler !== null;
        if (flag3) {
          try {
            throw $S10().Construct();
          } catch ($exception) {
            var stackTrace = $exception.get_StackTrace();
          }
          handler(this, new ($T2F())(stackTrace));
        }
      }
    }
  }; 

  function RuntimeTypeModel_remove_LockContended (value) {
    var lockContentedEventHandler = this.LockContended;

    do {
      var lockContentedEventHandler2 = lockContentedEventHandler;
      var value2 = $T0B().Remove(lockContentedEventHandler2, value);
      lockContentedEventHandler = $T0C().CompareExchange$b1($T0A())(/* ref */ new JSIL.MemberReference(this, "LockContended"), value2, lockContentedEventHandler2);
    } while (lockContentedEventHandler !== lockContentedEventHandler2);
  }; 

  function RuntimeTypeModel_ResolveListTypes (type, /* ref */ itemType, /* ref */ defaultType) {
    var type2 = null, genArgs = null;
    var flag = type === null;
    var nestedItemType = new JSIL.BoxedVariable(null);
    var nestedDefaultType = new JSIL.BoxedVariable(null);
    if (!flag) {
      var flag2 = $T1C().GetTypeCode(type) !== $T2D().Unknown;
      if (!flag2) {
        var ignoreListHandling = (this.get_Item(type)).get_IgnoreListHandling();
        if (!ignoreListHandling) {
          var isArray = type.get_IsArray();
          if (isArray) {
            var flag3 = (type.GetArrayRank() | 0) !== 1;
            if (flag3) {
              throw $S0F().Construct("Multi-dimension arrays are supported");
            }
            itemType.set(type.GetElementType());
            var flag4 = itemType.get() === this.MapType($T25().__Type__);
            if (flag4) {
              itemType.set(type2 = null);
              defaultType.set(type2);
            } else {
              defaultType.set(type);
            }
          }
          var flag5 = itemType.get() === null;
          if (flag5) {
            itemType.set($T03().GetListItemType(this, type));
          }
          var flag6 = itemType.get() !== null;
          if (flag6) {
            nestedItemType.set(null);
            nestedDefaultType.set(null);
            this.ResolveListTypes(itemType.get(), /* ref */ nestedItemType, /* ref */ nestedDefaultType);
            var flag7 = nestedItemType.get() !== null;
            if (flag7) {
              throw $T03().CreateNestedListsNotSupported();
            }
          }
          var flag8 = (itemType.get() !== null) && 
          (defaultType.get() === null);
          if (flag8) {
            var flag9 = !(!type.get_IsClass() || 
              type.get_IsAbstract()) && 
            ($T1C().GetConstructor(type, $T1C().EmptyTypes, true) !== null);
            if (flag9) {
              defaultType.set(type);
            }
            var flag10 = defaultType.get() === null;
            if (flag10) {
              var isInterface = type.get_IsInterface();
              if (isInterface) {
                var flag11 = !(!type.get_IsGenericType() || 
                  (type.GetGenericTypeDefinition() !== this.MapType($T31().__Type__))) && 
                (itemType.get() === (this.MapType($T32().__Type__)).MakeGenericType(genArgs = type.GetGenericArguments()));
                if (flag11) {
                  defaultType.set((this.MapType($T33().__Type__)).MakeGenericType(genArgs));
                } else {
                  defaultType.set((this.MapType($T34().__Type__)).MakeGenericType(JSIL.Array.New($T04(), [itemType.get()])));
                }
              }
            }
            var flag12 = (defaultType.get() !== null) && 
            !$T1C().IsAssignableFrom(type, defaultType.get());
            if (flag12) {
              defaultType.set(null);
            }
          }
        }
      }
    }
  }; 

  function RuntimeTypeModel_Serialize$02 (key, value, dest) {
    $IM07().Call(($T06().$Cast((this.types).get_Item(key))).get_Serializer(), null, value, dest);
  }; 

  function RuntimeTypeModel_set_AllowParseableTypes (value) {
    this.SetOption(64, value);
  }; 

  function RuntimeTypeModel_set_AutoAddMissingTypes (value) {
    if (!value && this.GetOption(2)) {
      throw $S07().Construct("The default model must allow missing types");
    }
    this.ThrowIfFrozen();
    this.SetOption(8, value);
  }; 

  function RuntimeTypeModel_set_AutoAddProtoContractTypesOnly (value) {
    this.SetOption(128, value);
  }; 

  function RuntimeTypeModel_set_InferTagFromNameDefault (value) {
    this.SetOption(1, value);
  }; 

  function RuntimeTypeModel_set_MetadataTimeoutMilliseconds (value) {
    if ((value | 0) <= 0) {
      throw $S11().Construct("MetadataTimeoutMilliseconds");
    }
    this.metadataTimeoutMilliseconds = (value | 0);
  }; 

  function RuntimeTypeModel_set_UseImplicitZeroDefaults (value) {
    if (!value && this.GetOption(2)) {
      throw $S07().Construct("UseImplicitZeroDefaults cannot be disabled on the default model");
    }
    this.SetOption(32, value);
  }; 

  function RuntimeTypeModel_SetDefaultFactory (methodInfo) {
    this.VerifyFactory(methodInfo, null);
    this.defaultFactory = methodInfo;
  }; 

  function RuntimeTypeModel_SetOption (option, value) {
    if (value) {
      this.options = (this.options | 0) | (option | 0);
    } else {
      this.options = (this.options | 0) & (~option & 0xFF);
    }
  }; 

  function RuntimeTypeModel_TakeLock (/* ref */ opaqueToken) {
    opaqueToken.set(0);
    var flag = !$T2E().TryEnter(this.types);
    if (flag) {
      throw $S12().Construct("Timeout while inspecting metadata; this may indicate a deadlock. This can often be avoided by preparing necessary serializers during application initialization, rather than allowing multiple threads to perform the initial metadata inspection; please also see the LockContended event");
    }
    opaqueToken.set($S08().CallStatic($T0C(), "CompareExchange", null, /* ref */ new JSIL.MemberReference(this, "contentionCounter"), 0, 0));
  }; 

  function RuntimeTypeModel_ThrowIfFrozen () {
    if (this.GetOption(4)) {
      throw $S07().Construct("The model cannot be changed once frozen");
    }
  }; 

  function RuntimeTypeModel_TryGetBasicTypeSerializer (type) {
    var defaultWireType = new JSIL.BoxedVariable($asm0E.ProtoBuf.WireType.Variant);
    var idx = ((this.basicTypes).IndexOf($thisType.BasicTypeFinder, type) | 0);
    var flag = idx >= 0;
    if (flag) {
      var result = ($T0E().$Cast((this.basicTypes).get_Item(idx))).get_Serializer();
    } else {
      var basicList = this.basicTypes;
      try {
        JSIL.UnknownMember("System.Void System.Threading.Monitor::Enter(System.Object,System.Boolean&)").LValue;
        idx = ((this.basicTypes).IndexOf($thisType.BasicTypeFinder, type) | 0);
        var flag3 = idx >= 0;
        if (flag3) {
          result = ($T0E().$Cast((this.basicTypes).get_Item(idx))).get_Serializer();
        } else {
          var family = $T06().GetContractFamily(this, type, null);
          var ser = (
            ((family.valueOf() | 0) === 0)
               ? $T12().TryGetCoreSerializer(
                this, 
                $T13().Default, 
                type, 
                /* ref */ defaultWireType, 
                false, 
                false, 
                false, 
                false
              )
               : null)
          ;
          var flag4 = ser !== null;
          if (flag4) {
            (this.basicTypes).Add(new ($T0E())(type, ser));
          }
          result = ser;
        }
      } finally {
        if (false) {
          $T2E().Exit(basicList);
        }
      }
    }
    return result;
  }; 

  function RuntimeTypeModel_VerifyFactory (factory, type) {
    var flag = factory !== null;
    if (flag) {
      var flag2 = (type !== null) && 
      $T1C().IsValueType(type);
      if (flag2) {
        throw $S13().Construct();
      }
      var flag3 = !factory.get_IsStatic();
      if (flag3) {
        throw $S04().Construct("A factory-method must be static", "factory");
      }
      var flag4 = !((type === null) || 
        (factory.get_ReturnType() === type)) && 
      (factory.get_ReturnType() !== this.MapType($T0D().__Type__));
      if (flag4) {
        throw $S04().Construct(JSIL.ConcatString("The factory-method must return object", (
            (type === null)
               ? ""
               : JSIL.ConcatString(" or ", type.get_FullName()))
          ), "factory");
      }
      var flag5 = !$T3A().CheckCallbackParameters(this, factory);
      if (flag5) {
        throw $S04().Construct(("Invalid factory signature in " + (factory.get_DeclaringType()).get_FullName() + "." + factory.get_Name()), "factory");
      }
    }
  }; 

  function RuntimeTypeModel_WaitOnLock (type) {
    var opaqueToken = new JSIL.BoxedVariable(0);
    try {
      this.TakeLock(/* ref */ opaqueToken);
    } finally {
      this.ReleaseLock(opaqueToken.get());
    }
  }; 

  JSIL.MakeType({
      BaseType: $asm0E.TypeRef("ProtoBuf.Meta.TypeModel"), 
      Name: "ProtoBuf.Meta.RuntimeTypeModel", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Boolean), 
      RuntimeTypeModel__ctor
    );

    $.Method({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($asm0E.TypeRef("ProtoBuf.Meta.MetaType"), [$asm14.TypeRef("System.Type"), $.Boolean]), 
      RuntimeTypeModel_Add
    );

    $.Method({Static:false, Public:true }, "add_LockContended", 
      JSIL.MethodSignature.Action($asm0E.TypeRef("ProtoBuf.Meta.LockContentedEventHandler")), 
      RuntimeTypeModel_add_LockContended
    )
      .Attribute($asm14.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "AddContention", 
      JSIL.MethodSignature.Void, 
      RuntimeTypeModel_AddContention
    );

    $.Method({Static:true , Public:false}, "BasicTypeFinderImpl", 
      new JSIL.MethodSignature($.Boolean, [$.Object, $.Object]), 
      RuntimeTypeModel_BasicTypeFinderImpl
    );

    $.Method({Static:false, Public:false}, "CascadeDependents", 
      new JSIL.MethodSignature(null, [$asm0E.TypeRef("ProtoBuf.Meta.BasicList"), $asm0E.TypeRef("ProtoBuf.Meta.MetaType")]), 
      RuntimeTypeModel_CascadeDependents
    );

    $.Method({Static:false, Public:false}, "Create", 
      new JSIL.MethodSignature($asm0E.TypeRef("ProtoBuf.Meta.MetaType"), [$asm14.TypeRef("System.Type")]), 
      RuntimeTypeModel_Create
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Deserialize", 
      new JSIL.MethodSignature($.Object, [
          $.Int32, $.Object, 
          $asm0E.TypeRef("ProtoBuf.ProtoReader")
        ]), 
      RuntimeTypeModel_Deserialize$00
    );

    $.Method({Static:false, Public:false}, "FindOrAddAuto", 
      new JSIL.MethodSignature($.Int32, [
          $asm14.TypeRef("System.Type"), $.Boolean, 
          $.Boolean, $.Boolean
        ]), 
      RuntimeTypeModel_FindOrAddAuto
    );

    $.Method({Static:false, Public:false}, "FindWithoutAdd", 
      new JSIL.MethodSignature($asm0E.TypeRef("ProtoBuf.Meta.MetaType"), [$asm14.TypeRef("System.Type")]), 
      RuntimeTypeModel_FindWithoutAdd
    );

    $.Method({Static:false, Public:true }, "Freeze", 
      JSIL.MethodSignature.Void, 
      RuntimeTypeModel_Freeze
    );

    $.Method({Static:false, Public:true }, "get_AllowParseableTypes", 
      JSIL.MethodSignature.Return($.Boolean), 
      RuntimeTypeModel_get_AllowParseableTypes
    );

    $.Method({Static:false, Public:true }, "get_AutoAddMissingTypes", 
      JSIL.MethodSignature.Return($.Boolean), 
      RuntimeTypeModel_get_AutoAddMissingTypes
    );

    $.Method({Static:false, Public:true }, "get_AutoAddProtoContractTypesOnly", 
      JSIL.MethodSignature.Return($.Boolean), 
      RuntimeTypeModel_get_AutoAddProtoContractTypesOnly
    );

    $.Method({Static:true , Public:true }, "get_Default", 
      JSIL.MethodSignature.Return($.Type), 
      RuntimeTypeModel_get_Default
    );

    $.Method({Static:false, Public:true }, "get_InferTagFromNameDefault", 
      JSIL.MethodSignature.Return($.Boolean), 
      RuntimeTypeModel_get_InferTagFromNameDefault
    );

    $.Method({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm0E.TypeRef("ProtoBuf.Meta.MetaType"), [$asm14.TypeRef("System.Type")]), 
      RuntimeTypeModel_get_Item
    );

    $.Method({Static:false, Public:true }, "get_MetadataTimeoutMilliseconds", 
      JSIL.MethodSignature.Return($.Int32), 
      RuntimeTypeModel_get_MetadataTimeoutMilliseconds
    );

    $.Method({Static:false, Public:true }, "get_UseImplicitZeroDefaults", 
      JSIL.MethodSignature.Return($.Boolean), 
      RuntimeTypeModel_get_UseImplicitZeroDefaults
    );

    $.Method({Static:false, Public:false}, "GetContention", 
      JSIL.MethodSignature.Return($.Int32), 
      RuntimeTypeModel_GetContention
    );

    $.Method({Static:false, Public:false}, "GetEnumMap", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("ProtoBuf.Serializers.EnumSerializer+EnumPair")]), [$asm14.TypeRef("System.Type")]), 
      RuntimeTypeModel_GetEnumMap
    );

    $.Method({Static:false, Public:false}, "GetKey", 
      new JSIL.MethodSignature($.Int32, [
          $asm14.TypeRef("System.Type"), $.Boolean, 
          $.Boolean
        ]), 
      RuntimeTypeModel_GetKey$01
    );

    $.Method({Static:false, Public:false, Virtual:true }, "GetKeyImpl", 
      new JSIL.MethodSignature($.Int32, [$asm14.TypeRef("System.Type")]), 
      RuntimeTypeModel_GetKeyImpl
    );

    $.Method({Static:false, Public:false}, "GetOption", 
      new JSIL.MethodSignature($.Boolean, [$.Byte]), 
      RuntimeTypeModel_GetOption
    );

    $.Method({Static:false, Public:true , Virtual:true }, "GetSchema", 
      new JSIL.MethodSignature($.String, [$asm14.TypeRef("System.Type")]), 
      RuntimeTypeModel_GetSchema
    );

    $.Method({Static:false, Public:false}, "GetSchemaTypeName", 
      new JSIL.MethodSignature($.String, [
          $asm14.TypeRef("System.Type"), $asm0E.TypeRef("ProtoBuf.DataFormat"), 
          $.Boolean, $.Boolean, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ]), 
      RuntimeTypeModel_GetSchemaTypeName
    );

    $.Method({Static:false, Public:true }, "GetTypes", 
      JSIL.MethodSignature.Return($asm14.TypeRef("System.Collections.IEnumerable")), 
      RuntimeTypeModel_GetTypes
    );

    $.Method({Static:false, Public:false}, "IsPrepared", 
      new JSIL.MethodSignature($.Boolean, [$asm14.TypeRef("System.Type")]), 
      RuntimeTypeModel_IsPrepared
    );

    $.Method({Static:true , Public:false}, "MetaTypeFinderImpl", 
      new JSIL.MethodSignature($.Boolean, [$.Object, $.Object]), 
      RuntimeTypeModel_MetaTypeFinderImpl
    );

    $.Method({Static:false, Public:false}, "RecogniseCommonTypes", 
      new JSIL.MethodSignature($asm0E.TypeRef("ProtoBuf.Meta.MetaType"), [$asm14.TypeRef("System.Type")]), 
      RuntimeTypeModel_RecogniseCommonTypes
    );

    $.Method({Static:false, Public:false}, "ReleaseLock", 
      JSIL.MethodSignature.Action($.Int32), 
      RuntimeTypeModel_ReleaseLock
    );

    $.Method({Static:false, Public:true }, "remove_LockContended", 
      JSIL.MethodSignature.Action($asm0E.TypeRef("ProtoBuf.Meta.LockContentedEventHandler")), 
      RuntimeTypeModel_remove_LockContended
    )
      .Attribute($asm14.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "ResolveListTypes", 
      new JSIL.MethodSignature(null, [
          $asm14.TypeRef("System.Type"), $jsilcore.TypeRef("JSIL.Reference", [$asm14.TypeRef("System.Type")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm14.TypeRef("System.Type")])
        ]), 
      RuntimeTypeModel_ResolveListTypes
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Serialize", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Object, 
          $asm0E.TypeRef("ProtoBuf.ProtoWriter")
        ]), 
      RuntimeTypeModel_Serialize$02
    );

    $.Method({Static:false, Public:true }, "set_AllowParseableTypes", 
      JSIL.MethodSignature.Action($.Boolean), 
      RuntimeTypeModel_set_AllowParseableTypes
    );

    $.Method({Static:false, Public:true }, "set_AutoAddMissingTypes", 
      JSIL.MethodSignature.Action($.Boolean), 
      RuntimeTypeModel_set_AutoAddMissingTypes
    );

    $.Method({Static:false, Public:true }, "set_AutoAddProtoContractTypesOnly", 
      JSIL.MethodSignature.Action($.Boolean), 
      RuntimeTypeModel_set_AutoAddProtoContractTypesOnly
    );

    $.Method({Static:false, Public:true }, "set_InferTagFromNameDefault", 
      JSIL.MethodSignature.Action($.Boolean), 
      RuntimeTypeModel_set_InferTagFromNameDefault
    );

    $.Method({Static:false, Public:true }, "set_MetadataTimeoutMilliseconds", 
      JSIL.MethodSignature.Action($.Int32), 
      RuntimeTypeModel_set_MetadataTimeoutMilliseconds
    );

    $.Method({Static:false, Public:true }, "set_UseImplicitZeroDefaults", 
      JSIL.MethodSignature.Action($.Boolean), 
      RuntimeTypeModel_set_UseImplicitZeroDefaults
    );

    $.Method({Static:false, Public:true }, "SetDefaultFactory", 
      JSIL.MethodSignature.Action($asm14.TypeRef("System.Reflection.MethodInfo")), 
      RuntimeTypeModel_SetDefaultFactory
    );

    $.Method({Static:false, Public:false}, "SetOption", 
      new JSIL.MethodSignature(null, [$.Byte, $.Boolean]), 
      RuntimeTypeModel_SetOption
    );

    $.Method({Static:false, Public:false}, "TakeLock", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("JSIL.Reference", [$.Int32])), 
      RuntimeTypeModel_TakeLock
    );

    $.Method({Static:false, Public:false}, "ThrowIfFrozen", 
      JSIL.MethodSignature.Void, 
      RuntimeTypeModel_ThrowIfFrozen
    );

    $.Method({Static:false, Public:false}, "TryGetBasicTypeSerializer", 
      new JSIL.MethodSignature($asm0E.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), [$asm14.TypeRef("System.Type")]), 
      RuntimeTypeModel_TryGetBasicTypeSerializer
    );

    $.Method({Static:false, Public:false}, "VerifyFactory", 
      new JSIL.MethodSignature(null, [$asm14.TypeRef("System.Reflection.MethodInfo"), $asm14.TypeRef("System.Type")]), 
      RuntimeTypeModel_VerifyFactory
    );

    $.Method({Static:false, Public:false}, "WaitOnLock", 
      JSIL.MethodSignature.Action($asm0E.TypeRef("ProtoBuf.Meta.MetaType")), 
      RuntimeTypeModel_WaitOnLock
    );

    $.Field({Static:false, Public:false}, "options", $.Byte);

    $.Constant({Static:true , Public:false}, "OPTIONS_InferTagFromNameDefault", $.Byte, 1);

    $.Constant({Static:true , Public:false}, "OPTIONS_IsDefaultModel", $.Byte, 2);

    $.Constant({Static:true , Public:false}, "OPTIONS_Frozen", $.Byte, 4);

    $.Constant({Static:true , Public:false}, "OPTIONS_AutoAddMissingTypes", $.Byte, 8);

    $.Constant({Static:true , Public:false}, "OPTIONS_UseImplicitZeroDefaults", $.Byte, 32);

    $.Constant({Static:true , Public:false}, "OPTIONS_AllowParseableTypes", $.Byte, 64);

    $.Constant({Static:true , Public:false}, "OPTIONS_AutoAddProtoContractTypesOnly", $.Byte, 128);

    $.Field({Static:true , Public:false, ReadOnly:true }, "MetaTypeFinder", $asm0E.TypeRef("ProtoBuf.Meta.BasicList+MatchPredicate"), function ($pi) {
        return $asm0E.ProtoBuf.Meta.BasicList_MatchPredicate.New(null, null, new JSIL.MethodPointerInfo($thisType, "MetaTypeFinderImpl", $S00(), true, false));
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "BasicTypeFinder", $asm0E.TypeRef("ProtoBuf.Meta.BasicList+MatchPredicate"), function ($pi) {
        return $asm0E.ProtoBuf.Meta.BasicList_MatchPredicate.New(null, null, new JSIL.MethodPointerInfo($thisType, "BasicTypeFinderImpl", $S01(), true, false));
      });

    $.Field({Static:false, Public:false}, "basicTypes", $asm0E.TypeRef("ProtoBuf.Meta.BasicList"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "types", $asm0E.TypeRef("ProtoBuf.Meta.BasicList"));

    $.Field({Static:false, Public:false}, "metadataTimeoutMilliseconds", $.Int32);

    $.Field({Static:false, Public:false}, "contentionCounter", $.Int32);

    $.Field({Static:false, Public:false}, "LockContended", $asm0E.TypeRef("ProtoBuf.Meta.LockContentedEventHandler"))
      .Attribute($asm14.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm14.TypeRef("System.Diagnostics.DebuggerBrowsableAttribute"), function () { return [$asm14.System.Diagnostics.DebuggerBrowsableState.Never]; });

    $.Field({Static:false, Public:false}, "defaultFactory", $asm14.TypeRef("System.Reflection.MethodInfo"));


    function RuntimeTypeModel__cctor () {
      $thisType.MetaTypeFinder = $T00().New(null, null, new JSIL.MethodPointerInfo($thisType, "MetaTypeFinderImpl", $S00(), true, false));
      $thisType.BasicTypeFinder = $T00().New(null, null, new JSIL.MethodPointerInfo($thisType, "BasicTypeFinderImpl", $S01(), true, false));
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      RuntimeTypeModel__cctor
    );

    $.Property({Static:false, Public:true }, "InferTagFromNameDefault", $.Boolean);

    $.Property({Static:false, Public:true }, "AutoAddProtoContractTypesOnly", $.Boolean);

    $.Property({Static:false, Public:true }, "UseImplicitZeroDefaults", $.Boolean);

    $.Property({Static:false, Public:true }, "AllowParseableTypes", $.Boolean);

    $.Property({Static:true , Public:true }, "Default", $.Type);

    $.Property({Static:false, Public:true }, "Item", $asm0E.TypeRef("ProtoBuf.Meta.MetaType"));

    $.Property({Static:false, Public:true }, "AutoAddMissingTypes", $.Boolean);

    $.Property({Static:false, Public:true }, "MetadataTimeoutMilliseconds", $.Int32);

    $.Event({Static:false, Public:true }, "LockContended", $asm0E.TypeRef("ProtoBuf.Meta.LockContentedEventHandler"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm14.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class ProtoBuf.Meta.RuntimeTypeModel+Singleton */ 

(function Singleton$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0E.ProtoBuf.Meta.RuntimeTypeModel)) ();
  };


  function Singleton__ctor () {
  }; 

  JSIL.MakeType({
      BaseType: $asm14.TypeRef("System.Object"), 
      Name: "ProtoBuf.Meta.RuntimeTypeModel+Singleton", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void, 
      Singleton__ctor
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "Value", $asm0E.TypeRef("ProtoBuf.Meta.RuntimeTypeModel"));


    function Singleton__cctor () {
      $thisType.Value = new ($T00())(true);
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      Singleton__cctor
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ProtoBuf.Meta.RuntimeTypeModel+BasicType */ 

(function BasicType$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm14.System.Type)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0E.ProtoBuf.Serializers.IProtoSerializer)) ();
  };


  function BasicType__ctor (type, serializer) {
    this.type = type;
    this.serializer = serializer;
  }; 

  function BasicType_get_Serializer () {
    return this.serializer;
  }; 

  function BasicType_get_Type () {
    return this.type;
  }; 

  JSIL.MakeType({
      BaseType: $asm14.TypeRef("System.Object"), 
      Name: "ProtoBuf.Meta.RuntimeTypeModel+BasicType", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm14.TypeRef("System.Type"), $asm0E.TypeRef("ProtoBuf.Serializers.IProtoSerializer")]), 
      BasicType__ctor
    );

    $.Method({Static:false, Public:true }, "get_Serializer", 
      JSIL.MethodSignature.Return($asm0E.TypeRef("ProtoBuf.Serializers.IProtoSerializer")), 
      BasicType_get_Serializer
    );

    $.Method({Static:false, Public:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm14.TypeRef("System.Type")), 
      BasicType_get_Type
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "type", $asm14.TypeRef("System.Type"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "serializer", $asm0E.TypeRef("ProtoBuf.Serializers.IProtoSerializer"));

    $.Property({Static:false, Public:true }, "Type", $asm14.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "Serializer", $asm0E.TypeRef("ProtoBuf.Serializers.IProtoSerializer"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ProtoBuf.Meta.LockContentedEventArgs */ 

(function LockContentedEventArgs$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm14.System.String)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm14.System.EventArgs)) ();
  };


  function LockContentedEventArgs__ctor (ownerStackTrace) {
    $T01().prototype._ctor.call(this);
    this.ownerStackTrace = ownerStackTrace;
  }; 

  function LockContentedEventArgs_get_OwnerStackTrace () {
    return this.ownerStackTrace;
  }; 

  JSIL.MakeType({
      BaseType: $asm14.TypeRef("System.EventArgs"), 
      Name: "ProtoBuf.Meta.LockContentedEventArgs", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.String), 
      LockContentedEventArgs__ctor
    );

    $.Method({Static:false, Public:true }, "get_OwnerStackTrace", 
      JSIL.MethodSignature.Return($.String), 
      LockContentedEventArgs_get_OwnerStackTrace
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "ownerStackTrace", $.String);

    $.Property({Static:false, Public:true }, "OwnerStackTrace", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate ProtoBuf.Meta.LockContentedEventHandler */ 

JSIL.MakeDelegate("ProtoBuf.Meta.LockContentedEventHandler", true, [], 
  new JSIL.MethodSignature(null, [$asm14.TypeRef("System.Object"), $asm0E.TypeRef("ProtoBuf.Meta.LockContentedEventArgs")]));

/* class ProtoBuf.Meta.SubType */ 

(function SubType$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm14.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0E.ProtoBuf.Meta.MetaType)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0E.ProtoBuf.DataFormat)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm14.System.ArgumentNullException)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm14.System.ArgumentOutOfRangeException)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm0E.ProtoBuf.WireType)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm0E.ProtoBuf.Serializers.IProtoSerializer)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm0E.ProtoBuf.Serializers.SubItemSerializer)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm0E.ProtoBuf.Serializers.TagDecorator)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm14.TypeRef("System.ArgumentNullException"), [$asm14.TypeRef("System.String")]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm14.TypeRef("System.ArgumentOutOfRangeException"), [$asm14.TypeRef("System.String")]))) ();
  };


  function SubType__ctor (fieldNumber, derivedType, format) {
    if (derivedType === null) {
      throw $S00().Construct("derivedType");
    }
    if ((fieldNumber | 0) <= 0) {
      throw $S01().Construct("fieldNumber");
    }
    this.fieldNumber = (fieldNumber | 0);
    this.derivedType = derivedType;
    this.dataFormat = format;
  }; 

  function SubType_BuildSerializer () {
    var wireType = $T05().String;
    if (this.dataFormat === $T02().Group) {
      wireType = $T05().StartGroup;
    }
    var ser = new ($T07())((this.derivedType).get_Type(), (this.derivedType).GetKey(false, false), this.derivedType, false);
    return new ($T08())(this.fieldNumber, wireType, false, ser);
  }; 

  function SubType_get_DerivedType () {
    return this.derivedType;
  }; 

  function SubType_get_FieldNumber () {
    return this.fieldNumber;
  }; 

  function SubType_get_Serializer () {
    if (this.serializer === null) {
      this.serializer = this.BuildSerializer();
    }
    return this.serializer;
  }; 

  JSIL.MakeType({
      BaseType: $asm14.TypeRef("System.Object"), 
      Name: "ProtoBuf.Meta.SubType", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $asm0E.TypeRef("ProtoBuf.Meta.MetaType"), 
          $asm0E.TypeRef("ProtoBuf.DataFormat")
        ]), 
      SubType__ctor
    );

    $.Method({Static:false, Public:false}, "BuildSerializer", 
      JSIL.MethodSignature.Return($asm0E.TypeRef("ProtoBuf.Serializers.IProtoSerializer")), 
      SubType_BuildSerializer
    );

    $.Method({Static:false, Public:true }, "get_DerivedType", 
      JSIL.MethodSignature.Return($asm0E.TypeRef("ProtoBuf.Meta.MetaType")), 
      SubType_get_DerivedType
    );

    $.Method({Static:false, Public:true }, "get_FieldNumber", 
      JSIL.MethodSignature.Return($.Int32), 
      SubType_get_FieldNumber
    );

    $.Method({Static:false, Public:false}, "get_Serializer", 
      JSIL.MethodSignature.Return($asm0E.TypeRef("ProtoBuf.Serializers.IProtoSerializer")), 
      SubType_get_Serializer
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "fieldNumber", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "derivedType", $asm0E.TypeRef("ProtoBuf.Meta.MetaType"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "dataFormat", $asm0E.TypeRef("ProtoBuf.DataFormat"));

    $.Field({Static:false, Public:false}, "serializer", $asm0E.TypeRef("ProtoBuf.Serializers.IProtoSerializer"));

    $.Property({Static:false, Public:true }, "FieldNumber", $.Int32);

    $.Property({Static:false, Public:true }, "DerivedType", $asm0E.TypeRef("ProtoBuf.Meta.MetaType"));

    $.Property({Static:false, Public:false}, "Serializer", $asm0E.TypeRef("ProtoBuf.Serializers.IProtoSerializer"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ProtoBuf.Meta.SubType+Comparer */ 

(function Comparer$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm14.System.Object)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0E.ProtoBuf.Meta.SubType)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm14.System.Int32)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature($asm14.TypeRef("System.Int32"), [$asm0E.TypeRef("ProtoBuf.Meta.SubType"), $asm0E.TypeRef("ProtoBuf.Meta.SubType")]))) ();
  };


  function Comparer__ctor () {
  }; 

  function Comparer_Compare$00 (x, y) {
    return $S00().CallVirtual("Compare", null, this, $T01().$As(x), $T01().$As(y));
  }; 

  function Comparer_Compare$01 (x, y) {
    if (x === y) {
      var result = 0;
    } else {
      if (x === null) {
        result = -1;
      } else {
        if (y === null) {
          result = 1;
        } else {
          result = (JSIL.CompareValues(x.get_FieldNumber(), y.get_FieldNumber()));
        }
      }
    }
    return result;
  }; 

  JSIL.MakeType({
      BaseType: $asm14.TypeRef("System.Object"), 
      Name: "ProtoBuf.Meta.SubType+Comparer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      Comparer__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.Object, $.Object]), 
      Comparer_Compare$00
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$asm0E.TypeRef("ProtoBuf.Meta.SubType"), $asm0E.TypeRef("ProtoBuf.Meta.SubType")]), 
      Comparer_Compare$01
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "Default", $.Type);


    function Comparer__cctor () {
      $thisType.Default = new $thisType();
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      Comparer__cctor
    );

    $.ImplementInterfaces(
      /* 0 */ $asm14.TypeRef("System.Collections.IComparer"), 
      /* 1 */ $asm14.TypeRef("System.Collections.Generic.IComparer`1", [$asm0E.TypeRef("ProtoBuf.Meta.SubType")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ProtoBuf.Meta.TypeFormatEventArgs */ 

(function TypeFormatEventArgs$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm14.System.String)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm14.System.EventArgs)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0E.ProtoBuf.Helpers)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm14.System.ArgumentNullException)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm14.System.Type)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm14.System.Boolean)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm14.System.InvalidOperationException)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm14.TypeRef("System.ArgumentNullException"), [$asm14.TypeRef("System.String")]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm14.TypeRef("System.InvalidOperationException"), [$asm14.TypeRef("System.String")]))) ();
  };


  function TypeFormatEventArgs__ctor$00 (formattedName) {
    $T01().prototype._ctor.call(this);
    if ($T02().IsNullOrEmpty(formattedName)) {
      throw $S00().Construct("formattedName");
    }
    this.formattedName = formattedName;
  }; 

  function TypeFormatEventArgs__ctor$01 (type) {
    $T01().prototype._ctor.call(this);
    if (type === null) {
      throw $S00().Construct("type");
    }
    this.type = type;
    this.typeFixed = true;
  }; 

  function TypeFormatEventArgs_get_FormattedName () {
    return this.formattedName;
  }; 

  function TypeFormatEventArgs_get_Type () {
    return this.type;
  }; 

  function TypeFormatEventArgs_set_FormattedName (value) {
    var flag = (this.formattedName != value);
    if (flag) {
      if (!this.typeFixed) {
        throw $S01().Construct("The formatted-name is fixed and cannot be changed");
      }
      this.formattedName = value;
    }
  }; 

  function TypeFormatEventArgs_set_Type (value) {
    var flag = this.type !== value;
    if (flag) {
      if (this.typeFixed) {
        throw $S01().Construct("The type is fixed and cannot be changed");
      }
      this.type = value;
    }
  }; 

  JSIL.MakeType({
      BaseType: $asm14.TypeRef("System.EventArgs"), 
      Name: "ProtoBuf.Meta.TypeFormatEventArgs", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.String), 
      TypeFormatEventArgs__ctor$00
    );

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm14.TypeRef("System.Type")), 
      TypeFormatEventArgs__ctor$01
    );

    $.Method({Static:false, Public:true }, "get_FormattedName", 
      JSIL.MethodSignature.Return($.String), 
      TypeFormatEventArgs_get_FormattedName
    );

    $.Method({Static:false, Public:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm14.TypeRef("System.Type")), 
      TypeFormatEventArgs_get_Type
    );

    $.Method({Static:false, Public:true }, "set_FormattedName", 
      JSIL.MethodSignature.Action($.String), 
      TypeFormatEventArgs_set_FormattedName
    );

    $.Method({Static:false, Public:true }, "set_Type", 
      JSIL.MethodSignature.Action($asm14.TypeRef("System.Type")), 
      TypeFormatEventArgs_set_Type
    );

    $.Field({Static:false, Public:false}, "type", $asm14.TypeRef("System.Type"));

    $.Field({Static:false, Public:false}, "formattedName", $.String);

    $.Field({Static:false, Public:false, ReadOnly:true }, "typeFixed", $.Boolean);

    $.Property({Static:false, Public:true }, "Type", $asm14.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "FormattedName", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate ProtoBuf.Meta.TypeFormatEventHandler */ 

JSIL.MakeDelegate("ProtoBuf.Meta.TypeFormatEventHandler", true, [], 
  new JSIL.MethodSignature(null, [$asm14.TypeRef("System.Object"), $asm0E.TypeRef("ProtoBuf.Meta.TypeFormatEventArgs")]));

/* class ProtoBuf.Meta.ValueMember */ 

(function ValueMember$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0E.ProtoBuf.Meta.RuntimeTypeModel)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm14.System.Type)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm14.System.Int32)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm14.System.Reflection.MemberInfo)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm0E.ProtoBuf.DataFormat)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm14.System.Object)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm14.System.ArgumentNullException)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm0E.ProtoBuf.Helpers)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm14.System.ArgumentOutOfRangeException)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm14.System.Boolean)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm0E.ProtoBuf.Meta.TypeModel)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm0E.ProtoBuf.Meta.MetaType)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm0E.ProtoBuf.WireType)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm0E.ProtoBuf.Serializers.IProtoSerializer)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm14.System.InvalidOperationException)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm14.System.String)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm14.System.NotSupportedException)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm0E.ProtoBuf.Serializers.TagDecorator)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm0E.ProtoBuf.Serializers.NullDecorator)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm0E.ProtoBuf.Serializers.ArrayDecorator)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm0E.ProtoBuf.Serializers.ListDecorator)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm0E.ProtoBuf.Serializers.PropertyDecorator)) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm0E.ProtoBuf.Serializers.DefaultValueDecorator)) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm0F.System.Uri)) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize($asm0E.ProtoBuf.Serializers.UriDecorator)) ();
  };
  var $T19 = function () {
    return ($T19 = JSIL.Memoize($asm14.System.Reflection.PropertyInfo)) ();
  };
  var $T1A = function () {
    return ($T1A = JSIL.Memoize($asm14.System.Reflection.FieldInfo)) ();
  };
  var $T1B = function () {
    return ($T1B = JSIL.Memoize($asm0E.ProtoBuf.Serializers.FieldDecorator)) ();
  };
  var $T1C = function () {
    return ($T1C = JSIL.Memoize($asm14.System.Reflection.MethodInfo)) ();
  };
  var $T1D = function () {
    return ($T1D = JSIL.Memoize($asm0E.ProtoBuf.Serializers.MemberSpecifiedDecorator)) ();
  };
  var $T1E = function () {
    return ($T1E = JSIL.Memoize($asm14.System.Enum)) ();
  };
  var $T1F = function () {
    return ($T1F = JSIL.Memoize($asm14.System.SByte)) ();
  };
  var $T20 = function () {
    return ($T20 = JSIL.Memoize($asm14.System.Byte)) ();
  };
  var $T21 = function () {
    return ($T21 = JSIL.Memoize($asm14.System.Int16)) ();
  };
  var $T22 = function () {
    return ($T22 = JSIL.Memoize($asm14.System.UInt16)) ();
  };
  var $T23 = function () {
    return ($T23 = JSIL.Memoize($asm14.System.UInt32)) ();
  };
  var $T24 = function () {
    return ($T24 = JSIL.Memoize($asm14.System.Int64)) ();
  };
  var $T25 = function () {
    return ($T25 = JSIL.Memoize($asm14.System.UInt64)) ();
  };
  var $T26 = function () {
    return ($T26 = JSIL.Memoize($asm0E.ProtoBuf.ProtoTypeCode)) ();
  };
  var $T27 = function () {
    return ($T27 = JSIL.Memoize($asm14.System.Char)) ();
  };
  var $T28 = function () {
    return ($T28 = JSIL.Memoize($asm14.System.FormatException)) ();
  };
  var $T29 = function () {
    return ($T29 = JSIL.Memoize($asm14.System.Globalization.NumberStyles)) ();
  };
  var $T2A = function () {
    return ($T2A = JSIL.Memoize($asm14.System.Globalization.CultureInfo)) ();
  };
  var $T2B = function () {
    return ($T2B = JSIL.Memoize($asm14.System.Single)) ();
  };
  var $T2C = function () {
    return ($T2C = JSIL.Memoize($asm14.System.Double)) ();
  };
  var $T2D = function () {
    return ($T2D = JSIL.Memoize($asm14.System.Decimal)) ();
  };
  var $T2E = function () {
    return ($T2E = JSIL.Memoize($asm14.System.DateTime)) ();
  };
  var $T2F = function () {
    return ($T2F = JSIL.Memoize($asm14.System.TimeSpan)) ();
  };
  var $T30 = function () {
    return ($T30 = JSIL.Memoize($asm14.System.Guid)) ();
  };
  var $T31 = function () {
    return ($T31 = JSIL.Memoize($asm14.System.Convert)) ();
  };
  var $T32 = function () {
    return ($T32 = JSIL.Memoize(System.Array.Of($asm14.System.Reflection.ParameterInfo))) ();
  };
  var $T33 = function () {
    return ($T33 = JSIL.Memoize($asm14.System.Reflection.MethodBase)) ();
  };
  var $T34 = function () {
    return ($T34 = JSIL.Memoize($asm14.System.ArgumentException)) ();
  };
  var $T35 = function () {
    return ($T35 = JSIL.Memoize($asm14.System.Void)) ();
  };
  var $T36 = function () {
    return ($T36 = JSIL.Memoize($asm14.System.Reflection.ParameterInfo)) ();
  };
  var $T37 = function () {
    return ($T37 = JSIL.Memoize($asm0E.ProtoBuf.Serializers.EnumSerializer)) ();
  };
  var $T38 = function () {
    return ($T38 = JSIL.Memoize($asm0E.ProtoBuf.Serializers.BooleanSerializer)) ();
  };
  var $T39 = function () {
    return ($T39 = JSIL.Memoize($asm0E.ProtoBuf.Serializers.CharSerializer)) ();
  };
  var $T3A = function () {
    return ($T3A = JSIL.Memoize($asm0E.ProtoBuf.Serializers.SByteSerializer)) ();
  };
  var $T3B = function () {
    return ($T3B = JSIL.Memoize($asm0E.ProtoBuf.Serializers.ByteSerializer)) ();
  };
  var $T3C = function () {
    return ($T3C = JSIL.Memoize($asm0E.ProtoBuf.Serializers.Int16Serializer)) ();
  };
  var $T3D = function () {
    return ($T3D = JSIL.Memoize($asm0E.ProtoBuf.Serializers.UInt16Serializer)) ();
  };
  var $T3E = function () {
    return ($T3E = JSIL.Memoize($asm0E.ProtoBuf.Serializers.Int32Serializer)) ();
  };
  var $T3F = function () {
    return ($T3F = JSIL.Memoize($asm0E.ProtoBuf.Serializers.UInt32Serializer)) ();
  };
  var $T40 = function () {
    return ($T40 = JSIL.Memoize($asm0E.ProtoBuf.Serializers.Int64Serializer)) ();
  };
  var $T41 = function () {
    return ($T41 = JSIL.Memoize($asm0E.ProtoBuf.Serializers.UInt64Serializer)) ();
  };
  var $T42 = function () {
    return ($T42 = JSIL.Memoize($asm0E.ProtoBuf.Serializers.SingleSerializer)) ();
  };
  var $T43 = function () {
    return ($T43 = JSIL.Memoize($asm0E.ProtoBuf.Serializers.DoubleSerializer)) ();
  };
  var $T44 = function () {
    return ($T44 = JSIL.Memoize($asm0E.ProtoBuf.Serializers.DecimalSerializer)) ();
  };
  var $T45 = function () {
    return ($T45 = JSIL.Memoize($asm0E.ProtoBuf.Serializers.DateTimeSerializer)) ();
  };
  var $T46 = function () {
    return ($T46 = JSIL.Memoize($asm0E.ProtoBuf.Serializers.NetObjectSerializer)) ();
  };
  var $T47 = function () {
    return ($T47 = JSIL.Memoize($asm0E.ProtoBuf.BclHelpers_NetObjectOptions)) ();
  };
  var $T48 = function () {
    return ($T48 = JSIL.Memoize($asm0E.ProtoBuf.Serializers.StringSerializer)) ();
  };
  var $T49 = function () {
    return ($T49 = JSIL.Memoize($asm0E.ProtoBuf.Serializers.TimeSpanSerializer)) ();
  };
  var $T4A = function () {
    return ($T4A = JSIL.Memoize($asm0E.ProtoBuf.Serializers.BlobSerializer)) ();
  };
  var $T4B = function () {
    return ($T4B = JSIL.Memoize($asm0E.ProtoBuf.Serializers.GuidSerializer)) ();
  };
  var $T4C = function () {
    return ($T4C = JSIL.Memoize($asm0E.ProtoBuf.Serializers.SystemTypeSerializer)) ();
  };
  var $T4D = function () {
    return ($T4D = JSIL.Memoize($asm0E.ProtoBuf.Serializers.ParseableSerializer)) ();
  };
  var $T4E = function () {
    return ($T4E = JSIL.Memoize($asm0E.ProtoBuf.Serializers.SubItemSerializer)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm14.TypeRef("System.ArgumentNullException"), [$asm14.TypeRef("System.String")]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm14.TypeRef("System.ArgumentOutOfRangeException"), [$asm14.TypeRef("System.String")]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm14.TypeRef("System.InvalidOperationException"), [$asm14.TypeRef("System.String")]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm14.TypeRef("System.NotSupportedException"), [$asm14.TypeRef("System.String")]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.ConstructorSignature($asm14.TypeRef("System.InvalidOperationException"), null))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.ConstructorSignature($asm14.TypeRef("System.FormatException"), [$asm14.TypeRef("System.String")]))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(new JSIL.MethodSignature($asm14.TypeRef("System.SByte"), [
        $asm14.TypeRef("System.String"), $asm14.TypeRef("System.Globalization.NumberStyles"), 
        $asm14.TypeRef("System.IFormatProvider")
      ]))) ();
  };
  var $S07 = function () {
    return ($S07 = JSIL.Memoize(new JSIL.MethodSignature($asm14.TypeRef("System.Byte"), [
        $asm14.TypeRef("System.String"), $asm14.TypeRef("System.Globalization.NumberStyles"), 
        $asm14.TypeRef("System.IFormatProvider")
      ]))) ();
  };
  var $S08 = function () {
    return ($S08 = JSIL.Memoize(new JSIL.MethodSignature($asm14.TypeRef("System.Int16"), [
        $asm14.TypeRef("System.String"), $asm14.TypeRef("System.Globalization.NumberStyles"), 
        $asm14.TypeRef("System.IFormatProvider")
      ]))) ();
  };
  var $S09 = function () {
    return ($S09 = JSIL.Memoize(new JSIL.MethodSignature($asm14.TypeRef("System.UInt16"), [
        $asm14.TypeRef("System.String"), $asm14.TypeRef("System.Globalization.NumberStyles"), 
        $asm14.TypeRef("System.IFormatProvider")
      ]))) ();
  };
  var $S0A = function () {
    return ($S0A = JSIL.Memoize(new JSIL.MethodSignature($asm14.TypeRef("System.Single"), [
        $asm14.TypeRef("System.String"), $asm14.TypeRef("System.Globalization.NumberStyles"), 
        $asm14.TypeRef("System.IFormatProvider")
      ]))) ();
  };
  var $S0B = function () {
    return ($S0B = JSIL.Memoize(new JSIL.MethodSignature($asm14.TypeRef("System.Double"), [
        $asm14.TypeRef("System.String"), $asm14.TypeRef("System.Globalization.NumberStyles"), 
        $asm14.TypeRef("System.IFormatProvider")
      ]))) ();
  };
  var $S0C = function () {
    return ($S0C = JSIL.Memoize(new JSIL.ConstructorSignature($asm14.TypeRef("System.Guid"), [$asm14.TypeRef("System.String")]))) ();
  };
  var $S0D = function () {
    return ($S0D = JSIL.Memoize(new JSIL.MethodSignature($asm14.TypeRef("System.Object"), [$asm14.TypeRef("System.Type"), $asm14.TypeRef("System.Object")]))) ();
  };
  var $S0E = function () {
    return ($S0E = JSIL.Memoize(new JSIL.MethodSignature($asm14.TypeRef("System.Object"), [
        $asm14.TypeRef("System.Object"), $asm14.TypeRef("System.Type"), 
        $asm14.TypeRef("System.IFormatProvider")
      ]))) ();
  };
  var $S0F = function () {
    return ($S0F = JSIL.Memoize(new JSIL.ConstructorSignature($asm14.TypeRef("System.ArgumentException"), [$asm14.TypeRef("System.String"), $asm14.TypeRef("System.String")]))) ();
  };


  function ValueMember__ctor$00 (model, parentType, fieldNumber, member, memberType, itemType, defaultType, dataFormat, defaultValue) {
    $thisType.prototype._ctor.call(this, 
      model, 
      fieldNumber, 
      memberType, 
      itemType, 
      defaultType, 
      dataFormat
    );
    if (member === null) {
      throw $S00().Construct("member");
    }
    if (parentType === null) {
      throw $S00().Construct("parentType");
    }
    if (((fieldNumber | 0) < 1) && !$T07().IsEnum(parentType)) {
      throw $S01().Construct("fieldNumber");
    }
    this.member = member;
    this.parentType = parentType;
    if (((fieldNumber | 0) < 1) && !$T07().IsEnum(parentType)) {
      throw $S01().Construct("fieldNumber");
    }
    var flag5 = (defaultValue !== null) && 
    (model.MapType(JSIL.GetType(defaultValue)) !== memberType);
    if (flag5) {
      defaultValue = $thisType.ParseDefaultValue(memberType, defaultValue);
    }
    this.defaultValue = defaultValue;
    var type = model.FindWithoutAdd(memberType);
    if (type !== null) {
      this.asReference = type.get_AsReferenceDefault();
    } else {
      this.asReference = $T0B().GetAsReferenceDefault(model, memberType);
    }
  }; 

  function ValueMember__ctor$01 (model, fieldNumber, memberType, itemType, defaultType, dataFormat) {
    if (memberType === null) {
      throw $S00().Construct("memberType");
    }
    if (model === null) {
      throw $S00().Construct("model");
    }
    this.fieldNumber = (fieldNumber | 0);
    this.memberType = memberType;
    this.itemType = itemType;
    this.defaultType = defaultType;
    this.model = model;
    this.dataFormat = dataFormat;
  }; 

  function ValueMember_BuildSerializer () {
    var wireType = new JSIL.BoxedVariable($asm0E.ProtoBuf.WireType.Variant);
    var opaqueToken = new JSIL.BoxedVariable(0);
    try {
      (this.model).TakeLock(/* ref */ opaqueToken);
      var finalType = (
        (this.itemType === null)
           ? this.memberType
           : this.itemType)
      ;
      var ser = $thisType.TryGetCoreSerializer(
        this.model, 
        this.dataFormat, 
        finalType, 
        /* ref */ wireType, 
        this.asReference, 
        this.dynamicType, 
        this.get_OverwriteList(), 
        true
      );
      var flag = ser === null;
      if (flag) {
        throw $S02().Construct(JSIL.ConcatString("No serializer defined for type: ", finalType.get_FullName()));
      }
      var flag2 = (this.itemType !== null) && 
      this.get_SupportNull();
      if (flag2) {
        var isPacked = this.get_IsPacked();
        if (isPacked) {
          throw $S03().Construct("Packed encodings cannot support null values");
        }
        ser = new ($T11())(1, wireType.get(), this.get_IsStrict(), ser);
        ser = new ($T12())(this.model, ser);
        ser = new ($T11())(this.fieldNumber, $T0C().StartGroup, false, ser);
      } else {
        ser = new ($T11())(this.fieldNumber, wireType.get(), this.get_IsStrict(), ser);
      }
      if (this.itemType !== null) {
        var arg_11E_0 = (
          this.get_SupportNull()
             ? this.itemType
             : JSIL.Coalesce($T07().GetUnderlyingType(this.itemType), this.itemType))
        ;
        var isArray = (this.memberType).get_IsArray();
        if (isArray) {
          ser = new ($T13())(this.model, ser, this.fieldNumber, this.get_IsPacked(), wireType.get(), this.memberType, this.get_OverwriteList(), this.get_SupportNull());
        } else {
          ser = $T14().Create(
            this.model, 
            this.memberType, 
            this.defaultType, 
            ser, 
            this.fieldNumber, 
            this.get_IsPacked(), 
            wireType.get(), 
            (this.member !== null) && 
            $T15().CanWrite(this.model, this.member), 
            this.get_OverwriteList(), 
            this.get_SupportNull()
          );
        }
      } else {
        var flag4 = !((this.defaultValue === null) || 
          this.get_IsRequired()) && 
        (this.getSpecified === null);
        if (flag4) {
          ser = new ($T16())(this.model, this.defaultValue, ser);
        }
      }
      if (this.memberType === (this.model).MapType($T17().__Type__)) {
        ser = new ($T18())(this.model, ser);
      }
      if (this.member !== null) {
        if ($T19().$As(this.member) !== null) {
          ser = new ($T15())(this.model, this.parentType, $T19().$Cast(this.member), ser);
        } else {
          if ($T1A().$As(this.member) === null) {
            throw $S04().Construct();
          }
          ser = new ($T1B())(this.parentType, $T1A().$Cast(this.member), ser);
        }
        if ((this.getSpecified !== null) || (this.setSpecified !== null)) {
          ser = new ($T1D())(this.getSpecified, this.setSpecified, ser);
        }
      }
      var result = ser;
    } finally {
      (this.model).ReleaseLock(opaqueToken.get());
    }
    return result;
  }; 

  function ValueMember_get_AsReference () {
    return this.asReference;
  }; 

  function ValueMember_get_DataFormat () {
    return this.dataFormat;
  }; 

  function ValueMember_get_DefaultType () {
    return this.defaultType;
  }; 

  function ValueMember_get_DefaultValue () {
    return this.defaultValue;
  }; 

  function ValueMember_get_DynamicType () {
    return this.dynamicType;
  }; 

  function ValueMember_get_FieldNumber () {
    return this.fieldNumber;
  }; 

  function ValueMember_get_IsPacked () {
    return this.HasFlag(2);
  }; 

  function ValueMember_get_IsRequired () {
    return this.HasFlag(4);
  }; 

  function ValueMember_get_IsStrict () {
    return this.HasFlag(1);
  }; 

  function ValueMember_get_ItemType () {
    return this.itemType;
  }; 

  function ValueMember_get_Member () {
    return this.member;
  }; 

  function ValueMember_get_MemberType () {
    return this.memberType;
  }; 

  function ValueMember_get_Name () {
    return (
      $T07().IsNullOrEmpty(this.$name)
         ? (this.member).get_Name()
         : this.$name)
    ;
  }; 

  function ValueMember_get_OverwriteList () {
    return this.HasFlag(8);
  }; 

  function ValueMember_get_ParentType () {
    return this.parentType;
  }; 

  function ValueMember_get_Serializer () {
    if (this.serializer === null) {
      this.serializer = this.BuildSerializer();
    }
    return this.serializer;
  }; 

  function ValueMember_get_SupportNull () {
    return this.HasFlag(16);
  }; 

  function ValueMember_GetDateTimeWireType (format) {
    switch (format.valueOf()) {
      case 0: 
        var result = $T0C().String;
        return result;

      case 3: 
        result = $T0C().Fixed64;
        return result;

      case 4: 
        result = $T0C().StartGroup;
        return result;

    }
    throw $S04().Construct();
  }; 

  function ValueMember_GetIntWireType (format, width) {
    switch (format.valueOf()) {
      case 0: 
      case 2: 
        var result = $T0C().Variant;
        break;

      case 1: 
        result = $T0C().SignedVariant;
        break;

      case 3: 
        result = (
          ((width | 0) === 32)
             ? $T0C().Fixed32
             : $T0C().Fixed64)
        ;
        break;

      default: 
        throw $S04().Construct();

    }
    return result;
  }; 

  function ValueMember_GetRawEnumValue () {
    var value = ($T1A().$Cast(this.member)).GetValue(null);
    switch (($T07().GetTypeCode($T1E().GetUnderlyingType(($T1A().$Cast(this.member)).get_FieldType()))).valueOf()) {
      case 5: 
        var result = $T1F().$Cast(value);
        break;

      case 6: 
        result = $T20().$Cast(value);
        break;

      case 7: 
        result = $T21().$Cast(value);
        break;

      case 8: 
        result = $T22().$Cast(value);
        break;

      case 9: 
        result = $T02().$Cast(value);
        break;

      case 10: 
        result = $T23().$Cast(value);
        break;

      case 11: 
        result = $T24().$Cast(value);
        break;

      case 12: 
        result = $T25().$Cast(value);
        break;

      default: 
        throw $S04().Construct();

    }
    return result;
  }; 

  function ValueMember_GetSchemaTypeName (applyNetObjectProxy, /* ref */ requiresBclImport) {
    var effectiveType = this.get_ItemType();
    var flag = effectiveType === null;
    if (flag) {
      effectiveType = this.get_MemberType();
    }
    return (this.model).GetSchemaTypeName(
      effectiveType, 
      this.get_DataFormat(), 
      applyNetObjectProxy && this.asReference, 
      applyNetObjectProxy && this.dynamicType, 
      /* ref */ requiresBclImport
    );
  }; 

  function ValueMember_HasFlag (flag) {
    return (((this.flags | 0) & (flag | 0)) === (flag | 0));
  }; 

  function ValueMember_ParseDefaultValue (type, value) {
    var tmp = $T07().GetUnderlyingType(type);
    if (tmp !== null) {
      type = tmp;
    }
    var flag2 = $T0F().$Is(value);
    if (flag2) {
      var s = $T0F().$Cast(value);
      var flag3 = $T07().IsEnum(type);
      if (flag3) {
        var result = $T07().ParseEnum(type, s);
        return result;
      }
      var typeCode = $T07().GetTypeCode(type);
      switch (typeCode.valueOf()) {
        case 3: 
          result = $T09().$Box($T09().Parse(s));
          return result;

        case 4: 
          var flag4 = (s.length | 0) === 1;
          if (flag4) {
            result = $T27().$Box(s[0]);
            return result;
          }
          throw $S05().Construct(("Single character expected: \"" + s + "\""));

        case 5: 
          result = $T1F().$Box($S06().CallStatic($T1F(), "Parse", null, s, $T29().Integer, $T2A().get_InvariantCulture()));
          return result;

        case 6: 
          result = $T20().$Box($S07().CallStatic($T20(), "Parse", null, s, $T29().Integer, $T2A().get_InvariantCulture()));
          return result;

        case 7: 
          result = $T21().$Box($S08().CallStatic($T21(), "Parse", null, s, $T29().Any, $T2A().get_InvariantCulture()));
          return result;

        case 8: 
          result = $T22().$Box($S09().CallStatic($T22(), "Parse", null, s, $T29().Any, $T2A().get_InvariantCulture()));
          return result;

        case 9: 
          result = $T02().$Box($T02().Parse(s, $T29().Any, $T2A().get_InvariantCulture()));
          return result;

        case 10: 
          result = $T23().$Box($T23().Parse(s, $T29().Any, $T2A().get_InvariantCulture()));
          return result;

        case 11: 
          result = $T24().Parse(s, $T29().Any, $T2A().get_InvariantCulture());
          return result;

        case 12: 
          result = $T25().Parse(s, $T29().Any, $T2A().get_InvariantCulture());
          return result;

        case 13: 
          result = $T2B().$Box($S0A().CallStatic($T2B(), "Parse", null, s, $T29().Any, $T2A().get_InvariantCulture()));
          return result;

        case 14: 
          result = $T2C().$Box($S0B().CallStatic($T2C(), "Parse", null, s, $T29().Any, $T2A().get_InvariantCulture()));
          return result;

        case 15: 
          result = $T2D().Parse(s, $T29().Any, $T2A().get_InvariantCulture());
          return result;

        case 16: 
          result = $T2E().Parse(s, $T2A().get_InvariantCulture()).MemberwiseClone();
          return result;

        case 17: 
          break;

        case 18: 
          result = s;
          return result;

        default: 
          switch (typeCode.valueOf()) {
            case 100: 
              result = $T2F().Parse(s).MemberwiseClone();
              return result;

            case 102: 
              result = $S0C().Construct(s);
              return result;

            case 103: 
              result = s;
              return result;

          }
          break;

      }
    }
    var flag5 = $T07().IsEnum(type);
    if (flag5) {
      result = $S0D().CallStatic($T1E(), "ToObject", null, type, value);
    } else {
      result = $S0E().CallStatic($T31(), "ChangeType", null, value, type, $T2A().get_InvariantCulture());
    }
    return result;
  }; 

  function ValueMember_set_AsReference (value) {
    this.ThrowIfFrozen();
    this.asReference = value;
  }; 

  function ValueMember_set_DataFormat (value) {
    this.ThrowIfFrozen();
    this.dataFormat = value;
  }; 

  function ValueMember_set_DefaultValue (value) {
    this.ThrowIfFrozen();
    this.defaultValue = value;
  }; 

  function ValueMember_set_DynamicType (value) {
    this.ThrowIfFrozen();
    this.dynamicType = value;
  }; 

  function ValueMember_set_IsPacked (value) {
    this.SetFlag(2, value, true);
  }; 

  function ValueMember_set_IsRequired (value) {
    this.SetFlag(4, value, true);
  }; 

  function ValueMember_set_IsStrict (value) {
    this.SetFlag(1, value, true);
  }; 

  function ValueMember_set_OverwriteList (value) {
    this.SetFlag(8, value, true);
  }; 

  function ValueMember_set_SupportNull (value) {
    this.SetFlag(16, value, true);
  }; 

  function ValueMember_SetFlag (flag, value, throwIfFrozen) {
    if (throwIfFrozen && (this.HasFlag(flag) !== value)) {
      this.ThrowIfFrozen();
    }
    if (value) {
      this.flags = (this.flags | 0) | (flag | 0);
    } else {
      this.flags = (this.flags | 0) & (~flag & 0xFF);
    }
  }; 

  function ValueMember_SetName (name) {
    this.ThrowIfFrozen();
    this.$name = name;
  }; 

  function ValueMember_SetSpecified (getSpecified, setSpecified) {
    var args = null;
    var flag = getSpecified !== null;
    if (flag) {
      var flag2 = (getSpecified.get_ReturnType() !== (this.model).MapType($T09().__Type__)) || 
      getSpecified.get_IsStatic() || 
      ((getSpecified.GetParameters().length | 0) > 0);
      if (flag2) {
        throw $S0F().Construct("Invalid pattern for checking member-specified", "getSpecified");
      }
    }
    var flag3 = setSpecified !== null;
    if (flag3) {
      var flag4 = (setSpecified.get_ReturnType() !== (this.model).MapType($T35().__Type__)) || 
      setSpecified.get_IsStatic() || 
      (((args = setSpecified.GetParameters()).length | 0) !== 1) || 
      ((args[0]).get_ParameterType() !== (this.model).MapType($T09().__Type__));
      if (flag4) {
        throw $S0F().Construct("Invalid pattern for setting member-specified", "setSpecified");
      }
    }
    this.ThrowIfFrozen();
    this.getSpecified = getSpecified;
    this.setSpecified = setSpecified;
  }; 

  function ValueMember_ThrowIfFrozen () {
    if (this.serializer !== null) {
      throw $S02().Construct("The type cannot be changed once a serializer has been generated");
    }
  }; 

  function ValueMember_TryGetCoreSerializer (model, dataFormat, type, /* ref */ defaultWireType, asReference, dynamicType, overwriteList, allowComplexTypes) {
    var tmp = $T07().GetUnderlyingType(type);
    if (tmp !== null) {
      type = tmp;
    }
    var flag2 = $T07().IsEnum(type);
    if (flag2) {
      var flag3 = allowComplexTypes && 
      (model !== null);
      if (flag3) {
        defaultWireType.set($T0C().Variant);
        var result = new ($T37())(type, model.GetEnumMap(type));
      } else {
        defaultWireType.set($T0C().None);
        result = null;
      }
    } else {
      var code = $T07().GetTypeCode(type);
      var protoTypeCode = code;
      switch (protoTypeCode.valueOf()) {
        case 3: 
          defaultWireType.set($T0C().Variant);
          result = new ($T38())(model);
          return result;

        case 4: 
          defaultWireType.set($T0C().Variant);
          result = new ($T39())(model);
          return result;

        case 5: 
          defaultWireType.set($thisType.GetIntWireType(dataFormat, 32));
          result = new ($T3A())(model);
          return result;

        case 6: 
          defaultWireType.set($thisType.GetIntWireType(dataFormat, 32));
          result = new ($T3B())(model);
          return result;

        case 7: 
          defaultWireType.set($thisType.GetIntWireType(dataFormat, 32));
          result = new ($T3C())(model);
          return result;

        case 8: 
          defaultWireType.set($thisType.GetIntWireType(dataFormat, 32));
          result = new ($T3D())(model);
          return result;

        case 9: 
          defaultWireType.set($thisType.GetIntWireType(dataFormat, 32));
          result = new ($T3E())(model);
          return result;

        case 10: 
          defaultWireType.set($thisType.GetIntWireType(dataFormat, 32));
          result = new ($T3F())(model);
          return result;

        case 11: 
          defaultWireType.set($thisType.GetIntWireType(dataFormat, 64));
          result = new ($T40())(model);
          return result;

        case 12: 
          defaultWireType.set($thisType.GetIntWireType(dataFormat, 64));
          result = new ($T41())(model);
          return result;

        case 13: 
          defaultWireType.set($T0C().Fixed32);
          result = new ($T42())(model);
          return result;

        case 14: 
          defaultWireType.set($T0C().Fixed64);
          result = new ($T43())(model);
          return result;

        case 15: 
          defaultWireType.set($T0C().String);
          result = new ($T44())(model);
          return result;

        case 16: 
          defaultWireType.set($thisType.GetDateTimeWireType(dataFormat));
          result = new ($T45())(model);
          return result;

        case 17: 
          break;

        case 18: 
          defaultWireType.set($T0C().String);
          if (asReference) {
            result = new ($T46())(model, model.MapType($T0F().__Type__), 0, $T47().AsReference);
            return result;
          }
          result = new ($T48())(model);
          return result;

        default: 
          switch (protoTypeCode.valueOf()) {
            case 100: 
              defaultWireType.set($thisType.GetDateTimeWireType(dataFormat));
              result = new ($T49())(model);
              return result;

            case 101: 
              defaultWireType.set($T0C().String);
              result = new ($T4A())(model, overwriteList);
              return result;

            case 102: 
              defaultWireType.set($T0C().String);
              result = new ($T4B())(model);
              return result;

            case 103: 
              defaultWireType.set($T0C().String);
              result = new ($T48())(model);
              return result;

            case 104: 
              defaultWireType.set($T0C().String);
              result = new ($T4C())(model);
              return result;

          }
          break;

      }
      var parseable = (
        model.get_AllowParseableTypes()
           ? $T4D().TryCreate(type, model)
           : null)
      ;
      var flag4 = parseable !== null;
      if (flag4) {
        defaultWireType.set($T0C().String);
        result = parseable;
      } else {
        var flag5 = allowComplexTypes && 
        (model !== null);
        if (flag5) {
          var key = (model.GetKey(type, false, true) | 0);
          if (asReference | dynamicType) {
            defaultWireType.set((
                (dataFormat === $T04().Group)
                   ? $T0C().StartGroup
                   : $T0C().String)
            );
            var options = $T47().None;
            if (asReference) {
              options = $T47().$Cast(options | $T47().AsReference);
            }
            if (dynamicType) {
              options = $T47().$Cast(options | $T47().DynamicType);
            }
            if (key >= 0) {
              var flag8 = asReference && 
              $T07().IsValueType(type);
              if (flag8) {
                var message = "AsReference cannot be used with value-types";
                var flag9 = (type.get_Name() == "KeyValuePair`2");
                if (flag9) {
                  message = (JSIL.ConcatString(message, "; please see http://stackoverflow.com/q/14436606/"));
                } else {
                  message = ((message + ": " + type.get_FullName()));
                }
                throw $S02().Construct(message);
              }
              var meta = model.get_Item(type);
              var flag10 = asReference && 
              meta.get_IsAutoTuple();
              if (flag10) {
                options = $T47().$Cast(options | $T47().LateSet);
              }
              var useConstructor = meta.get_UseConstructor();
              if (useConstructor) {
                options = $T47().$Cast(options | $T47().UseConstructor);
              }
            }
            result = new ($T46())(model, type, key, options);
            return result;
          }
          if (key >= 0) {
            defaultWireType.set((
                (dataFormat === $T04().Group)
                   ? $T0C().StartGroup
                   : $T0C().String)
            );
            result = new ($T4E())(type, key, model.get_Item(type), true);
            return result;
          }
        }
        defaultWireType.set($T0C().None);
        result = null;
      }
    }
    return result;
  }; 

  JSIL.MakeType({
      BaseType: $asm14.TypeRef("System.Object"), 
      Name: "ProtoBuf.Meta.ValueMember", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 9, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0E.TypeRef("ProtoBuf.Meta.RuntimeTypeModel"), $asm14.TypeRef("System.Type"), 
          $.Int32, $asm14.TypeRef("System.Reflection.MemberInfo"), 
          $asm14.TypeRef("System.Type"), $asm14.TypeRef("System.Type"), 
          $asm14.TypeRef("System.Type"), $asm0E.TypeRef("ProtoBuf.DataFormat"), 
          $.Object
        ]), 
      ValueMember__ctor$00
    );

    $.Method({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0E.TypeRef("ProtoBuf.Meta.RuntimeTypeModel"), $.Int32, 
          $asm14.TypeRef("System.Type"), $asm14.TypeRef("System.Type"), 
          $asm14.TypeRef("System.Type"), $asm0E.TypeRef("ProtoBuf.DataFormat")
        ]), 
      ValueMember__ctor$01
    );

    $.Method({Static:false, Public:false}, "BuildSerializer", 
      JSIL.MethodSignature.Return($asm0E.TypeRef("ProtoBuf.Serializers.IProtoSerializer")), 
      ValueMember_BuildSerializer
    );

    $.Method({Static:false, Public:true }, "get_AsReference", 
      JSIL.MethodSignature.Return($.Boolean), 
      ValueMember_get_AsReference
    );

    $.Method({Static:false, Public:true }, "get_DataFormat", 
      JSIL.MethodSignature.Return($asm0E.TypeRef("ProtoBuf.DataFormat")), 
      ValueMember_get_DataFormat
    );

    $.Method({Static:false, Public:true }, "get_DefaultType", 
      JSIL.MethodSignature.Return($asm14.TypeRef("System.Type")), 
      ValueMember_get_DefaultType
    );

    $.Method({Static:false, Public:true }, "get_DefaultValue", 
      JSIL.MethodSignature.Return($.Object), 
      ValueMember_get_DefaultValue
    );

    $.Method({Static:false, Public:true }, "get_DynamicType", 
      JSIL.MethodSignature.Return($.Boolean), 
      ValueMember_get_DynamicType
    );

    $.Method({Static:false, Public:true }, "get_FieldNumber", 
      JSIL.MethodSignature.Return($.Int32), 
      ValueMember_get_FieldNumber
    );

    $.Method({Static:false, Public:true }, "get_IsPacked", 
      JSIL.MethodSignature.Return($.Boolean), 
      ValueMember_get_IsPacked
    );

    $.Method({Static:false, Public:true }, "get_IsRequired", 
      JSIL.MethodSignature.Return($.Boolean), 
      ValueMember_get_IsRequired
    );

    $.Method({Static:false, Public:true }, "get_IsStrict", 
      JSIL.MethodSignature.Return($.Boolean), 
      ValueMember_get_IsStrict
    );

    $.Method({Static:false, Public:true }, "get_ItemType", 
      JSIL.MethodSignature.Return($asm14.TypeRef("System.Type")), 
      ValueMember_get_ItemType
    );

    $.Method({Static:false, Public:true }, "get_Member", 
      JSIL.MethodSignature.Return($asm14.TypeRef("System.Reflection.MemberInfo")), 
      ValueMember_get_Member
    );

    $.Method({Static:false, Public:true }, "get_MemberType", 
      JSIL.MethodSignature.Return($asm14.TypeRef("System.Type")), 
      ValueMember_get_MemberType
    );

    $.Method({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String), 
      ValueMember_get_Name
    );

    $.Method({Static:false, Public:true }, "get_OverwriteList", 
      JSIL.MethodSignature.Return($.Boolean), 
      ValueMember_get_OverwriteList
    );

    $.Method({Static:false, Public:true }, "get_ParentType", 
      JSIL.MethodSignature.Return($asm14.TypeRef("System.Type")), 
      ValueMember_get_ParentType
    );

    $.Method({Static:false, Public:false}, "get_Serializer", 
      JSIL.MethodSignature.Return($asm0E.TypeRef("ProtoBuf.Serializers.IProtoSerializer")), 
      ValueMember_get_Serializer
    );

    $.Method({Static:false, Public:true }, "get_SupportNull", 
      JSIL.MethodSignature.Return($.Boolean), 
      ValueMember_get_SupportNull
    );

    $.Method({Static:true , Public:false}, "GetDateTimeWireType", 
      new JSIL.MethodSignature($asm0E.TypeRef("ProtoBuf.WireType"), [$asm0E.TypeRef("ProtoBuf.DataFormat")]), 
      ValueMember_GetDateTimeWireType
    );

    $.Method({Static:true , Public:false}, "GetIntWireType", 
      new JSIL.MethodSignature($asm0E.TypeRef("ProtoBuf.WireType"), [$asm0E.TypeRef("ProtoBuf.DataFormat"), $.Int32]), 
      ValueMember_GetIntWireType
    );

    $.Method({Static:false, Public:false}, "GetRawEnumValue", 
      JSIL.MethodSignature.Return($.Object), 
      ValueMember_GetRawEnumValue
    );

    $.Method({Static:false, Public:false}, "GetSchemaTypeName", 
      new JSIL.MethodSignature($.String, [$.Boolean, $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])]), 
      ValueMember_GetSchemaTypeName
    );

    $.Method({Static:false, Public:false}, "HasFlag", 
      new JSIL.MethodSignature($.Boolean, [$.Byte]), 
      ValueMember_HasFlag
    );

    $.Method({Static:true , Public:false}, "ParseDefaultValue", 
      new JSIL.MethodSignature($.Object, [$asm14.TypeRef("System.Type"), $.Object]), 
      ValueMember_ParseDefaultValue
    );

    $.Method({Static:false, Public:true }, "set_AsReference", 
      JSIL.MethodSignature.Action($.Boolean), 
      ValueMember_set_AsReference
    );

    $.Method({Static:false, Public:true }, "set_DataFormat", 
      JSIL.MethodSignature.Action($asm0E.TypeRef("ProtoBuf.DataFormat")), 
      ValueMember_set_DataFormat
    );

    $.Method({Static:false, Public:true }, "set_DefaultValue", 
      JSIL.MethodSignature.Action($.Object), 
      ValueMember_set_DefaultValue
    );

    $.Method({Static:false, Public:true }, "set_DynamicType", 
      JSIL.MethodSignature.Action($.Boolean), 
      ValueMember_set_DynamicType
    );

    $.Method({Static:false, Public:true }, "set_IsPacked", 
      JSIL.MethodSignature.Action($.Boolean), 
      ValueMember_set_IsPacked
    );

    $.Method({Static:false, Public:true }, "set_IsRequired", 
      JSIL.MethodSignature.Action($.Boolean), 
      ValueMember_set_IsRequired
    );

    $.Method({Static:false, Public:true }, "set_IsStrict", 
      JSIL.MethodSignature.Action($.Boolean), 
      ValueMember_set_IsStrict
    );

    $.Method({Static:false, Public:true }, "set_OverwriteList", 
      JSIL.MethodSignature.Action($.Boolean), 
      ValueMember_set_OverwriteList
    );

    $.Method({Static:false, Public:true }, "set_SupportNull", 
      JSIL.MethodSignature.Action($.Boolean), 
      ValueMember_set_SupportNull
    );

    $.Method({Static:false, Public:false}, "SetFlag", 
      new JSIL.MethodSignature(null, [
          $.Byte, $.Boolean, 
          $.Boolean
        ]), 
      ValueMember_SetFlag
    );

    $.Method({Static:false, Public:false}, "SetName", 
      JSIL.MethodSignature.Action($.String), 
      ValueMember_SetName
    );

    $.Method({Static:false, Public:true }, "SetSpecified", 
      new JSIL.MethodSignature(null, [$asm14.TypeRef("System.Reflection.MethodInfo"), $asm14.TypeRef("System.Reflection.MethodInfo")]), 
      ValueMember_SetSpecified
    );

    $.Method({Static:false, Public:false}, "ThrowIfFrozen", 
      JSIL.MethodSignature.Void, 
      ValueMember_ThrowIfFrozen
    );

    $.Method({Static:true , Public:false}, "TryGetCoreSerializer", 
      new JSIL.MethodSignature($asm0E.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), [
          $asm0E.TypeRef("ProtoBuf.Meta.RuntimeTypeModel"), $asm0E.TypeRef("ProtoBuf.DataFormat"), 
          $asm14.TypeRef("System.Type"), $jsilcore.TypeRef("JSIL.Reference", [$asm0E.TypeRef("ProtoBuf.WireType")]), 
          $.Boolean, $.Boolean, 
          $.Boolean, $.Boolean
        ]), 
      ValueMember_TryGetCoreSerializer
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "fieldNumber", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "member", $asm14.TypeRef("System.Reflection.MemberInfo"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "parentType", $asm14.TypeRef("System.Type"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "itemType", $asm14.TypeRef("System.Type"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "defaultType", $asm14.TypeRef("System.Type"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "memberType", $asm14.TypeRef("System.Type"));

    $.Field({Static:false, Public:false}, "defaultValue", $.Object);

    $.Field({Static:false, Public:false, ReadOnly:true }, "model", $asm0E.TypeRef("ProtoBuf.Meta.RuntimeTypeModel"));

    $.Field({Static:false, Public:false}, "serializer", $asm0E.TypeRef("ProtoBuf.Serializers.IProtoSerializer"));

    $.Field({Static:false, Public:false}, "dataFormat", $asm0E.TypeRef("ProtoBuf.DataFormat"));

    $.Field({Static:false, Public:false}, "asReference", $.Boolean);

    $.Field({Static:false, Public:false}, "dynamicType", $.Boolean);

    $.Field({Static:false, Public:false}, "getSpecified", $asm14.TypeRef("System.Reflection.MethodInfo"));

    $.Field({Static:false, Public:false}, "setSpecified", $asm14.TypeRef("System.Reflection.MethodInfo"));

    $.Field({Static:false, Public:false}, "$name", $.String);

    $.Constant({Static:true , Public:false}, "OPTIONS_IsStrict", $.Byte, 1);

    $.Constant({Static:true , Public:false}, "OPTIONS_IsPacked", $.Byte, 2);

    $.Constant({Static:true , Public:false}, "OPTIONS_IsRequired", $.Byte, 4);

    $.Constant({Static:true , Public:false}, "OPTIONS_OverwriteList", $.Byte, 8);

    $.Constant({Static:true , Public:false}, "OPTIONS_SupportNull", $.Byte, 16);

    $.Field({Static:false, Public:false}, "flags", $.Byte);

    $.Property({Static:false, Public:true }, "FieldNumber", $.Int32);

    $.Property({Static:false, Public:true }, "Member", $asm14.TypeRef("System.Reflection.MemberInfo"));

    $.Property({Static:false, Public:true }, "ItemType", $asm14.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "MemberType", $asm14.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "DefaultType", $asm14.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "ParentType", $asm14.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "DefaultValue", $.Object);

    $.Property({Static:false, Public:false}, "Serializer", $asm0E.TypeRef("ProtoBuf.Serializers.IProtoSerializer"));

    $.Property({Static:false, Public:true }, "DataFormat", $asm0E.TypeRef("ProtoBuf.DataFormat"));

    $.Property({Static:false, Public:true }, "IsStrict", $.Boolean);

    $.Property({Static:false, Public:true }, "IsPacked", $.Boolean);

    $.Property({Static:false, Public:true }, "OverwriteList", $.Boolean);

    $.Property({Static:false, Public:true }, "IsRequired", $.Boolean);

    $.Property({Static:false, Public:true }, "AsReference", $.Boolean);

    $.Property({Static:false, Public:true }, "DynamicType", $.Boolean);

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "SupportNull", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ProtoBuf.Meta.ValueMember+Comparer */ 

(function Comparer$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm14.System.Object)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0E.ProtoBuf.Meta.ValueMember)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm14.System.Int32)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature($asm14.TypeRef("System.Int32"), [$asm0E.TypeRef("ProtoBuf.Meta.ValueMember"), $asm0E.TypeRef("ProtoBuf.Meta.ValueMember")]))) ();
  };


  function Comparer__ctor () {
  }; 

  function Comparer_Compare$00 (x, y) {
    return $S00().CallVirtual("Compare", null, this, $T01().$As(x), $T01().$As(y));
  }; 

  function Comparer_Compare$01 (x, y) {
    if (x === y) {
      var result = 0;
    } else {
      if (x === null) {
        result = -1;
      } else {
        if (y === null) {
          result = 1;
        } else {
          result = (JSIL.CompareValues(x.get_FieldNumber(), y.get_FieldNumber()));
        }
      }
    }
    return result;
  }; 

  JSIL.MakeType({
      BaseType: $asm14.TypeRef("System.Object"), 
      Name: "ProtoBuf.Meta.ValueMember+Comparer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      Comparer__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.Object, $.Object]), 
      Comparer_Compare$00
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$asm0E.TypeRef("ProtoBuf.Meta.ValueMember"), $asm0E.TypeRef("ProtoBuf.Meta.ValueMember")]), 
      Comparer_Compare$01
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "Default", $.Type);


    function Comparer__cctor () {
      $thisType.Default = new $thisType();
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      Comparer__cctor
    );

    $.ImplementInterfaces(
      /* 0 */ $asm14.TypeRef("System.Collections.IComparer"), 
      /* 1 */ $asm14.TypeRef("System.Collections.Generic.IComparer`1", [$asm0E.TypeRef("ProtoBuf.Meta.ValueMember")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

