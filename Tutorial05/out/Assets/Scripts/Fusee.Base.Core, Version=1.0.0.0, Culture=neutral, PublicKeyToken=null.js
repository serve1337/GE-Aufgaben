/* Generated by JSIL v0.8.2 build 17617. See http://jsil.org/ for more information. */ 
'use strict';
var $asm01 = JSIL.DeclareAssembly("Fusee.Base.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null");

JSIL.DeclareNamespace("Fusee");
JSIL.DeclareNamespace("Fusee.Base");
JSIL.DeclareNamespace("Fusee.Base.Core");
/* class Fusee.Base.Core.AssetStorage */ 

(function AssetStorage$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm14.System.Collections.Generic.List$b1.Of($asm00.Fusee.Base.Common.IAssetProvider))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm14.System.Type)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm14.System.String)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm14.System.Int32)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Fusee.Base.Common.IAssetProvider)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm14.System.Boolean)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm14.System.InvalidOperationException)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm14.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Fusee.Base.Common.IAssetProvider")]), null))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm14.TypeRef("System.InvalidOperationException"), [$asm14.TypeRef("System.String")]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm00.TypeRef("Fusee.Base.Common.IAssetProvider")]))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm00.Fusee.Base.Common.IAssetProvider.CanGet)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm00.Fusee.Base.Common.IAssetProvider.GetAsset)) ();
  };


  function AssetStorage__ctor () {
    this._providers = $S00().Construct();
  }; 

  function AssetStorage_Get$b1 (T, id) {
    return $thisType.get_Instance().GetAsset$b1(T)(id);
  }; 

  function AssetStorage_get_Instance () {
    var arg_14_0 = null;
    if ((arg_14_0 = $thisType._instance) === null) {
      arg_14_0 = $thisType._instance = new $thisType();
    }
    return arg_14_0;
  }; 

  function AssetStorage_GetAsset$b1 (T, id) {
    var $temp00;

    for (var a$0 = this._providers._items, i$0 = 0, l$0 = (this._providers._size | 0); i$0 < l$0; ($temp00 = i$0, 
        i$0 = ((i$0 + 1) | 0), 
        $temp00)) {
      var assetProvider = a$0[i$0];
      var flag = $IM00().Call(assetProvider, null, id, T);
      if (flag) {
        var result = JSIL.CloneParameter(T, T.$Cast($IM01().Call(assetProvider, null, id, T)));
        return result;
      }
    }
    result = (
      T.IsValueType
         ? JSIL.CreateInstanceOfType(T)
         : null)
    ;
    return result;
  }; 

  function AssetStorage_RegisterAssetProvider (assetProvider) {
    var flag = (this._providers).Contains(assetProvider);
    if (flag) {
      throw $S01().Construct(JSIL.ConcatString("Asset Provider already registered ", assetProvider));
    }
    $S02().CallVirtual("Add", null, this._providers, assetProvider);
  }; 

  function AssetStorage_RegisterProvider (assetProvider) {
    $thisType.get_Instance().RegisterAssetProvider(assetProvider);
  }; 

  JSIL.MakeType({
      BaseType: $asm14.TypeRef("System.Object"), 
      Name: "Fusee.Base.Core.AssetStorage", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void, 
      AssetStorage__ctor
    );

    $.Method({Static:true , Public:true }, "Get", 
      new JSIL.MethodSignature("!!0", [$.String], ["T"]), 
      AssetStorage_Get$b1
    );

    $.Method({Static:true , Public:true }, "get_Instance", 
      JSIL.MethodSignature.Return($.Type), 
      AssetStorage_get_Instance
    );

    $.Method({Static:false, Public:true }, "GetAsset", 
      new JSIL.MethodSignature("!!0", [$.String], ["T"]), 
      AssetStorage_GetAsset$b1
    );

    $.Method({Static:false, Public:true }, "RegisterAssetProvider", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Fusee.Base.Common.IAssetProvider")), 
      AssetStorage_RegisterAssetProvider
    );

    $.Method({Static:true , Public:true }, "RegisterProvider", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Fusee.Base.Common.IAssetProvider")), 
      AssetStorage_RegisterProvider
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_providers", $asm14.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Fusee.Base.Common.IAssetProvider")]));

    $.Field({Static:true , Public:false}, "_instance", $.Type);

    $.Property({Static:true , Public:true }, "Instance", $.Type);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Base.Core.Diagnostics */ 

(function Diagnostics$Members () {
  var $, $thisType;


  JSIL.MakeStaticClass("Fusee.Base.Core.Diagnostics", true, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "Log", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalProperty({Static:true , Public:true }, "Timer", $.Double);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Base.Core.Font */ 

(function Font$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm14.System.Collections.Generic.Dictionary$b2.Of($asm14.System.UInt32, $asm00.Fusee.Base.Common.GlyphInfo))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Fusee.Base.Common.IFontImp)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm14.System.UInt32)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Fusee.Base.Common.GlyphInfo)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm14.System.Boolean)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm14.System.Int32)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm14.TypeRef("System.Collections.Generic.Dictionary`2", [$asm14.TypeRef("System.UInt32"), $asm00.TypeRef("Fusee.Base.Common.GlyphInfo")]), null))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm00.Fusee.Base.Common.IFontImp.get_PixelHeight)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm00.Fusee.Base.Common.IFontImp.get_UseKerning)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm00.Fusee.Base.Common.IFontImp.GetGlyphInfo)) ();
  };
  var $IM03 = function () {
    return ($IM03 = JSIL.Memoize($asm00.Fusee.Base.Common.IFontImp.GetKerning)) ();
  };
  var $IM04 = function () {
    return ($IM04 = JSIL.Memoize($asm00.Fusee.Base.Common.IFontImp.RenderGlyph)) ();
  };
  var $IM05 = function () {
    return ($IM05 = JSIL.Memoize($asm00.Fusee.Base.Common.IFontImp.set_PixelHeight)) ();
  };
  var $IM06 = function () {
    return ($IM06 = JSIL.Memoize($asm00.Fusee.Base.Common.IFontImp.set_UseKerning)) ();
  };


  function Font__ctor () {
    this._glyphInfoCache = $S00().Construct();
  }; 

  function Font_get_PixelHeight () {
    return $IM00().Call(this._fontImp, null);
  }; 

  function Font_get_UseKerning () {
    return $IM01().Call(this._fontImp, null);
  }; 

  function Font_GetGlyphInfo (c) {
    var ret = new JSIL.BoxedVariable(new ($T03())());
    var flag = (this._glyphInfoCache).TryGetValue(c, /* ref */ ret);
    if (flag) {
      var result = ret.get().MemberwiseClone();
    } else {
      ret.set($IM02().Call(this._fontImp, null, c).MemberwiseClone());
      (this._glyphInfoCache).set_Item(c, ret.get().MemberwiseClone());
      result = ret.get().MemberwiseClone();
    }
    return result;
  }; 

  function Font_GetKerning (leftC, rightC) {
    return $IM03().Call(this._fontImp, null, leftC, rightC);
  }; 

  function Font_RenderGlyph (c, /* ref */ bitmapLeft, /* ref */ bitmapTop) {
    return $IM04().Call(this._fontImp, null, c, /* ref */ bitmapLeft, /* ref */ bitmapTop);
  }; 

  function Font_set_PixelHeight (value) {
    $IM05().Call(this._fontImp, null, value);
  }; 

  function Font_set_UseKerning (value) {
    $IM06().Call(this._fontImp, null, value);
  }; 

  JSIL.MakeType({
      BaseType: $asm14.TypeRef("System.Object"), 
      Name: "Fusee.Base.Core.Font", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      Font__ctor
    );

    $.Method({Static:false, Public:true }, "get_PixelHeight", 
      JSIL.MethodSignature.Return($.UInt32), 
      Font_get_PixelHeight
    );

    $.Method({Static:false, Public:true }, "get_UseKerning", 
      JSIL.MethodSignature.Return($.Boolean), 
      Font_get_UseKerning
    );

    $.Method({Static:false, Public:true }, "GetGlyphInfo", 
      new JSIL.MethodSignature($asm00.TypeRef("Fusee.Base.Common.GlyphInfo"), [$.UInt32]), 
      Font_GetGlyphInfo
    );

    $.Method({Static:false, Public:true }, "GetKerning", 
      new JSIL.MethodSignature($.Single, [$.UInt32, $.UInt32]), 
      Font_GetKerning
    );

    $.Method({Static:false, Public:true }, "RenderGlyph", 
      new JSIL.MethodSignature($asm00.TypeRef("Fusee.Base.Common.ImageData"), [
          $.UInt32, $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]), 
      Font_RenderGlyph
    );

    $.Method({Static:false, Public:true }, "set_PixelHeight", 
      JSIL.MethodSignature.Action($.UInt32), 
      Font_set_PixelHeight
    );

    $.Method({Static:false, Public:true }, "set_UseKerning", 
      JSIL.MethodSignature.Action($.Boolean), 
      Font_set_UseKerning
    );

    $.Field({Static:false, Public:true }, "_fontImp", $asm00.TypeRef("Fusee.Base.Common.IFontImp"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_glyphInfoCache", $asm14.TypeRef("System.Collections.Generic.Dictionary`2", [$.UInt32, $asm00.TypeRef("Fusee.Base.Common.GlyphInfo")]));

    $.Property({Static:false, Public:true }, "UseKerning", $.Boolean);

    $.Property({Static:false, Public:true }, "PixelHeight", $.UInt32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Base.Core.IO */ 

(function IO$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Fusee.Base.Common.IIOImp)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm14.System.String)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Fusee.Base.Common.FileMode)) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm00.Fusee.Base.Common.IIOImp.StreamFromFile)) ();
  };


  function IO_get_IOImp () {
    return $thisType.IO$IOImp$value;
  }; 

  function IO_set_IOImp (value) {
    $thisType.IO$IOImp$value = value;
  }; 

  function IO_StreamFromFile (path, mode) {
    return $IM00().Call($thisType.IO$IOImp$value, null, path, mode);
  }; 

  JSIL.MakeStaticClass("Fusee.Base.Core.IO", true, [], function ($ib) {
    $ = $ib;

    $.Method({Static:true , Public:true }, "get_IOImp", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Fusee.Base.Common.IIOImp")), 
      IO_get_IOImp
    )
      .Attribute($asm14.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "set_IOImp", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Fusee.Base.Common.IIOImp")), 
      IO_set_IOImp
    )
      .Attribute($asm14.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "StreamFromFile", 
      new JSIL.MethodSignature($asm14.TypeRef("System.IO.Stream"), [$.String, $asm00.TypeRef("Fusee.Base.Common.FileMode")]), 
      IO_StreamFromFile
    );

    $.Field({Static:true , Public:false}, "IO$IOImp$value", $asm00.TypeRef("Fusee.Base.Common.IIOImp"))
      .Attribute($asm14.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm14.TypeRef("System.Diagnostics.DebuggerBrowsableAttribute"), function () { return [$asm14.System.Diagnostics.DebuggerBrowsableState.Never]; });

    $.Property({Static:true , Public:true }, "IOImp", $asm00.TypeRef("Fusee.Base.Common.IIOImp"))
      .Attribute($asm00.TypeRef("Fusee.Base.Common.InjectMeAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

